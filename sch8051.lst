                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module sch8051
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _sch_mutex_start_PARM_2
                                     12 	.globl _SPR0
                                     13 	.globl _SPR1
                                     14 	.globl _CPHA
                                     15 	.globl _CPOL
                                     16 	.globl _SPIM
                                     17 	.globl _SPE
                                     18 	.globl _WCOL
                                     19 	.globl _ISPI
                                     20 	.globl _D0EN
                                     21 	.globl _D0
                                     22 	.globl _D1EN
                                     23 	.globl _D1
                                     24 	.globl _I2CI
                                     25 	.globl _I2CTX
                                     26 	.globl _I2CRS
                                     27 	.globl _I2CM
                                     28 	.globl _MDI
                                     29 	.globl _MCO
                                     30 	.globl _MDE
                                     31 	.globl _MDO
                                     32 	.globl _ERR1
                                     33 	.globl _ERR0
                                     34 	.globl _NOXREF
                                     35 	.globl _CAL
                                     36 	.globl _RDY1
                                     37 	.globl _RDY0
                                     38 	.globl _WDWR
                                     39 	.globl _WDE
                                     40 	.globl _WDS
                                     41 	.globl _WDIR
                                     42 	.globl _PRE0
                                     43 	.globl _PRE1
                                     44 	.globl _PRE2
                                     45 	.globl _PRE3
                                     46 	.globl _CAP2
                                     47 	.globl _CNT2
                                     48 	.globl _TR2
                                     49 	.globl _EXEN2
                                     50 	.globl _TCLK
                                     51 	.globl _RCLK
                                     52 	.globl _EXF2
                                     53 	.globl _TF2
                                     54 	.globl _T2
                                     55 	.globl _T2EX
                                     56 	.globl _RI
                                     57 	.globl _TI
                                     58 	.globl _RB8
                                     59 	.globl _TB8
                                     60 	.globl _REN
                                     61 	.globl _SM2
                                     62 	.globl _SM1
                                     63 	.globl _SM0
                                     64 	.globl _RXD
                                     65 	.globl _TXD
                                     66 	.globl _INT0
                                     67 	.globl _INT1
                                     68 	.globl _T0
                                     69 	.globl _T1
                                     70 	.globl _WR
                                     71 	.globl _RD
                                     72 	.globl _PX0
                                     73 	.globl _PT0
                                     74 	.globl _PX1
                                     75 	.globl _PT1
                                     76 	.globl _PS
                                     77 	.globl _PT2
                                     78 	.globl _PADC
                                     79 	.globl _EX0
                                     80 	.globl _ET0
                                     81 	.globl _EX1
                                     82 	.globl _ET1
                                     83 	.globl _ES
                                     84 	.globl _ET2
                                     85 	.globl _EADC
                                     86 	.globl _EA
                                     87 	.globl _IT0
                                     88 	.globl _IE0
                                     89 	.globl _IT1
                                     90 	.globl _IE1
                                     91 	.globl _TR0
                                     92 	.globl _TF0
                                     93 	.globl _TR1
                                     94 	.globl _TF1
                                     95 	.globl _P
                                     96 	.globl _F1
                                     97 	.globl _OV
                                     98 	.globl _RS0
                                     99 	.globl _RS1
                                    100 	.globl _F0
                                    101 	.globl _AC
                                    102 	.globl _CY
                                    103 	.globl _CFG847
                                    104 	.globl _EWAIT
                                    105 	.globl _SPICON
                                    106 	.globl _SPIDAT
                                    107 	.globl _I2CADD1
                                    108 	.globl _B
                                    109 	.globl _GN0H
                                    110 	.globl _GN0M
                                    111 	.globl _GN0L
                                    112 	.globl _DCON
                                    113 	.globl _I2CCON
                                    114 	.globl _ADC0CON2
                                    115 	.globl _OF0H
                                    116 	.globl _OF0M
                                    117 	.globl _OF0L
                                    118 	.globl _ACC
                                    119 	.globl _PSMCON
                                    120 	.globl _ADC0H
                                    121 	.globl _ADC0M
                                    122 	.globl _ADC0L
                                    123 	.globl _ADCSTAT
                                    124 	.globl _PLLCON
                                    125 	.globl _ICON
                                    126 	.globl _SF
                                    127 	.globl _ADC0CON1
                                    128 	.globl _ADCMODE
                                    129 	.globl _PSW
                                    130 	.globl _TH2
                                    131 	.globl _TL2
                                    132 	.globl _RCAP2H
                                    133 	.globl _RCAP2L
                                    134 	.globl _T2CON
                                    135 	.globl _EADRH
                                    136 	.globl _EADRL
                                    137 	.globl _CHIPID
                                    138 	.globl _WDCON
                                    139 	.globl _EDATA4
                                    140 	.globl _EDATA3
                                    141 	.globl _EDATA2
                                    142 	.globl _EDATA1
                                    143 	.globl _ECON
                                    144 	.globl _IP
                                    145 	.globl _SPH
                                    146 	.globl _PWM1H
                                    147 	.globl _PWM1L
                                    148 	.globl _PWMOH
                                    149 	.globl _PWM0L
                                    150 	.globl _P3
                                    151 	.globl _CFG848
                                    152 	.globl _PWMCON
                                    153 	.globl _IEIP2
                                    154 	.globl _IE
                                    155 	.globl _DPCON
                                    156 	.globl _INTVAL
                                    157 	.globl _HOUR
                                    158 	.globl _MIN
                                    159 	.globl _SEC
                                    160 	.globl _HTSEC
                                    161 	.globl _TIMECON
                                    162 	.globl _P2
                                    163 	.globl _T3CON
                                    164 	.globl _T3FD
                                    165 	.globl _I2CADD
                                    166 	.globl _I2CDAT
                                    167 	.globl _SBUF
                                    168 	.globl _SCON
                                    169 	.globl _P1
                                    170 	.globl _TH1
                                    171 	.globl _TH0
                                    172 	.globl _TL1
                                    173 	.globl _TL0
                                    174 	.globl _TMOD
                                    175 	.globl _TCON
                                    176 	.globl _PCON
                                    177 	.globl _DPP
                                    178 	.globl _DPH
                                    179 	.globl _DPL
                                    180 	.globl _SP
                                    181 	.globl _P0
                                    182 	.globl _sch_num_tasks
                                    183 	.globl _sch_index
                                    184 	.globl _sch_time
                                    185 	.globl _sch_tasks
                                    186 	.globl _sch_semaphore_start_PARM_2
                                    187 	.globl _sch_schedule
                                    188 	.globl _sch_dispatch
                                    189 	.globl _sch_init
                                    190 	.globl _sch_add_task
                                    191 	.globl _sch_start
                                    192 	.globl _sch_next
                                    193 	.globl _sch_mutex_start
                                    194 	.globl _sch_mutex_lock
                                    195 	.globl _sch_mutex_trylock
                                    196 	.globl _sch_mutex_release
                                    197 	.globl _sch_semaphore_start
                                    198 	.globl _sch_semaphore_tryget
                                    199 	.globl _sch_semaphore_get
                                    200 	.globl _sch_semaphore_put
                                    201 ;--------------------------------------------------------
                                    202 ; special function registers
                                    203 ;--------------------------------------------------------
                                    204 	.area RSEG    (ABS,DATA)
      000000                        205 	.org 0x0000
                           000080   206 _P0	=	0x0080
                           000081   207 _SP	=	0x0081
                           000082   208 _DPL	=	0x0082
                           000083   209 _DPH	=	0x0083
                           000084   210 _DPP	=	0x0084
                           000087   211 _PCON	=	0x0087
                           000088   212 _TCON	=	0x0088
                           000089   213 _TMOD	=	0x0089
                           00008A   214 _TL0	=	0x008a
                           00008B   215 _TL1	=	0x008b
                           00008C   216 _TH0	=	0x008c
                           00008D   217 _TH1	=	0x008d
                           000090   218 _P1	=	0x0090
                           000098   219 _SCON	=	0x0098
                           000099   220 _SBUF	=	0x0099
                           00009A   221 _I2CDAT	=	0x009a
                           00009B   222 _I2CADD	=	0x009b
                           00009D   223 _T3FD	=	0x009d
                           00009E   224 _T3CON	=	0x009e
                           0000A0   225 _P2	=	0x00a0
                           0000A1   226 _TIMECON	=	0x00a1
                           0000A2   227 _HTSEC	=	0x00a2
                           0000A3   228 _SEC	=	0x00a3
                           0000A4   229 _MIN	=	0x00a4
                           0000A5   230 _HOUR	=	0x00a5
                           0000A6   231 _INTVAL	=	0x00a6
                           0000A7   232 _DPCON	=	0x00a7
                           0000A8   233 _IE	=	0x00a8
                           0000A9   234 _IEIP2	=	0x00a9
                           0000AE   235 _PWMCON	=	0x00ae
                           0000AF   236 _CFG848	=	0x00af
                           0000B0   237 _P3	=	0x00b0
                           0000B1   238 _PWM0L	=	0x00b1
                           0000B2   239 _PWMOH	=	0x00b2
                           0000B3   240 _PWM1L	=	0x00b3
                           0000B4   241 _PWM1H	=	0x00b4
                           0000B7   242 _SPH	=	0x00b7
                           0000B8   243 _IP	=	0x00b8
                           0000B9   244 _ECON	=	0x00b9
                           0000BC   245 _EDATA1	=	0x00bc
                           0000BD   246 _EDATA2	=	0x00bd
                           0000BE   247 _EDATA3	=	0x00be
                           0000BF   248 _EDATA4	=	0x00bf
                           0000C0   249 _WDCON	=	0x00c0
                           0000C2   250 _CHIPID	=	0x00c2
                           0000C6   251 _EADRL	=	0x00c6
                           0000C7   252 _EADRH	=	0x00c7
                           0000C8   253 _T2CON	=	0x00c8
                           0000CA   254 _RCAP2L	=	0x00ca
                           0000CB   255 _RCAP2H	=	0x00cb
                           0000CC   256 _TL2	=	0x00cc
                           0000CD   257 _TH2	=	0x00cd
                           0000D0   258 _PSW	=	0x00d0
                           0000D1   259 _ADCMODE	=	0x00d1
                           0000D2   260 _ADC0CON1	=	0x00d2
                           0000D4   261 _SF	=	0x00d4
                           0000D5   262 _ICON	=	0x00d5
                           0000D7   263 _PLLCON	=	0x00d7
                           0000D8   264 _ADCSTAT	=	0x00d8
                           0000D9   265 _ADC0L	=	0x00d9
                           0000DA   266 _ADC0M	=	0x00da
                           0000DB   267 _ADC0H	=	0x00db
                           0000DF   268 _PSMCON	=	0x00df
                           0000E0   269 _ACC	=	0x00e0
                           0000E1   270 _OF0L	=	0x00e1
                           0000E2   271 _OF0M	=	0x00e2
                           0000E3   272 _OF0H	=	0x00e3
                           0000E6   273 _ADC0CON2	=	0x00e6
                           0000E8   274 _I2CCON	=	0x00e8
                           0000E8   275 _DCON	=	0x00e8
                           0000E9   276 _GN0L	=	0x00e9
                           0000EA   277 _GN0M	=	0x00ea
                           0000EB   278 _GN0H	=	0x00eb
                           0000F0   279 _B	=	0x00f0
                           0000F2   280 _I2CADD1	=	0x00f2
                           0000F7   281 _SPIDAT	=	0x00f7
                           0000F8   282 _SPICON	=	0x00f8
                           00009F   283 _EWAIT	=	0x009f
                           0000AF   284 _CFG847	=	0x00af
                                    285 ;--------------------------------------------------------
                                    286 ; special function bits
                                    287 ;--------------------------------------------------------
                                    288 	.area RSEG    (ABS,DATA)
      000000                        289 	.org 0x0000
                           0000D7   290 _CY	=	0x00d7
                           0000D6   291 _AC	=	0x00d6
                           0000D5   292 _F0	=	0x00d5
                           0000D4   293 _RS1	=	0x00d4
                           0000D3   294 _RS0	=	0x00d3
                           0000D2   295 _OV	=	0x00d2
                           0000D1   296 _F1	=	0x00d1
                           0000D0   297 _P	=	0x00d0
                           00008F   298 _TF1	=	0x008f
                           00008E   299 _TR1	=	0x008e
                           00008D   300 _TF0	=	0x008d
                           00008C   301 _TR0	=	0x008c
                           00008B   302 _IE1	=	0x008b
                           00008A   303 _IT1	=	0x008a
                           000089   304 _IE0	=	0x0089
                           000088   305 _IT0	=	0x0088
                           0000AF   306 _EA	=	0x00af
                           0000AE   307 _EADC	=	0x00ae
                           0000AD   308 _ET2	=	0x00ad
                           0000AC   309 _ES	=	0x00ac
                           0000AB   310 _ET1	=	0x00ab
                           0000AA   311 _EX1	=	0x00aa
                           0000A9   312 _ET0	=	0x00a9
                           0000A8   313 _EX0	=	0x00a8
                           0000BE   314 _PADC	=	0x00be
                           0000BD   315 _PT2	=	0x00bd
                           0000BC   316 _PS	=	0x00bc
                           0000BB   317 _PT1	=	0x00bb
                           0000BA   318 _PX1	=	0x00ba
                           0000B9   319 _PT0	=	0x00b9
                           0000B8   320 _PX0	=	0x00b8
                           0000B7   321 _RD	=	0x00b7
                           0000B6   322 _WR	=	0x00b6
                           0000B5   323 _T1	=	0x00b5
                           0000B4   324 _T0	=	0x00b4
                           0000B3   325 _INT1	=	0x00b3
                           0000B2   326 _INT0	=	0x00b2
                           0000B1   327 _TXD	=	0x00b1
                           0000B0   328 _RXD	=	0x00b0
                           00009F   329 _SM0	=	0x009f
                           00009E   330 _SM1	=	0x009e
                           00009D   331 _SM2	=	0x009d
                           00009C   332 _REN	=	0x009c
                           00009B   333 _TB8	=	0x009b
                           00009A   334 _RB8	=	0x009a
                           000099   335 _TI	=	0x0099
                           000098   336 _RI	=	0x0098
                           000091   337 _T2EX	=	0x0091
                           000090   338 _T2	=	0x0090
                           0000CF   339 _TF2	=	0x00cf
                           0000CE   340 _EXF2	=	0x00ce
                           0000CD   341 _RCLK	=	0x00cd
                           0000CC   342 _TCLK	=	0x00cc
                           0000CB   343 _EXEN2	=	0x00cb
                           0000CA   344 _TR2	=	0x00ca
                           0000C9   345 _CNT2	=	0x00c9
                           0000C8   346 _CAP2	=	0x00c8
                           0000C7   347 _PRE3	=	0x00c7
                           0000C6   348 _PRE2	=	0x00c6
                           0000C5   349 _PRE1	=	0x00c5
                           0000C4   350 _PRE0	=	0x00c4
                           0000C3   351 _WDIR	=	0x00c3
                           0000C2   352 _WDS	=	0x00c2
                           0000C1   353 _WDE	=	0x00c1
                           0000C0   354 _WDWR	=	0x00c0
                           0000DF   355 _RDY0	=	0x00df
                           0000DE   356 _RDY1	=	0x00de
                           0000DD   357 _CAL	=	0x00dd
                           0000DC   358 _NOXREF	=	0x00dc
                           0000DB   359 _ERR0	=	0x00db
                           0000DA   360 _ERR1	=	0x00da
                           0000EF   361 _MDO	=	0x00ef
                           0000EE   362 _MDE	=	0x00ee
                           0000ED   363 _MCO	=	0x00ed
                           0000EC   364 _MDI	=	0x00ec
                           0000EB   365 _I2CM	=	0x00eb
                           0000EA   366 _I2CRS	=	0x00ea
                           0000E9   367 _I2CTX	=	0x00e9
                           0000E8   368 _I2CI	=	0x00e8
                           0000EF   369 _D1	=	0x00ef
                           0000EE   370 _D1EN	=	0x00ee
                           0000ED   371 _D0	=	0x00ed
                           0000EB   372 _D0EN	=	0x00eb
                           0000FF   373 _ISPI	=	0x00ff
                           0000FE   374 _WCOL	=	0x00fe
                           0000FD   375 _SPE	=	0x00fd
                           0000FC   376 _SPIM	=	0x00fc
                           0000FB   377 _CPOL	=	0x00fb
                           0000FA   378 _CPHA	=	0x00fa
                           0000F9   379 _SPR1	=	0x00f9
                           0000F8   380 _SPR0	=	0x00f8
                                    381 ;--------------------------------------------------------
                                    382 ; overlayable register banks
                                    383 ;--------------------------------------------------------
                                    384 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        385 	.ds 8
                                    386 ;--------------------------------------------------------
                                    387 ; overlayable bit register bank
                                    388 ;--------------------------------------------------------
                                    389 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        390 bits:
      000000                        391 	.ds 1
                           008000   392 	b0 = bits[0]
                           008100   393 	b1 = bits[1]
                           008200   394 	b2 = bits[2]
                           008300   395 	b3 = bits[3]
                           008400   396 	b4 = bits[4]
                           008500   397 	b5 = bits[5]
                           008600   398 	b6 = bits[6]
                           008700   399 	b7 = bits[7]
                                    400 ;--------------------------------------------------------
                                    401 ; internal ram data
                                    402 ;--------------------------------------------------------
                                    403 	.area DSEG    (DATA)
      000000                        404 _sch_mutex_lock_mut_65536_40:
      000000                        405 	.ds 3
      000003                        406 _sch_semaphore_start_PARM_2:
      000003                        407 	.ds 1
      000004                        408 _sch_semaphore_get_sem_65536_66:
      000004                        409 	.ds 3
                                    410 ;--------------------------------------------------------
                                    411 ; overlayable items in internal ram 
                                    412 ;--------------------------------------------------------
                                    413 	.area	OSEG    (OVR,DATA)
                                    414 	.area	OSEG    (OVR,DATA)
                                    415 	.area	OSEG    (OVR,DATA)
                                    416 	.area	OSEG    (OVR,DATA)
      000000                        417 _sch_mutex_start_PARM_2:
      000000                        418 	.ds 1
                                    419 ;--------------------------------------------------------
                                    420 ; indirectly addressable internal ram data
                                    421 ;--------------------------------------------------------
                                    422 	.area ISEG    (DATA)
                                    423 ;--------------------------------------------------------
                                    424 ; absolute internal ram data
                                    425 ;--------------------------------------------------------
                                    426 	.area IABS    (ABS,DATA)
                                    427 	.area IABS    (ABS,DATA)
                                    428 ;--------------------------------------------------------
                                    429 ; bit data
                                    430 ;--------------------------------------------------------
                                    431 	.area BSEG    (BIT)
                                    432 ;--------------------------------------------------------
                                    433 ; paged external ram data
                                    434 ;--------------------------------------------------------
                                    435 	.area PSEG    (PAG,XDATA)
                                    436 ;--------------------------------------------------------
                                    437 ; external ram data
                                    438 ;--------------------------------------------------------
                                    439 	.area XSEG    (XDATA)
                           000000   440 _sch_tasks	=	0x0000
                           000208   441 _sch_time	=	0x0208
                           000210   442 _sch_index	=	0x0210
                           000211   443 _sch_num_tasks	=	0x0211
                                    444 ;--------------------------------------------------------
                                    445 ; absolute external ram data
                                    446 ;--------------------------------------------------------
                                    447 	.area XABS    (ABS,XDATA)
                                    448 ;--------------------------------------------------------
                                    449 ; external initialized ram data
                                    450 ;--------------------------------------------------------
                                    451 	.area XISEG   (XDATA)
                                    452 	.area HOME    (CODE)
                                    453 	.area GSINIT0 (CODE)
                                    454 	.area GSINIT1 (CODE)
                                    455 	.area GSINIT2 (CODE)
                                    456 	.area GSINIT3 (CODE)
                                    457 	.area GSINIT4 (CODE)
                                    458 	.area GSINIT5 (CODE)
                                    459 	.area GSINIT  (CODE)
                                    460 	.area GSFINAL (CODE)
                                    461 	.area CSEG    (CODE)
                                    462 ;--------------------------------------------------------
                                    463 ; global & static initialisations
                                    464 ;--------------------------------------------------------
                                    465 	.area HOME    (CODE)
                                    466 	.area GSINIT  (CODE)
                                    467 	.area GSFINAL (CODE)
                                    468 	.area GSINIT  (CODE)
                                    469 ;--------------------------------------------------------
                                    470 ; Home
                                    471 ;--------------------------------------------------------
                                    472 	.area HOME    (CODE)
                                    473 	.area HOME    (CODE)
                                    474 ;--------------------------------------------------------
                                    475 ; code
                                    476 ;--------------------------------------------------------
                                    477 	.area CSEG    (CODE)
                                    478 ;------------------------------------------------------------
                                    479 ;Allocation info for local variables in function 'sch_schedule'
                                    480 ;------------------------------------------------------------
                                    481 ;i                         Allocated to registers r6 
                                    482 ;------------------------------------------------------------
                                    483 ;	sch8051.c:81: void sch_schedule(){
                                    484 ;	-----------------------------------------
                                    485 ;	 function sch_schedule
                                    486 ;	-----------------------------------------
      000000                        487 _sch_schedule:
                           000007   488 	ar7 = 0x07
                           000006   489 	ar6 = 0x06
                           000005   490 	ar5 = 0x05
                           000004   491 	ar4 = 0x04
                           000003   492 	ar3 = 0x03
                           000002   493 	ar2 = 0x02
                           000001   494 	ar1 = 0x01
                           000000   495 	ar0 = 0x00
                                    496 ;	sch8051.c:84: i = (sch_index + 1)%sch_num_tasks; 
      000000 90 02 10         [24]  497 	mov	dptr,#_sch_index
      000003 E0               [24]  498 	movx	a,@dptr
      000004 FF               [12]  499 	mov	r7,a
      000005 7E 00            [12]  500 	mov	r6,#0x00
      000007 0F               [12]  501 	inc	r7
      000008 BF 00 01         [24]  502 	cjne	r7,#0x00,00120$
      00000B 0E               [12]  503 	inc	r6
      00000C                        504 00120$:
      00000C 90 02 11         [24]  505 	mov	dptr,#_sch_num_tasks
      00000F E0               [24]  506 	movx	a,@dptr
      000010 FD               [12]  507 	mov	r5,a
      000011 8D*00            [24]  508 	mov	__modsint_PARM_2,r5
      000013 75*01 00         [24]  509 	mov	(__modsint_PARM_2 + 1),#0x00
      000016 8F 82            [24]  510 	mov	dpl,r7
      000018 8E 83            [24]  511 	mov	dph,r6
      00001A 12r00r00         [24]  512 	lcall	__modsint
      00001D AE 82            [24]  513 	mov	r6,dpl
      00001F AF 83            [24]  514 	mov	r7,dph
                                    515 ;	sch8051.c:86: while(i != sch_index){
      000021                        516 00103$:
      000021 90 02 10         [24]  517 	mov	dptr,#_sch_index
      000024 E0               [24]  518 	movx	a,@dptr
      000025 FF               [12]  519 	mov	r7,a
      000026 EE               [12]  520 	mov	a,r6
      000027 B5 07 02         [24]  521 	cjne	a,ar7,00121$
      00002A 80 3F            [24]  522 	sjmp	00105$
      00002C                        523 00121$:
                                    524 ;	sch8051.c:87: if(sch_tasks[i].state == WAIT){
      00002C EE               [12]  525 	mov	a,r6
      00002D 75 F0 34         [24]  526 	mov	b,#0x34
      000030 A4               [48]  527 	mul	ab
      000031 24 00            [12]  528 	add	a,#_sch_tasks
      000033 FD               [12]  529 	mov	r5,a
      000034 74 00            [12]  530 	mov	a,#(_sch_tasks >> 8)
      000036 35 F0            [12]  531 	addc	a,b
      000038 FF               [12]  532 	mov	r7,a
      000039 74 33            [12]  533 	mov	a,#0x33
      00003B 2D               [12]  534 	add	a,r5
      00003C F5 82            [12]  535 	mov	dpl,a
      00003E E4               [12]  536 	clr	a
      00003F 3F               [12]  537 	addc	a,r7
      000040 F5 83            [12]  538 	mov	dph,a
      000042 E0               [24]  539 	movx	a,@dptr
      000043 FF               [12]  540 	mov	r7,a
      000044 BF 01 02         [24]  541 	cjne	r7,#0x01,00122$
      000047 80 22            [24]  542 	sjmp	00105$
      000049                        543 00122$:
                                    544 ;	sch8051.c:90: i = (i + 1)%sch_num_tasks; 
      000049 8E 05            [24]  545 	mov	ar5,r6
      00004B 7F 00            [12]  546 	mov	r7,#0x00
      00004D 0D               [12]  547 	inc	r5
      00004E BD 00 01         [24]  548 	cjne	r5,#0x00,00123$
      000051 0F               [12]  549 	inc	r7
      000052                        550 00123$:
      000052 90 02 11         [24]  551 	mov	dptr,#_sch_num_tasks
      000055 E0               [24]  552 	movx	a,@dptr
      000056 FC               [12]  553 	mov	r4,a
      000057 8C*00            [24]  554 	mov	__modsint_PARM_2,r4
      000059 75*01 00         [24]  555 	mov	(__modsint_PARM_2 + 1),#0x00
      00005C 8D 82            [24]  556 	mov	dpl,r5
      00005E 8F 83            [24]  557 	mov	dph,r7
      000060 12r00r00         [24]  558 	lcall	__modsint
      000063 AD 82            [24]  559 	mov	r5,dpl
      000065 AF 83            [24]  560 	mov	r7,dph
      000067 8D 06            [24]  561 	mov	ar6,r5
      000069 80 B6            [24]  562 	sjmp	00103$
      00006B                        563 00105$:
                                    564 ;	sch8051.c:93: sch_tasks[sch_index].state = WAIT; 
      00006B 90 02 10         [24]  565 	mov	dptr,#_sch_index
      00006E E0               [24]  566 	movx	a,@dptr
      00006F 75 F0 34         [24]  567 	mov	b,#0x34
      000072 A4               [48]  568 	mul	ab
      000073 24 00            [12]  569 	add	a,#_sch_tasks
      000075 FD               [12]  570 	mov	r5,a
      000076 74 00            [12]  571 	mov	a,#(_sch_tasks >> 8)
      000078 35 F0            [12]  572 	addc	a,b
      00007A FF               [12]  573 	mov	r7,a
      00007B 74 33            [12]  574 	mov	a,#0x33
      00007D 2D               [12]  575 	add	a,r5
      00007E F5 82            [12]  576 	mov	dpl,a
      000080 E4               [12]  577 	clr	a
      000081 3F               [12]  578 	addc	a,r7
      000082 F5 83            [12]  579 	mov	dph,a
      000084 74 01            [12]  580 	mov	a,#0x01
      000086 F0               [24]  581 	movx	@dptr,a
                                    582 ;	sch8051.c:94: sch_tasks[i].state = READY; 
      000087 EE               [12]  583 	mov	a,r6
      000088 75 F0 34         [24]  584 	mov	b,#0x34
      00008B A4               [48]  585 	mul	ab
      00008C 24 00            [12]  586 	add	a,#_sch_tasks
      00008E FD               [12]  587 	mov	r5,a
      00008F 74 00            [12]  588 	mov	a,#(_sch_tasks >> 8)
      000091 35 F0            [12]  589 	addc	a,b
      000093 FF               [12]  590 	mov	r7,a
      000094 74 33            [12]  591 	mov	a,#0x33
      000096 2D               [12]  592 	add	a,r5
      000097 F5 82            [12]  593 	mov	dpl,a
      000099 E4               [12]  594 	clr	a
      00009A 3F               [12]  595 	addc	a,r7
      00009B F5 83            [12]  596 	mov	dph,a
      00009D E4               [12]  597 	clr	a
      00009E F0               [24]  598 	movx	@dptr,a
                                    599 ;	sch8051.c:95: sch_index = i; 
      00009F 90 02 10         [24]  600 	mov	dptr,#_sch_index
      0000A2 EE               [12]  601 	mov	a,r6
      0000A3 F0               [24]  602 	movx	@dptr,a
                                    603 ;	sch8051.c:96: }
      0000A4 22               [24]  604 	ret
                                    605 ;------------------------------------------------------------
                                    606 ;Allocation info for local variables in function 'sch_dispatch'
                                    607 ;------------------------------------------------------------
                                    608 ;ram                       Allocated to registers r1 
                                    609 ;xram                      Allocated to registers 
                                    610 ;ram                       Allocated to registers r1 
                                    611 ;xram                      Allocated to registers r6 r7 
                                    612 ;------------------------------------------------------------
                                    613 ;	sch8051.c:111: void sch_dispatch() __interrupt(5){
                                    614 ;	-----------------------------------------
                                    615 ;	 function sch_dispatch
                                    616 ;	-----------------------------------------
      0000A5                        617 _sch_dispatch:
      0000A5 C0*00            [24]  618 	push	bits
      0000A7 C0 E0            [24]  619 	push	acc
      0000A9 C0 F0            [24]  620 	push	b
      0000AB C0 82            [24]  621 	push	dpl
      0000AD C0 83            [24]  622 	push	dph
      0000AF C0 07            [24]  623 	push	(0+7)
      0000B1 C0 06            [24]  624 	push	(0+6)
      0000B3 C0 05            [24]  625 	push	(0+5)
      0000B5 C0 04            [24]  626 	push	(0+4)
      0000B7 C0 03            [24]  627 	push	(0+3)
      0000B9 C0 02            [24]  628 	push	(0+2)
      0000BB C0 01            [24]  629 	push	(0+1)
      0000BD C0 00            [24]  630 	push	(0+0)
      0000BF C0 D0            [24]  631 	push	psw
      0000C1 75 D0 00         [24]  632 	mov	psw,#0x00
                                    633 ;	sch8051.c:112: EA = 0; 
                                    634 ;	assignBit
      0000C4 C2 AF            [12]  635 	clr	_EA
                                    636 ;	sch8051.c:113: TF2 = 0; 
                                    637 ;	assignBit
      0000C6 C2 CF            [12]  638 	clr	_TF2
                                    639 ;	sch8051.c:114: sch_time--;
      0000C8 90 02 08         [24]  640 	mov	dptr,#_sch_time
      0000CB E0               [24]  641 	movx	a,@dptr
      0000CC FE               [12]  642 	mov	r6,a
      0000CD A3               [24]  643 	inc	dptr
      0000CE E0               [24]  644 	movx	a,@dptr
      0000CF FF               [12]  645 	mov	r7,a
      0000D0 1E               [12]  646 	dec	r6
      0000D1 BE FF 01         [24]  647 	cjne	r6,#0xff,00133$
      0000D4 1F               [12]  648 	dec	r7
      0000D5                        649 00133$:
      0000D5 90 02 08         [24]  650 	mov	dptr,#_sch_time
      0000D8 EE               [12]  651 	mov	a,r6
      0000D9 F0               [24]  652 	movx	@dptr,a
      0000DA EF               [12]  653 	mov	a,r7
      0000DB A3               [24]  654 	inc	dptr
      0000DC F0               [24]  655 	movx	@dptr,a
                                    656 ;	sch8051.c:115: if(sch_time == 0){
      0000DD 90 02 08         [24]  657 	mov	dptr,#_sch_time
      0000E0 E0               [24]  658 	movx	a,@dptr
      0000E1 FE               [12]  659 	mov	r6,a
      0000E2 A3               [24]  660 	inc	dptr
      0000E3 E0               [24]  661 	movx	a,@dptr
      0000E4 FF               [12]  662 	mov	r7,a
      0000E5 4E               [12]  663 	orl	a,r6
      0000E6 60 03            [24]  664 	jz	00134$
      0000E8 02r01r83         [24]  665 	ljmp	00108$
      0000EB                        666 00134$:
                                    667 ;	sch8051.c:116: sch_time = SCH_TIMEOUT; 
      0000EB 90 02 08         [24]  668 	mov	dptr,#_sch_time
      0000EE 74 0F            [12]  669 	mov	a,#0x0f
      0000F0 F0               [24]  670 	movx	@dptr,a
      0000F1 E4               [12]  671 	clr	a
      0000F2 A3               [24]  672 	inc	dptr
      0000F3 F0               [24]  673 	movx	@dptr,a
                                    674 ;	sch8051.c:117: TO_XRAM 
      0000F4 90 02 10         [24]  675 	mov	dptr,#_sch_index
      0000F7 E0               [24]  676 	movx	a,@dptr
      0000F8 75 F0 34         [24]  677 	mov	b,#0x34
      0000FB A4               [48]  678 	mul	ab
      0000FC 24 00            [12]  679 	add	a,#_sch_tasks
      0000FE FE               [12]  680 	mov	r6,a
      0000FF 74 00            [12]  681 	mov	a,#(_sch_tasks >> 8)
      000101 35 F0            [12]  682 	addc	a,b
      000103 FF               [12]  683 	mov	r7,a
      000104 E0               [24]  684 	movx	a,@dptr
      000105 75 F0 34         [24]  685 	mov	b,#0x34
      000108 A4               [48]  686 	mul	ab
      000109 24 00            [12]  687 	add	a,#_sch_tasks
      00010B FC               [12]  688 	mov	r4,a
      00010C 74 00            [12]  689 	mov	a,#(_sch_tasks >> 8)
      00010E 35 F0            [12]  690 	addc	a,b
      000110 FD               [12]  691 	mov	r5,a
      000111 74 32            [12]  692 	mov	a,#0x32
      000113 2C               [12]  693 	add	a,r4
      000114 F5 82            [12]  694 	mov	dpl,a
      000116 E4               [12]  695 	clr	a
      000117 3D               [12]  696 	addc	a,r5
      000118 F5 83            [12]  697 	mov	dph,a
      00011A E5 81            [12]  698 	mov	a,_SP
      00011C 24 BB            [12]  699 	add	a,#0xbb
      00011E FD               [12]  700 	mov	r5,a
      00011F F0               [24]  701 	movx	@dptr,a
      000120 79 45            [12]  702 	mov	r1,#0x45
      000122                        703 00101$:
      000122 89 05            [24]  704 	mov	ar5,r1
      000124 C3               [12]  705 	clr	c
      000125 E5 81            [12]  706 	mov	a,_SP
      000127 9D               [12]  707 	subb	a,r5
      000128 40 10            [24]  708 	jc	00103$
      00012A 87 05            [24]  709 	mov	ar5,@r1
      00012C 09               [12]  710 	inc	r1
      00012D 8E 82            [24]  711 	mov	dpl,r6
      00012F 8F 83            [24]  712 	mov	dph,r7
      000131 ED               [12]  713 	mov	a,r5
      000132 F0               [24]  714 	movx	@dptr,a
      000133 A3               [24]  715 	inc	dptr
      000134 AE 82            [24]  716 	mov	r6,dpl
      000136 AF 83            [24]  717 	mov	r7,dph
      000138 80 E8            [24]  718 	sjmp	00101$
      00013A                        719 00103$:
                                    720 ;	sch8051.c:118: sch_schedule(); 
      00013A 12r00r00         [24]  721 	lcall	_sch_schedule
                                    722 ;	sch8051.c:119: TO_STACK
      00013D 90 02 10         [24]  723 	mov	dptr,#_sch_index
      000140 E0               [24]  724 	movx	a,@dptr
      000141 75 F0 34         [24]  725 	mov	b,#0x34
      000144 A4               [48]  726 	mul	ab
      000145 24 00            [12]  727 	add	a,#_sch_tasks
      000147 FE               [12]  728 	mov	r6,a
      000148 74 00            [12]  729 	mov	a,#(_sch_tasks >> 8)
      00014A 35 F0            [12]  730 	addc	a,b
      00014C FF               [12]  731 	mov	r7,a
      00014D E0               [24]  732 	movx	a,@dptr
      00014E 75 F0 34         [24]  733 	mov	b,#0x34
      000151 A4               [48]  734 	mul	ab
      000152 24 00            [12]  735 	add	a,#_sch_tasks
      000154 FC               [12]  736 	mov	r4,a
      000155 74 00            [12]  737 	mov	a,#(_sch_tasks >> 8)
      000157 35 F0            [12]  738 	addc	a,b
      000159 FD               [12]  739 	mov	r5,a
      00015A 74 32            [12]  740 	mov	a,#0x32
      00015C 2C               [12]  741 	add	a,r4
      00015D F5 82            [12]  742 	mov	dpl,a
      00015F E4               [12]  743 	clr	a
      000160 3D               [12]  744 	addc	a,r5
      000161 F5 83            [12]  745 	mov	dph,a
      000163 E0               [24]  746 	movx	a,@dptr
      000164 FD               [12]  747 	mov	r5,a
      000165 24 45            [12]  748 	add	a,#0x45
      000167 F5 81            [12]  749 	mov	_SP,a
      000169 79 45            [12]  750 	mov	r1,#0x45
      00016B                        751 00104$:
      00016B 89 05            [24]  752 	mov	ar5,r1
      00016D C3               [12]  753 	clr	c
      00016E E5 81            [12]  754 	mov	a,_SP
      000170 9D               [12]  755 	subb	a,r5
      000171 40 10            [24]  756 	jc	00108$
      000173 8E 82            [24]  757 	mov	dpl,r6
      000175 8F 83            [24]  758 	mov	dph,r7
      000177 E0               [24]  759 	movx	a,@dptr
      000178 FD               [12]  760 	mov	r5,a
      000179 A3               [24]  761 	inc	dptr
      00017A AE 82            [24]  762 	mov	r6,dpl
      00017C AF 83            [24]  763 	mov	r7,dph
      00017E A7 05            [24]  764 	mov	@r1,ar5
      000180 09               [12]  765 	inc	r1
      000181 80 E8            [24]  766 	sjmp	00104$
      000183                        767 00108$:
                                    768 ;	sch8051.c:121: EA = 1;
                                    769 ;	assignBit
      000183 D2 AF            [12]  770 	setb	_EA
                                    771 ;	sch8051.c:122: }
      000185 D0 D0            [24]  772 	pop	psw
      000187 D0 00            [24]  773 	pop	(0+0)
      000189 D0 01            [24]  774 	pop	(0+1)
      00018B D0 02            [24]  775 	pop	(0+2)
      00018D D0 03            [24]  776 	pop	(0+3)
      00018F D0 04            [24]  777 	pop	(0+4)
      000191 D0 05            [24]  778 	pop	(0+5)
      000193 D0 06            [24]  779 	pop	(0+6)
      000195 D0 07            [24]  780 	pop	(0+7)
      000197 D0 83            [24]  781 	pop	dph
      000199 D0 82            [24]  782 	pop	dpl
      00019B D0 F0            [24]  783 	pop	b
      00019D D0 E0            [24]  784 	pop	acc
      00019F D0*00            [24]  785 	pop	bits
      0001A1 32               [24]  786 	reti
                                    787 ;------------------------------------------------------------
                                    788 ;Allocation info for local variables in function 'sch_init'
                                    789 ;------------------------------------------------------------
                                    790 ;i                         Allocated to registers r7 
                                    791 ;------------------------------------------------------------
                                    792 ;	sch8051.c:132: void sch_init(){
                                    793 ;	-----------------------------------------
                                    794 ;	 function sch_init
                                    795 ;	-----------------------------------------
      0001A2                        796 _sch_init:
                                    797 ;	sch8051.c:134: sch_index = 0;
      0001A2 90 02 10         [24]  798 	mov	dptr,#_sch_index
      0001A5 E4               [12]  799 	clr	a
      0001A6 F0               [24]  800 	movx	@dptr,a
                                    801 ;	sch8051.c:135: sch_num_tasks = 0; 
      0001A7 90 02 11         [24]  802 	mov	dptr,#_sch_num_tasks
      0001AA F0               [24]  803 	movx	@dptr,a
                                    804 ;	sch8051.c:136: sch_time = SCH_TIMEOUT;  
      0001AB 90 02 08         [24]  805 	mov	dptr,#_sch_time
      0001AE 74 0F            [12]  806 	mov	a,#0x0f
      0001B0 F0               [24]  807 	movx	@dptr,a
      0001B1 E4               [12]  808 	clr	a
      0001B2 A3               [24]  809 	inc	dptr
      0001B3 F0               [24]  810 	movx	@dptr,a
                                    811 ;	sch8051.c:137: for(i = 0; i < SCH_MAX_TASKS; i++){
      0001B4 7F 00            [12]  812 	mov	r7,#0x00
      0001B6                        813 00102$:
                                    814 ;	sch8051.c:138: sch_tasks[i].sp = 0; 
      0001B6 EF               [12]  815 	mov	a,r7
      0001B7 75 F0 34         [24]  816 	mov	b,#0x34
      0001BA A4               [48]  817 	mul	ab
      0001BB FD               [12]  818 	mov	r5,a
      0001BC AE F0            [24]  819 	mov	r6,b
      0001BE 8D 03            [24]  820 	mov	ar3,r5
      0001C0 74 00            [12]  821 	mov	a,#(_sch_tasks >> 8)
      0001C2 2E               [12]  822 	add	a,r6
      0001C3 FC               [12]  823 	mov	r4,a
      0001C4 74 32            [12]  824 	mov	a,#0x32
      0001C6 2B               [12]  825 	add	a,r3
      0001C7 F5 82            [12]  826 	mov	dpl,a
      0001C9 E4               [12]  827 	clr	a
      0001CA 3C               [12]  828 	addc	a,r4
      0001CB F5 83            [12]  829 	mov	dph,a
      0001CD E4               [12]  830 	clr	a
      0001CE F0               [24]  831 	movx	@dptr,a
                                    832 ;	sch8051.c:139: sch_tasks[i].state = FREE; 
      0001CF 74 00            [12]  833 	mov	a,#(_sch_tasks >> 8)
      0001D1 2E               [12]  834 	add	a,r6
      0001D2 FE               [12]  835 	mov	r6,a
      0001D3 74 33            [12]  836 	mov	a,#0x33
      0001D5 2D               [12]  837 	add	a,r5
      0001D6 F5 82            [12]  838 	mov	dpl,a
      0001D8 E4               [12]  839 	clr	a
      0001D9 3E               [12]  840 	addc	a,r6
      0001DA F5 83            [12]  841 	mov	dph,a
      0001DC 74 03            [12]  842 	mov	a,#0x03
      0001DE F0               [24]  843 	movx	@dptr,a
                                    844 ;	sch8051.c:137: for(i = 0; i < SCH_MAX_TASKS; i++){
      0001DF 0F               [12]  845 	inc	r7
      0001E0 BF 0A 00         [24]  846 	cjne	r7,#0x0a,00111$
      0001E3                        847 00111$:
      0001E3 40 D1            [24]  848 	jc	00102$
                                    849 ;	sch8051.c:141: }
      0001E5 22               [24]  850 	ret
                                    851 ;------------------------------------------------------------
                                    852 ;Allocation info for local variables in function 'sch_add_task'
                                    853 ;------------------------------------------------------------
                                    854 ;f                         Allocated to registers r6 r7 
                                    855 ;i                         Allocated to registers r5 
                                    856 ;j                         Allocated to registers r7 
                                    857 ;------------------------------------------------------------
                                    858 ;	sch8051.c:144: void sch_add_task(fptr *f){
                                    859 ;	-----------------------------------------
                                    860 ;	 function sch_add_task
                                    861 ;	-----------------------------------------
      0001E6                        862 _sch_add_task:
      0001E6 AE 82            [24]  863 	mov	r6,dpl
      0001E8 AF 83            [24]  864 	mov	r7,dph
                                    865 ;	sch8051.c:146: for(i = 0; i < SCH_MAX_TASKS; i++){
      0001EA 7D 00            [12]  866 	mov	r5,#0x00
      0001EC                        867 00107$:
                                    868 ;	sch8051.c:147: if(sch_tasks[i].state == FREE){
      0001EC ED               [12]  869 	mov	a,r5
      0001ED 75 F0 34         [24]  870 	mov	b,#0x34
      0001F0 A4               [48]  871 	mul	ab
      0001F1 24 00            [12]  872 	add	a,#_sch_tasks
      0001F3 FB               [12]  873 	mov	r3,a
      0001F4 74 00            [12]  874 	mov	a,#(_sch_tasks >> 8)
      0001F6 35 F0            [12]  875 	addc	a,b
      0001F8 FC               [12]  876 	mov	r4,a
      0001F9 74 33            [12]  877 	mov	a,#0x33
      0001FB 2B               [12]  878 	add	a,r3
      0001FC F5 82            [12]  879 	mov	dpl,a
      0001FE E4               [12]  880 	clr	a
      0001FF 3C               [12]  881 	addc	a,r4
      000200 F5 83            [12]  882 	mov	dph,a
      000202 E0               [24]  883 	movx	a,@dptr
      000203 FC               [12]  884 	mov	r4,a
      000204 BC 03 02         [24]  885 	cjne	r4,#0x03,00135$
      000207 80 06            [24]  886 	sjmp	00103$
      000209                        887 00135$:
                                    888 ;	sch8051.c:146: for(i = 0; i < SCH_MAX_TASKS; i++){
      000209 0D               [12]  889 	inc	r5
      00020A BD 0A 00         [24]  890 	cjne	r5,#0x0a,00136$
      00020D                        891 00136$:
      00020D 40 DD            [24]  892 	jc	00107$
      00020F                        893 00103$:
                                    894 ;	sch8051.c:152: if(sch_tasks[i].state != FREE){
      00020F ED               [12]  895 	mov	a,r5
      000210 75 F0 34         [24]  896 	mov	b,#0x34
      000213 A4               [48]  897 	mul	ab
      000214 FC               [12]  898 	mov	r4,a
      000215 AD F0            [24]  899 	mov	r5,b
      000217 8C 02            [24]  900 	mov	ar2,r4
      000219 74 00            [12]  901 	mov	a,#(_sch_tasks >> 8)
      00021B 2D               [12]  902 	add	a,r5
      00021C FB               [12]  903 	mov	r3,a
      00021D 74 33            [12]  904 	mov	a,#0x33
      00021F 2A               [12]  905 	add	a,r2
      000220 F5 82            [12]  906 	mov	dpl,a
      000222 E4               [12]  907 	clr	a
      000223 3B               [12]  908 	addc	a,r3
      000224 F5 83            [12]  909 	mov	dph,a
      000226 E0               [24]  910 	movx	a,@dptr
      000227 FB               [12]  911 	mov	r3,a
      000228 BB 03 02         [24]  912 	cjne	r3,#0x03,00138$
      00022B 80 01            [24]  913 	sjmp	00105$
      00022D                        914 00138$:
                                    915 ;	sch8051.c:153: return; 
      00022D 22               [24]  916 	ret
      00022E                        917 00105$:
                                    918 ;	sch8051.c:156: sch_tasks[i].stack_save[0] = ((unsigned short)f) & 0xff; 
      00022E 8C 82            [24]  919 	mov	dpl,r4
      000230 74 00            [12]  920 	mov	a,#(_sch_tasks >> 8)
      000232 2D               [12]  921 	add	a,r5
      000233 F5 83            [12]  922 	mov	dph,a
      000235 8E 03            [24]  923 	mov	ar3,r6
      000237 EB               [12]  924 	mov	a,r3
      000238 F0               [24]  925 	movx	@dptr,a
                                    926 ;	sch8051.c:157: sch_tasks[i].stack_save[1] = ((unsigned short)f >> 8) & 0xff;
      000239 8C 02            [24]  927 	mov	ar2,r4
      00023B 74 00            [12]  928 	mov	a,#(_sch_tasks >> 8)
      00023D 2D               [12]  929 	add	a,r5
      00023E FB               [12]  930 	mov	r3,a
      00023F 8A 82            [24]  931 	mov	dpl,r2
      000241 8B 83            [24]  932 	mov	dph,r3
      000243 A3               [24]  933 	inc	dptr
      000244 8F 06            [24]  934 	mov	ar6,r7
      000246 EE               [12]  935 	mov	a,r6
      000247 F0               [24]  936 	movx	@dptr,a
                                    937 ;	sch8051.c:158: sch_tasks[i].stack_save[2] = 0; 	//BITS
      000248 8C 06            [24]  938 	mov	ar6,r4
      00024A 74 00            [12]  939 	mov	a,#(_sch_tasks >> 8)
      00024C 2D               [12]  940 	add	a,r5
      00024D FF               [12]  941 	mov	r7,a
      00024E 8E 82            [24]  942 	mov	dpl,r6
      000250 8F 83            [24]  943 	mov	dph,r7
      000252 A3               [24]  944 	inc	dptr
      000253 A3               [24]  945 	inc	dptr
      000254 E4               [12]  946 	clr	a
      000255 F0               [24]  947 	movx	@dptr,a
                                    948 ;	sch8051.c:159: sch_tasks[i].stack_save[3] = ACC; 
      000256 8C 06            [24]  949 	mov	ar6,r4
      000258 74 00            [12]  950 	mov	a,#(_sch_tasks >> 8)
      00025A 2D               [12]  951 	add	a,r5
      00025B FF               [12]  952 	mov	r7,a
      00025C 8E 82            [24]  953 	mov	dpl,r6
      00025E 8F 83            [24]  954 	mov	dph,r7
      000260 A3               [24]  955 	inc	dptr
      000261 A3               [24]  956 	inc	dptr
      000262 A3               [24]  957 	inc	dptr
      000263 E5 E0            [12]  958 	mov	a,_ACC
      000265 F0               [24]  959 	movx	@dptr,a
                                    960 ;	sch8051.c:160: sch_tasks[i].stack_save[4] = B; 
      000266 8C 06            [24]  961 	mov	ar6,r4
      000268 74 00            [12]  962 	mov	a,#(_sch_tasks >> 8)
      00026A 2D               [12]  963 	add	a,r5
      00026B FF               [12]  964 	mov	r7,a
      00026C 8E 82            [24]  965 	mov	dpl,r6
      00026E 8F 83            [24]  966 	mov	dph,r7
      000270 A3               [24]  967 	inc	dptr
      000271 A3               [24]  968 	inc	dptr
      000272 A3               [24]  969 	inc	dptr
      000273 A3               [24]  970 	inc	dptr
      000274 E5 F0            [12]  971 	mov	a,_B
      000276 F0               [24]  972 	movx	@dptr,a
                                    973 ;	sch8051.c:161: sch_tasks[i].stack_save[5] = DPL; 
      000277 8C 06            [24]  974 	mov	ar6,r4
      000279 74 00            [12]  975 	mov	a,#(_sch_tasks >> 8)
      00027B 2D               [12]  976 	add	a,r5
      00027C FF               [12]  977 	mov	r7,a
      00027D 8E 82            [24]  978 	mov	dpl,r6
      00027F 8F 83            [24]  979 	mov	dph,r7
      000281 A3               [24]  980 	inc	dptr
      000282 A3               [24]  981 	inc	dptr
      000283 A3               [24]  982 	inc	dptr
      000284 A3               [24]  983 	inc	dptr
      000285 A3               [24]  984 	inc	dptr
      000286 E5 82            [12]  985 	mov	a,_DPL
      000288 F0               [24]  986 	movx	@dptr,a
                                    987 ;	sch8051.c:162: sch_tasks[i].stack_save[6] = DPH; 
      000289 8C 06            [24]  988 	mov	ar6,r4
      00028B 74 00            [12]  989 	mov	a,#(_sch_tasks >> 8)
      00028D 2D               [12]  990 	add	a,r5
      00028E FF               [12]  991 	mov	r7,a
      00028F 74 06            [12]  992 	mov	a,#0x06
      000291 2E               [12]  993 	add	a,r6
      000292 F5 82            [12]  994 	mov	dpl,a
      000294 E4               [12]  995 	clr	a
      000295 3F               [12]  996 	addc	a,r7
      000296 F5 83            [12]  997 	mov	dph,a
      000298 E5 83            [12]  998 	mov	a,_DPH
      00029A F0               [24]  999 	movx	@dptr,a
                                   1000 ;	sch8051.c:167: for(j = 7; j < 15; j++){
      00029B 7F 07            [12] 1001 	mov	r7,#0x07
      00029D                       1002 00109$:
                                   1003 ;	sch8051.c:168: sch_tasks[i].stack_save[j] = 0; 
      00029D 8C 03            [24] 1004 	mov	ar3,r4
      00029F 74 00            [12] 1005 	mov	a,#(_sch_tasks >> 8)
      0002A1 2D               [12] 1006 	add	a,r5
      0002A2 FE               [12] 1007 	mov	r6,a
      0002A3 EF               [12] 1008 	mov	a,r7
      0002A4 2B               [12] 1009 	add	a,r3
      0002A5 F5 82            [12] 1010 	mov	dpl,a
      0002A7 E4               [12] 1011 	clr	a
      0002A8 3E               [12] 1012 	addc	a,r6
      0002A9 F5 83            [12] 1013 	mov	dph,a
      0002AB E4               [12] 1014 	clr	a
      0002AC F0               [24] 1015 	movx	@dptr,a
                                   1016 ;	sch8051.c:167: for(j = 7; j < 15; j++){
      0002AD 0F               [12] 1017 	inc	r7
      0002AE BF 0F 00         [24] 1018 	cjne	r7,#0x0f,00139$
      0002B1                       1019 00139$:
      0002B1 40 EA            [24] 1020 	jc	00109$
                                   1021 ;	sch8051.c:171: sch_tasks[i].stack_save[15] = PSW; 
      0002B3 8C 06            [24] 1022 	mov	ar6,r4
      0002B5 74 00            [12] 1023 	mov	a,#(_sch_tasks >> 8)
      0002B7 2D               [12] 1024 	add	a,r5
      0002B8 FF               [12] 1025 	mov	r7,a
      0002B9 74 0F            [12] 1026 	mov	a,#0x0f
      0002BB 2E               [12] 1027 	add	a,r6
      0002BC F5 82            [12] 1028 	mov	dpl,a
      0002BE E4               [12] 1029 	clr	a
      0002BF 3F               [12] 1030 	addc	a,r7
      0002C0 F5 83            [12] 1031 	mov	dph,a
      0002C2 E5 D0            [12] 1032 	mov	a,_PSW
      0002C4 F0               [24] 1033 	movx	@dptr,a
                                   1034 ;	sch8051.c:173: sch_tasks[i].state = WAIT;  
      0002C5 8C 06            [24] 1035 	mov	ar6,r4
      0002C7 74 00            [12] 1036 	mov	a,#(_sch_tasks >> 8)
      0002C9 2D               [12] 1037 	add	a,r5
      0002CA FF               [12] 1038 	mov	r7,a
      0002CB 74 33            [12] 1039 	mov	a,#0x33
      0002CD 2E               [12] 1040 	add	a,r6
      0002CE F5 82            [12] 1041 	mov	dpl,a
      0002D0 E4               [12] 1042 	clr	a
      0002D1 3F               [12] 1043 	addc	a,r7
      0002D2 F5 83            [12] 1044 	mov	dph,a
      0002D4 74 01            [12] 1045 	mov	a,#0x01
      0002D6 F0               [24] 1046 	movx	@dptr,a
                                   1047 ;	sch8051.c:174: sch_tasks[i].sp = 15; 
      0002D7 74 00            [12] 1048 	mov	a,#(_sch_tasks >> 8)
      0002D9 2D               [12] 1049 	add	a,r5
      0002DA FD               [12] 1050 	mov	r5,a
      0002DB 74 32            [12] 1051 	mov	a,#0x32
      0002DD 2C               [12] 1052 	add	a,r4
      0002DE F5 82            [12] 1053 	mov	dpl,a
      0002E0 E4               [12] 1054 	clr	a
      0002E1 3D               [12] 1055 	addc	a,r5
      0002E2 F5 83            [12] 1056 	mov	dph,a
      0002E4 74 0F            [12] 1057 	mov	a,#0x0f
      0002E6 F0               [24] 1058 	movx	@dptr,a
                                   1059 ;	sch8051.c:175: sch_num_tasks++; 
      0002E7 90 02 11         [24] 1060 	mov	dptr,#_sch_num_tasks
      0002EA E0               [24] 1061 	movx	a,@dptr
      0002EB 04               [12] 1062 	inc	a
      0002EC F0               [24] 1063 	movx	@dptr,a
                                   1064 ;	sch8051.c:176: }
      0002ED 22               [24] 1065 	ret
                                   1066 ;------------------------------------------------------------
                                   1067 ;Allocation info for local variables in function 'sch_start'
                                   1068 ;------------------------------------------------------------
                                   1069 ;ram                       Allocated to registers r1 
                                   1070 ;xram                      Allocated to registers r6 r7 
                                   1071 ;------------------------------------------------------------
                                   1072 ;	sch8051.c:179: void sch_start(){
                                   1073 ;	-----------------------------------------
                                   1074 ;	 function sch_start
                                   1075 ;	-----------------------------------------
      0002EE                       1076 _sch_start:
                                   1077 ;	sch8051.c:180: EA = 0; 
                                   1078 ;	assignBit
      0002EE C2 AF            [12] 1079 	clr	_EA
                                   1080 ;	sch8051.c:183: T2CON = 0; 
      0002F0 75 C8 00         [24] 1081 	mov	_T2CON,#0x00
                                   1082 ;	sch8051.c:184: RCAP2H = 0xCE;
      0002F3 75 CB CE         [24] 1083 	mov	_RCAP2H,#0xce
                                   1084 ;	sch8051.c:185: RCAP2L = 0xD9; 
      0002F6 75 CA D9         [24] 1085 	mov	_RCAP2L,#0xd9
                                   1086 ;	sch8051.c:186: TH2 = 0xCE; 
      0002F9 75 CD CE         [24] 1087 	mov	_TH2,#0xce
                                   1088 ;	sch8051.c:187: TL2 = 0xD9;
      0002FC 75 CC D9         [24] 1089 	mov	_TL2,#0xd9
                                   1090 ;	sch8051.c:188: ET2 = 1; 
                                   1091 ;	assignBit
      0002FF D2 AD            [12] 1092 	setb	_ET2
                                   1093 ;	sch8051.c:189: TR2 = 1;  
                                   1094 ;	assignBit
      000301 D2 CA            [12] 1095 	setb	_TR2
                                   1096 ;	sch8051.c:192: sch_index = 0; 
      000303 90 02 10         [24] 1097 	mov	dptr,#_sch_index
      000306 E4               [12] 1098 	clr	a
      000307 F0               [24] 1099 	movx	@dptr,a
                                   1100 ;	sch8051.c:193: sch_tasks[sch_index].state = READY; 
      000308 E0               [24] 1101 	movx	a,@dptr
      000309 75 F0 34         [24] 1102 	mov	b,#0x34
      00030C A4               [48] 1103 	mul	ab
      00030D 24 00            [12] 1104 	add	a,#_sch_tasks
      00030F FE               [12] 1105 	mov	r6,a
      000310 74 00            [12] 1106 	mov	a,#(_sch_tasks >> 8)
      000312 35 F0            [12] 1107 	addc	a,b
      000314 FF               [12] 1108 	mov	r7,a
      000315 74 33            [12] 1109 	mov	a,#0x33
      000317 2E               [12] 1110 	add	a,r6
      000318 F5 82            [12] 1111 	mov	dpl,a
      00031A E4               [12] 1112 	clr	a
      00031B 3F               [12] 1113 	addc	a,r7
      00031C F5 83            [12] 1114 	mov	dph,a
      00031E E4               [12] 1115 	clr	a
      00031F F0               [24] 1116 	movx	@dptr,a
                                   1117 ;	sch8051.c:194: TO_STACK
      000320 90 02 10         [24] 1118 	mov	dptr,#_sch_index
      000323 E0               [24] 1119 	movx	a,@dptr
      000324 75 F0 34         [24] 1120 	mov	b,#0x34
      000327 A4               [48] 1121 	mul	ab
      000328 24 00            [12] 1122 	add	a,#_sch_tasks
      00032A FE               [12] 1123 	mov	r6,a
      00032B 74 00            [12] 1124 	mov	a,#(_sch_tasks >> 8)
      00032D 35 F0            [12] 1125 	addc	a,b
      00032F FF               [12] 1126 	mov	r7,a
      000330 E0               [24] 1127 	movx	a,@dptr
      000331 75 F0 34         [24] 1128 	mov	b,#0x34
      000334 A4               [48] 1129 	mul	ab
      000335 24 00            [12] 1130 	add	a,#_sch_tasks
      000337 FC               [12] 1131 	mov	r4,a
      000338 74 00            [12] 1132 	mov	a,#(_sch_tasks >> 8)
      00033A 35 F0            [12] 1133 	addc	a,b
      00033C FD               [12] 1134 	mov	r5,a
      00033D 74 32            [12] 1135 	mov	a,#0x32
      00033F 2C               [12] 1136 	add	a,r4
      000340 F5 82            [12] 1137 	mov	dpl,a
      000342 E4               [12] 1138 	clr	a
      000343 3D               [12] 1139 	addc	a,r5
      000344 F5 83            [12] 1140 	mov	dph,a
      000346 E0               [24] 1141 	movx	a,@dptr
      000347 FD               [12] 1142 	mov	r5,a
      000348 24 45            [12] 1143 	add	a,#0x45
      00034A F5 81            [12] 1144 	mov	_SP,a
      00034C 79 45            [12] 1145 	mov	r1,#0x45
      00034E                       1146 00101$:
      00034E 89 05            [24] 1147 	mov	ar5,r1
      000350 C3               [12] 1148 	clr	c
      000351 E5 81            [12] 1149 	mov	a,_SP
      000353 9D               [12] 1150 	subb	a,r5
      000354 40 10            [24] 1151 	jc	00103$
      000356 8E 82            [24] 1152 	mov	dpl,r6
      000358 8F 83            [24] 1153 	mov	dph,r7
      00035A E0               [24] 1154 	movx	a,@dptr
      00035B FD               [12] 1155 	mov	r5,a
      00035C A3               [24] 1156 	inc	dptr
      00035D AE 82            [24] 1157 	mov	r6,dpl
      00035F AF 83            [24] 1158 	mov	r7,dph
      000361 A7 05            [24] 1159 	mov	@r1,ar5
      000363 09               [12] 1160 	inc	r1
      000364 80 E8            [24] 1161 	sjmp	00101$
      000366                       1162 00103$:
                                   1163 ;	sch8051.c:195: POP_BANK  
      000366 D0 D0            [24] 1164 	pop psw 
      000368 D0 00            [24] 1165 	pop 0 
      00036A D0 01            [24] 1166 	pop 1 
      00036C D0 02            [24] 1167 	pop 2 
      00036E D0 03            [24] 1168 	pop 3 
      000370 D0 04            [24] 1169 	pop 4 
      000372 D0 05            [24] 1170 	pop 5 
      000374 D0 06            [24] 1171 	pop 6 
      000376 D0 07            [24] 1172 	pop 7 
      000378 D0 83            [24] 1173 	pop dph 
      00037A D0 82            [24] 1174 	pop dpl 
      00037C D0 F0            [24] 1175 	pop b 
      00037E D0 E0            [24] 1176 	pop acc 
      000380 D0*00            [24] 1177 	pop bits 
                                   1178 ;	sch8051.c:196: EA = 1;
                                   1179 ;	assignBit
      000382 D2 AF            [12] 1180 	setb	_EA
                                   1181 ;	sch8051.c:197: }
      000384 22               [24] 1182 	ret
                                   1183 ;------------------------------------------------------------
                                   1184 ;Allocation info for local variables in function 'sch_next'
                                   1185 ;------------------------------------------------------------
                                   1186 ;ram                       Allocated to registers r1 
                                   1187 ;xram                      Allocated to registers 
                                   1188 ;ram                       Allocated to registers r1 
                                   1189 ;xram                      Allocated to registers r6 r7 
                                   1190 ;------------------------------------------------------------
                                   1191 ;	sch8051.c:200: void sch_next(){
                                   1192 ;	-----------------------------------------
                                   1193 ;	 function sch_next
                                   1194 ;	-----------------------------------------
      000385                       1195 _sch_next:
                                   1196 ;	sch8051.c:201: EA = 0; 
                                   1197 ;	assignBit
      000385 C2 AF            [12] 1198 	clr	_EA
                                   1199 ;	sch8051.c:202: PUSH_BANK
      000387 C0*00            [24] 1200 	push bits 
      000389 C0 E0            [24] 1201 	push acc 
      00038B C0 F0            [24] 1202 	push b 
      00038D C0 82            [24] 1203 	push dpl 
      00038F C0 83            [24] 1204 	push dph 
      000391 C0 07            [24] 1205 	push 7 
      000393 C0 06            [24] 1206 	push 6 
      000395 C0 05            [24] 1207 	push 5 
      000397 C0 04            [24] 1208 	push 4 
      000399 C0 03            [24] 1209 	push 3 
      00039B C0 02            [24] 1210 	push 2 
      00039D C0 01            [24] 1211 	push 1 
      00039F C0 00            [24] 1212 	push 0 
      0003A1 C0 D0            [24] 1213 	push psw 
                                   1214 ;	sch8051.c:203: TO_XRAM
      0003A3 90 02 10         [24] 1215 	mov	dptr,#_sch_index
      0003A6 E0               [24] 1216 	movx	a,@dptr
      0003A7 75 F0 34         [24] 1217 	mov	b,#0x34
      0003AA A4               [48] 1218 	mul	ab
      0003AB 24 00            [12] 1219 	add	a,#_sch_tasks
      0003AD FE               [12] 1220 	mov	r6,a
      0003AE 74 00            [12] 1221 	mov	a,#(_sch_tasks >> 8)
      0003B0 35 F0            [12] 1222 	addc	a,b
      0003B2 FF               [12] 1223 	mov	r7,a
      0003B3 E0               [24] 1224 	movx	a,@dptr
      0003B4 75 F0 34         [24] 1225 	mov	b,#0x34
      0003B7 A4               [48] 1226 	mul	ab
      0003B8 24 00            [12] 1227 	add	a,#_sch_tasks
      0003BA FC               [12] 1228 	mov	r4,a
      0003BB 74 00            [12] 1229 	mov	a,#(_sch_tasks >> 8)
      0003BD 35 F0            [12] 1230 	addc	a,b
      0003BF FD               [12] 1231 	mov	r5,a
      0003C0 74 32            [12] 1232 	mov	a,#0x32
      0003C2 2C               [12] 1233 	add	a,r4
      0003C3 F5 82            [12] 1234 	mov	dpl,a
      0003C5 E4               [12] 1235 	clr	a
      0003C6 3D               [12] 1236 	addc	a,r5
      0003C7 F5 83            [12] 1237 	mov	dph,a
      0003C9 E5 81            [12] 1238 	mov	a,_SP
      0003CB 24 BB            [12] 1239 	add	a,#0xbb
      0003CD FD               [12] 1240 	mov	r5,a
      0003CE F0               [24] 1241 	movx	@dptr,a
      0003CF 79 45            [12] 1242 	mov	r1,#0x45
      0003D1                       1243 00101$:
      0003D1 89 05            [24] 1244 	mov	ar5,r1
      0003D3 C3               [12] 1245 	clr	c
      0003D4 E5 81            [12] 1246 	mov	a,_SP
      0003D6 9D               [12] 1247 	subb	a,r5
      0003D7 40 10            [24] 1248 	jc	00103$
      0003D9 87 05            [24] 1249 	mov	ar5,@r1
      0003DB 09               [12] 1250 	inc	r1
      0003DC 8E 82            [24] 1251 	mov	dpl,r6
      0003DE 8F 83            [24] 1252 	mov	dph,r7
      0003E0 ED               [12] 1253 	mov	a,r5
      0003E1 F0               [24] 1254 	movx	@dptr,a
      0003E2 A3               [24] 1255 	inc	dptr
      0003E3 AE 82            [24] 1256 	mov	r6,dpl
      0003E5 AF 83            [24] 1257 	mov	r7,dph
      0003E7 80 E8            [24] 1258 	sjmp	00101$
      0003E9                       1259 00103$:
                                   1260 ;	sch8051.c:204: sch_schedule();
      0003E9 12r00r00         [24] 1261 	lcall	_sch_schedule
                                   1262 ;	sch8051.c:205: TO_STACK
      0003EC 90 02 10         [24] 1263 	mov	dptr,#_sch_index
      0003EF E0               [24] 1264 	movx	a,@dptr
      0003F0 75 F0 34         [24] 1265 	mov	b,#0x34
      0003F3 A4               [48] 1266 	mul	ab
      0003F4 24 00            [12] 1267 	add	a,#_sch_tasks
      0003F6 FE               [12] 1268 	mov	r6,a
      0003F7 74 00            [12] 1269 	mov	a,#(_sch_tasks >> 8)
      0003F9 35 F0            [12] 1270 	addc	a,b
      0003FB FF               [12] 1271 	mov	r7,a
      0003FC E0               [24] 1272 	movx	a,@dptr
      0003FD 75 F0 34         [24] 1273 	mov	b,#0x34
      000400 A4               [48] 1274 	mul	ab
      000401 24 00            [12] 1275 	add	a,#_sch_tasks
      000403 FC               [12] 1276 	mov	r4,a
      000404 74 00            [12] 1277 	mov	a,#(_sch_tasks >> 8)
      000406 35 F0            [12] 1278 	addc	a,b
      000408 FD               [12] 1279 	mov	r5,a
      000409 74 32            [12] 1280 	mov	a,#0x32
      00040B 2C               [12] 1281 	add	a,r4
      00040C F5 82            [12] 1282 	mov	dpl,a
      00040E E4               [12] 1283 	clr	a
      00040F 3D               [12] 1284 	addc	a,r5
      000410 F5 83            [12] 1285 	mov	dph,a
      000412 E0               [24] 1286 	movx	a,@dptr
      000413 FD               [12] 1287 	mov	r5,a
      000414 24 45            [12] 1288 	add	a,#0x45
      000416 F5 81            [12] 1289 	mov	_SP,a
      000418 79 45            [12] 1290 	mov	r1,#0x45
      00041A                       1291 00104$:
      00041A 89 05            [24] 1292 	mov	ar5,r1
      00041C C3               [12] 1293 	clr	c
      00041D E5 81            [12] 1294 	mov	a,_SP
      00041F 9D               [12] 1295 	subb	a,r5
      000420 40 10            [24] 1296 	jc	00106$
      000422 8E 82            [24] 1297 	mov	dpl,r6
      000424 8F 83            [24] 1298 	mov	dph,r7
      000426 E0               [24] 1299 	movx	a,@dptr
      000427 FD               [12] 1300 	mov	r5,a
      000428 A3               [24] 1301 	inc	dptr
      000429 AE 82            [24] 1302 	mov	r6,dpl
      00042B AF 83            [24] 1303 	mov	r7,dph
      00042D A7 05            [24] 1304 	mov	@r1,ar5
      00042F 09               [12] 1305 	inc	r1
      000430 80 E8            [24] 1306 	sjmp	00104$
      000432                       1307 00106$:
                                   1308 ;	sch8051.c:206: POP_BANK
      000432 D0 D0            [24] 1309 	pop psw 
      000434 D0 00            [24] 1310 	pop 0 
      000436 D0 01            [24] 1311 	pop 1 
      000438 D0 02            [24] 1312 	pop 2 
      00043A D0 03            [24] 1313 	pop 3 
      00043C D0 04            [24] 1314 	pop 4 
      00043E D0 05            [24] 1315 	pop 5 
      000440 D0 06            [24] 1316 	pop 6 
      000442 D0 07            [24] 1317 	pop 7 
      000444 D0 83            [24] 1318 	pop dph 
      000446 D0 82            [24] 1319 	pop dpl 
      000448 D0 F0            [24] 1320 	pop b 
      00044A D0 E0            [24] 1321 	pop acc 
      00044C D0*00            [24] 1322 	pop bits 
                                   1323 ;	sch8051.c:207: EA = 1; 
                                   1324 ;	assignBit
      00044E D2 AF            [12] 1325 	setb	_EA
                                   1326 ;	sch8051.c:208: }
      000450 22               [24] 1327 	ret
                                   1328 ;------------------------------------------------------------
                                   1329 ;Allocation info for local variables in function 'sch_mutex_start'
                                   1330 ;------------------------------------------------------------
                                   1331 ;state                     Allocated with name '_sch_mutex_start_PARM_2'
                                   1332 ;mut                       Allocated to registers r5 r6 r7 
                                   1333 ;i                         Allocated to registers r4 
                                   1334 ;------------------------------------------------------------
                                   1335 ;	sch8051.c:215: void sch_mutex_start(struct sch_mutex_sync *mut, Byte state){
                                   1336 ;	-----------------------------------------
                                   1337 ;	 function sch_mutex_start
                                   1338 ;	-----------------------------------------
      000451                       1339 _sch_mutex_start:
                                   1340 ;	sch8051.c:218: mut->lock = MUTEX_LOCKED; 
      000451 AD 82            [24] 1341 	mov	r5,dpl
      000453 AE 83            [24] 1342 	mov	r6,dph
      000455 AF F0            [24] 1343 	mov	r7,b
      000457 E4               [12] 1344 	clr	a
      000458 12r00r00         [24] 1345 	lcall	__gptrput
                                   1346 ;	sch8051.c:219: if(state == MUTEX_LOCKED || state == MUTEX_RELEASED){
      00045B E5*00            [12] 1347 	mov	a,_sch_mutex_start_PARM_2
      00045D 60 05            [24] 1348 	jz	00101$
      00045F 74 01            [12] 1349 	mov	a,#0x01
      000461 B5*00 0B         [24] 1350 	cjne	a,_sch_mutex_start_PARM_2,00110$
      000464                       1351 00101$:
                                   1352 ;	sch8051.c:220: mut->lock = state; 
      000464 8D 82            [24] 1353 	mov	dpl,r5
      000466 8E 83            [24] 1354 	mov	dph,r6
      000468 8F F0            [24] 1355 	mov	b,r7
      00046A E5*00            [12] 1356 	mov	a,_sch_mutex_start_PARM_2
      00046C 12r00r00         [24] 1357 	lcall	__gptrput
                                   1358 ;	sch8051.c:222: for(i = 0; i < SCH_MAX_TASKS; i++){
      00046F                       1359 00110$:
      00046F 0D               [12] 1360 	inc	r5
      000470 BD 00 01         [24] 1361 	cjne	r5,#0x00,00121$
      000473 0E               [12] 1362 	inc	r6
      000474                       1363 00121$:
      000474 7C 00            [12] 1364 	mov	r4,#0x00
      000476                       1365 00105$:
                                   1366 ;	sch8051.c:223: mut->waiting_list[i] = 0; 
      000476 EC               [12] 1367 	mov	a,r4
      000477 2D               [12] 1368 	add	a,r5
      000478 F9               [12] 1369 	mov	r1,a
      000479 E4               [12] 1370 	clr	a
      00047A 3E               [12] 1371 	addc	a,r6
      00047B FA               [12] 1372 	mov	r2,a
      00047C 8F 03            [24] 1373 	mov	ar3,r7
      00047E 89 82            [24] 1374 	mov	dpl,r1
      000480 8A 83            [24] 1375 	mov	dph,r2
      000482 8B F0            [24] 1376 	mov	b,r3
      000484 E4               [12] 1377 	clr	a
      000485 12r00r00         [24] 1378 	lcall	__gptrput
                                   1379 ;	sch8051.c:222: for(i = 0; i < SCH_MAX_TASKS; i++){
      000488 0C               [12] 1380 	inc	r4
      000489 BC 0A 00         [24] 1381 	cjne	r4,#0x0a,00122$
      00048C                       1382 00122$:
      00048C 40 E8            [24] 1383 	jc	00105$
                                   1384 ;	sch8051.c:225: }
      00048E 22               [24] 1385 	ret
                                   1386 ;------------------------------------------------------------
                                   1387 ;Allocation info for local variables in function 'sch_mutex_lock'
                                   1388 ;------------------------------------------------------------
                                   1389 ;mut                       Allocated with name '_sch_mutex_lock_mut_65536_40'
                                   1390 ;------------------------------------------------------------
                                   1391 ;	sch8051.c:228: void sch_mutex_lock(struct sch_mutex_sync *mut){
                                   1392 ;	-----------------------------------------
                                   1393 ;	 function sch_mutex_lock
                                   1394 ;	-----------------------------------------
      00048F                       1395 _sch_mutex_lock:
      00048F 85 82*00         [24] 1396 	mov	_sch_mutex_lock_mut_65536_40,dpl
      000492 85 83*01         [24] 1397 	mov	(_sch_mutex_lock_mut_65536_40 + 1),dph
      000495 85 F0*02         [24] 1398 	mov	(_sch_mutex_lock_mut_65536_40 + 2),b
                                   1399 ;	sch8051.c:229: EA = 0; 
                                   1400 ;	assignBit
      000498 C2 AF            [12] 1401 	clr	_EA
                                   1402 ;	sch8051.c:230: while(1){
      00049A 74 01            [12] 1403 	mov	a,#0x01
      00049C 25*00            [12] 1404 	add	a,_sch_mutex_lock_mut_65536_40
      00049E FA               [12] 1405 	mov	r2,a
      00049F E4               [12] 1406 	clr	a
      0004A0 35*01            [12] 1407 	addc	a,(_sch_mutex_lock_mut_65536_40 + 1)
      0004A2 FB               [12] 1408 	mov	r3,a
      0004A3 AC*02            [24] 1409 	mov	r4,(_sch_mutex_lock_mut_65536_40 + 2)
      0004A5                       1410 00105$:
                                   1411 ;	sch8051.c:231: if(mut->lock == MUTEX_RELEASED){
      0004A5 85*00 82         [24] 1412 	mov	dpl,_sch_mutex_lock_mut_65536_40
      0004A8 85*01 83         [24] 1413 	mov	dph,(_sch_mutex_lock_mut_65536_40 + 1)
      0004AB 85*02 F0         [24] 1414 	mov	b,(_sch_mutex_lock_mut_65536_40 + 2)
      0004AE 12r00r00         [24] 1415 	lcall	__gptrget
      0004B1 F9               [12] 1416 	mov	r1,a
      0004B2 B9 01 10         [24] 1417 	cjne	r1,#0x01,00102$
                                   1418 ;	sch8051.c:232: mut->lock = MUTEX_LOCKED; 
      0004B5 85*00 82         [24] 1419 	mov	dpl,_sch_mutex_lock_mut_65536_40
      0004B8 85*01 83         [24] 1420 	mov	dph,(_sch_mutex_lock_mut_65536_40 + 1)
      0004BB 85*02 F0         [24] 1421 	mov	b,(_sch_mutex_lock_mut_65536_40 + 2)
      0004BE E4               [12] 1422 	clr	a
      0004BF 12r00r00         [24] 1423 	lcall	__gptrput
                                   1424 ;	sch8051.c:233: EA = 1; 
                                   1425 ;	assignBit
      0004C2 D2 AF            [12] 1426 	setb	_EA
                                   1427 ;	sch8051.c:234: break;
      0004C4 22               [24] 1428 	ret
      0004C5                       1429 00102$:
                                   1430 ;	sch8051.c:236: sch_tasks[sch_index].state = BLOCKED;
      0004C5 90 02 10         [24] 1431 	mov	dptr,#_sch_index
      0004C8 E0               [24] 1432 	movx	a,@dptr
      0004C9 75 F0 34         [24] 1433 	mov	b,#0x34
      0004CC A4               [48] 1434 	mul	ab
      0004CD 24 00            [12] 1435 	add	a,#_sch_tasks
      0004CF F8               [12] 1436 	mov	r0,a
      0004D0 74 00            [12] 1437 	mov	a,#(_sch_tasks >> 8)
      0004D2 35 F0            [12] 1438 	addc	a,b
      0004D4 F9               [12] 1439 	mov	r1,a
      0004D5 74 33            [12] 1440 	mov	a,#0x33
      0004D7 28               [12] 1441 	add	a,r0
      0004D8 F5 82            [12] 1442 	mov	dpl,a
      0004DA E4               [12] 1443 	clr	a
      0004DB 39               [12] 1444 	addc	a,r1
      0004DC F5 83            [12] 1445 	mov	dph,a
      0004DE 74 02            [12] 1446 	mov	a,#0x02
      0004E0 F0               [24] 1447 	movx	@dptr,a
                                   1448 ;	sch8051.c:237: mut->waiting_list[sch_index] = 1; 
      0004E1 90 02 10         [24] 1449 	mov	dptr,#_sch_index
      0004E4 E0               [24] 1450 	movx	a,@dptr
      0004E5 2A               [12] 1451 	add	a,r2
      0004E6 F8               [12] 1452 	mov	r0,a
      0004E7 E4               [12] 1453 	clr	a
      0004E8 3B               [12] 1454 	addc	a,r3
      0004E9 F9               [12] 1455 	mov	r1,a
      0004EA 8C 07            [24] 1456 	mov	ar7,r4
      0004EC 88 82            [24] 1457 	mov	dpl,r0
      0004EE 89 83            [24] 1458 	mov	dph,r1
      0004F0 8F F0            [24] 1459 	mov	b,r7
      0004F2 74 01            [12] 1460 	mov	a,#0x01
      0004F4 12r00r00         [24] 1461 	lcall	__gptrput
                                   1462 ;	sch8051.c:238: sch_next();  
      0004F7 C0 04            [24] 1463 	push	ar4
      0004F9 C0 03            [24] 1464 	push	ar3
      0004FB C0 02            [24] 1465 	push	ar2
      0004FD 12r03r85         [24] 1466 	lcall	_sch_next
      000500 D0 02            [24] 1467 	pop	ar2
      000502 D0 03            [24] 1468 	pop	ar3
      000504 D0 04            [24] 1469 	pop	ar4
                                   1470 ;	sch8051.c:239: EA = 0; 
                                   1471 ;	assignBit
      000506 C2 AF            [12] 1472 	clr	_EA
                                   1473 ;	sch8051.c:242: }
      000508 80 9B            [24] 1474 	sjmp	00105$
                                   1475 ;------------------------------------------------------------
                                   1476 ;Allocation info for local variables in function 'sch_mutex_trylock'
                                   1477 ;------------------------------------------------------------
                                   1478 ;mut                       Allocated to registers r5 r6 r7 
                                   1479 ;------------------------------------------------------------
                                   1480 ;	sch8051.c:244: Byte sch_mutex_trylock(struct sch_mutex_sync *mut) __critical __reentrant{
                                   1481 ;	-----------------------------------------
                                   1482 ;	 function sch_mutex_trylock
                                   1483 ;	-----------------------------------------
      00050A                       1484 _sch_mutex_trylock:
      00050A D3               [12] 1485 	setb	c
      00050B 10 AF 01         [24] 1486 	jbc	ea,00110$
      00050E C3               [12] 1487 	clr	c
      00050F                       1488 00110$:
      00050F C0 D0            [24] 1489 	push	psw
                                   1490 ;	sch8051.c:245: if(mut->lock == MUTEX_RELEASED){
      000511 AD 82            [24] 1491 	mov	r5,dpl
      000513 AE 83            [24] 1492 	mov	r6,dph
      000515 AF F0            [24] 1493 	mov	r7,b
      000517 12r00r00         [24] 1494 	lcall	__gptrget
      00051A FC               [12] 1495 	mov	r4,a
      00051B BC 01 0F         [24] 1496 	cjne	r4,#0x01,00102$
                                   1497 ;	sch8051.c:246: mut->lock = MUTEX_LOCKED; 
      00051E 8D 82            [24] 1498 	mov	dpl,r5
      000520 8E 83            [24] 1499 	mov	dph,r6
      000522 8F F0            [24] 1500 	mov	b,r7
      000524 E4               [12] 1501 	clr	a
      000525 12r00r00         [24] 1502 	lcall	__gptrput
                                   1503 ;	sch8051.c:247: return 1; 
      000528 75 82 01         [24] 1504 	mov	dpl,#0x01
      00052B 80 03            [24] 1505 	sjmp	00104$
      00052D                       1506 00102$:
                                   1507 ;	sch8051.c:249: return 0; 
      00052D 75 82 00         [24] 1508 	mov	dpl,#0x00
      000530                       1509 00104$:
                                   1510 ;	sch8051.c:251: }
      000530 D0 D0            [24] 1511 	pop	psw
      000532 92 AF            [24] 1512 	mov	ea,c
      000534 22               [24] 1513 	ret
                                   1514 ;------------------------------------------------------------
                                   1515 ;Allocation info for local variables in function 'sch_mutex_release'
                                   1516 ;------------------------------------------------------------
                                   1517 ;mut                       Allocated to registers r5 r6 r7 
                                   1518 ;i                         Allocated to registers r1 
                                   1519 ;------------------------------------------------------------
                                   1520 ;	sch8051.c:253: Byte sch_mutex_release(struct sch_mutex_sync *mut)__reentrant{
                                   1521 ;	-----------------------------------------
                                   1522 ;	 function sch_mutex_release
                                   1523 ;	-----------------------------------------
      000535                       1524 _sch_mutex_release:
      000535 AD 82            [24] 1525 	mov	r5,dpl
      000537 AE 83            [24] 1526 	mov	r6,dph
      000539 AF F0            [24] 1527 	mov	r7,b
                                   1528 ;	sch8051.c:254: EA = 0; 
                                   1529 ;	assignBit
      00053B C2 AF            [12] 1530 	clr	_EA
                                   1531 ;	sch8051.c:256: if(mut->lock == MUTEX_RELEASED){
      00053D 8D 82            [24] 1532 	mov	dpl,r5
      00053F 8E 83            [24] 1533 	mov	dph,r6
      000541 8F F0            [24] 1534 	mov	b,r7
      000543 12r00r00         [24] 1535 	lcall	__gptrget
      000546 FC               [12] 1536 	mov	r4,a
      000547 BC 01 06         [24] 1537 	cjne	r4,#0x01,00105$
                                   1538 ;	sch8051.c:257: EA = 1; 
                                   1539 ;	assignBit
      00054A D2 AF            [12] 1540 	setb	_EA
                                   1541 ;	sch8051.c:258: return 0; 
      00054C 75 82 00         [24] 1542 	mov	dpl,#0x00
      00054F 22               [24] 1543 	ret
      000550                       1544 00105$:
                                   1545 ;	sch8051.c:260: mut->lock = MUTEX_RELEASED; 
      000550 8D 82            [24] 1546 	mov	dpl,r5
      000552 8E 83            [24] 1547 	mov	dph,r6
      000554 8F F0            [24] 1548 	mov	b,r7
      000556 74 01            [12] 1549 	mov	a,#0x01
      000558 12r00r00         [24] 1550 	lcall	__gptrput
                                   1551 ;	sch8051.c:261: for(i = 0; i < sch_num_tasks; i++){
      00055B 0D               [12] 1552 	inc	r5
      00055C BD 00 01         [24] 1553 	cjne	r5,#0x00,00131$
      00055F 0E               [12] 1554 	inc	r6
      000560                       1555 00131$:
      000560 8D 02            [24] 1556 	mov	ar2,r5
      000562 8E 03            [24] 1557 	mov	ar3,r6
      000564 8F 04            [24] 1558 	mov	ar4,r7
      000566 79 00            [12] 1559 	mov	r1,#0x00
      000568                       1560 00108$:
      000568 90 02 11         [24] 1561 	mov	dptr,#_sch_num_tasks
      00056B E0               [24] 1562 	movx	a,@dptr
      00056C F8               [12] 1563 	mov	r0,a
      00056D C3               [12] 1564 	clr	c
      00056E E9               [12] 1565 	mov	a,r1
      00056F 98               [12] 1566 	subb	a,r0
      000570 50 65            [24] 1567 	jnc	00103$
                                   1568 ;	sch8051.c:262: if(mut->waiting_list[i] == 1){
      000572 C0 05            [24] 1569 	push	ar5
      000574 C0 06            [24] 1570 	push	ar6
      000576 C0 07            [24] 1571 	push	ar7
      000578 E9               [12] 1572 	mov	a,r1
      000579 2A               [12] 1573 	add	a,r2
      00057A F8               [12] 1574 	mov	r0,a
      00057B E4               [12] 1575 	clr	a
      00057C 3B               [12] 1576 	addc	a,r3
      00057D FE               [12] 1577 	mov	r6,a
      00057E 8C 07            [24] 1578 	mov	ar7,r4
      000580 88 82            [24] 1579 	mov	dpl,r0
      000582 8E 83            [24] 1580 	mov	dph,r6
      000584 8F F0            [24] 1581 	mov	b,r7
      000586 12r00r00         [24] 1582 	lcall	__gptrget
      000589 F8               [12] 1583 	mov	r0,a
      00058A B8 01 02         [24] 1584 	cjne	r0,#0x01,00133$
      00058D 80 08            [24] 1585 	sjmp	00134$
      00058F                       1586 00133$:
      00058F D0 07            [24] 1587 	pop	ar7
      000591 D0 06            [24] 1588 	pop	ar6
      000593 D0 05            [24] 1589 	pop	ar5
      000595 80 3D            [24] 1590 	sjmp	00109$
      000597                       1591 00134$:
      000597 D0 07            [24] 1592 	pop	ar7
      000599 D0 06            [24] 1593 	pop	ar6
      00059B D0 05            [24] 1594 	pop	ar5
                                   1595 ;	sch8051.c:263: sch_tasks[i].state = WAIT;
      00059D C0 02            [24] 1596 	push	ar2
      00059F C0 03            [24] 1597 	push	ar3
      0005A1 C0 04            [24] 1598 	push	ar4
      0005A3 E9               [12] 1599 	mov	a,r1
      0005A4 75 F0 34         [24] 1600 	mov	b,#0x34
      0005A7 A4               [48] 1601 	mul	ab
      0005A8 24 00            [12] 1602 	add	a,#_sch_tasks
      0005AA F8               [12] 1603 	mov	r0,a
      0005AB 74 00            [12] 1604 	mov	a,#(_sch_tasks >> 8)
      0005AD 35 F0            [12] 1605 	addc	a,b
      0005AF FC               [12] 1606 	mov	r4,a
      0005B0 74 33            [12] 1607 	mov	a,#0x33
      0005B2 28               [12] 1608 	add	a,r0
      0005B3 F5 82            [12] 1609 	mov	dpl,a
      0005B5 E4               [12] 1610 	clr	a
      0005B6 3C               [12] 1611 	addc	a,r4
      0005B7 F5 83            [12] 1612 	mov	dph,a
      0005B9 74 01            [12] 1613 	mov	a,#0x01
      0005BB F0               [24] 1614 	movx	@dptr,a
                                   1615 ;	sch8051.c:264: mut->waiting_list[i] = 0;  
      0005BC E9               [12] 1616 	mov	a,r1
      0005BD 2D               [12] 1617 	add	a,r5
      0005BE FA               [12] 1618 	mov	r2,a
      0005BF E4               [12] 1619 	clr	a
      0005C0 3E               [12] 1620 	addc	a,r6
      0005C1 FB               [12] 1621 	mov	r3,a
      0005C2 8F 04            [24] 1622 	mov	ar4,r7
      0005C4 8A 82            [24] 1623 	mov	dpl,r2
      0005C6 8B 83            [24] 1624 	mov	dph,r3
      0005C8 8C F0            [24] 1625 	mov	b,r4
      0005CA E4               [12] 1626 	clr	a
      0005CB 12r00r00         [24] 1627 	lcall	__gptrput
                                   1628 ;	sch8051.c:268: return 1; 
      0005CE D0 04            [24] 1629 	pop	ar4
      0005D0 D0 03            [24] 1630 	pop	ar3
      0005D2 D0 02            [24] 1631 	pop	ar2
                                   1632 ;	sch8051.c:264: mut->waiting_list[i] = 0;  
      0005D4                       1633 00109$:
                                   1634 ;	sch8051.c:261: for(i = 0; i < sch_num_tasks; i++){
      0005D4 09               [12] 1635 	inc	r1
      0005D5 80 91            [24] 1636 	sjmp	00108$
      0005D7                       1637 00103$:
                                   1638 ;	sch8051.c:267: EA = 1; 
                                   1639 ;	assignBit
      0005D7 D2 AF            [12] 1640 	setb	_EA
                                   1641 ;	sch8051.c:268: return 1; 
      0005D9 75 82 01         [24] 1642 	mov	dpl,#0x01
                                   1643 ;	sch8051.c:270: }
      0005DC 22               [24] 1644 	ret
                                   1645 ;------------------------------------------------------------
                                   1646 ;Allocation info for local variables in function 'sch_semaphore_start'
                                   1647 ;------------------------------------------------------------
                                   1648 ;size                      Allocated with name '_sch_semaphore_start_PARM_2'
                                   1649 ;sem                       Allocated to registers r5 r6 r7 
                                   1650 ;i                         Allocated to registers r4 
                                   1651 ;------------------------------------------------------------
                                   1652 ;	sch8051.c:272: void sch_semaphore_start(struct sch_semaphore_sync *sem, Byte size){
                                   1653 ;	-----------------------------------------
                                   1654 ;	 function sch_semaphore_start
                                   1655 ;	-----------------------------------------
      0005DD                       1656 _sch_semaphore_start:
                                   1657 ;	sch8051.c:273: sem->lock = size; 
      0005DD AD 82            [24] 1658 	mov	r5,dpl
      0005DF AE 83            [24] 1659 	mov	r6,dph
      0005E1 AF F0            [24] 1660 	mov	r7,b
      0005E3 E5*03            [12] 1661 	mov	a,_sch_semaphore_start_PARM_2
      0005E5 12r00r00         [24] 1662 	lcall	__gptrput
                                   1663 ;	sch8051.c:274: sem->share = size; 
      0005E8 74 0B            [12] 1664 	mov	a,#0x0b
      0005EA 2D               [12] 1665 	add	a,r5
      0005EB FA               [12] 1666 	mov	r2,a
      0005EC E4               [12] 1667 	clr	a
      0005ED 3E               [12] 1668 	addc	a,r6
      0005EE FB               [12] 1669 	mov	r3,a
      0005EF 8F 04            [24] 1670 	mov	ar4,r7
      0005F1 8A 82            [24] 1671 	mov	dpl,r2
      0005F3 8B 83            [24] 1672 	mov	dph,r3
      0005F5 8C F0            [24] 1673 	mov	b,r4
      0005F7 E5*03            [12] 1674 	mov	a,_sch_semaphore_start_PARM_2
      0005F9 12r00r00         [24] 1675 	lcall	__gptrput
                                   1676 ;	sch8051.c:276: for(i = 0; i < SCH_MAX_TASKS; i++){
      0005FC 0D               [12] 1677 	inc	r5
      0005FD BD 00 01         [24] 1678 	cjne	r5,#0x00,00111$
      000600 0E               [12] 1679 	inc	r6
      000601                       1680 00111$:
      000601 7C 00            [12] 1681 	mov	r4,#0x00
      000603                       1682 00102$:
                                   1683 ;	sch8051.c:277: sem->waiting_list[i] = 0; 
      000603 EC               [12] 1684 	mov	a,r4
      000604 2D               [12] 1685 	add	a,r5
      000605 F9               [12] 1686 	mov	r1,a
      000606 E4               [12] 1687 	clr	a
      000607 3E               [12] 1688 	addc	a,r6
      000608 FA               [12] 1689 	mov	r2,a
      000609 8F 03            [24] 1690 	mov	ar3,r7
      00060B 89 82            [24] 1691 	mov	dpl,r1
      00060D 8A 83            [24] 1692 	mov	dph,r2
      00060F 8B F0            [24] 1693 	mov	b,r3
      000611 E4               [12] 1694 	clr	a
      000612 12r00r00         [24] 1695 	lcall	__gptrput
                                   1696 ;	sch8051.c:276: for(i = 0; i < SCH_MAX_TASKS; i++){
      000615 0C               [12] 1697 	inc	r4
      000616 BC 0A 00         [24] 1698 	cjne	r4,#0x0a,00112$
      000619                       1699 00112$:
      000619 40 E8            [24] 1700 	jc	00102$
                                   1701 ;	sch8051.c:279: }
      00061B 22               [24] 1702 	ret
                                   1703 ;------------------------------------------------------------
                                   1704 ;Allocation info for local variables in function 'sch_semaphore_tryget'
                                   1705 ;------------------------------------------------------------
                                   1706 ;sem                       Allocated to registers r5 r6 r7 
                                   1707 ;------------------------------------------------------------
                                   1708 ;	sch8051.c:281: Byte sch_semaphore_tryget(struct sch_semaphore_sync *sem) __critical __reentrant{
                                   1709 ;	-----------------------------------------
                                   1710 ;	 function sch_semaphore_tryget
                                   1711 ;	-----------------------------------------
      00061C                       1712 _sch_semaphore_tryget:
      00061C D3               [12] 1713 	setb	c
      00061D 10 AF 01         [24] 1714 	jbc	ea,00110$
      000620 C3               [12] 1715 	clr	c
      000621                       1716 00110$:
      000621 C0 D0            [24] 1717 	push	psw
                                   1718 ;	sch8051.c:282: if(sem->lock > 0){
      000623 AD 82            [24] 1719 	mov	r5,dpl
      000625 AE 83            [24] 1720 	mov	r6,dph
      000627 AF F0            [24] 1721 	mov	r7,b
      000629 12r00r00         [24] 1722 	lcall	__gptrget
      00062C FC               [12] 1723 	mov	r4,a
      00062D 60 10            [24] 1724 	jz	00102$
                                   1725 ;	sch8051.c:283: sem->lock--; 
      00062F 1C               [12] 1726 	dec	r4
      000630 8D 82            [24] 1727 	mov	dpl,r5
      000632 8E 83            [24] 1728 	mov	dph,r6
      000634 8F F0            [24] 1729 	mov	b,r7
      000636 EC               [12] 1730 	mov	a,r4
      000637 12r00r00         [24] 1731 	lcall	__gptrput
                                   1732 ;	sch8051.c:284: return 1; 
      00063A 75 82 01         [24] 1733 	mov	dpl,#0x01
      00063D 80 03            [24] 1734 	sjmp	00104$
      00063F                       1735 00102$:
                                   1736 ;	sch8051.c:286: return 0; 
      00063F 75 82 00         [24] 1737 	mov	dpl,#0x00
      000642                       1738 00104$:
                                   1739 ;	sch8051.c:288: }
      000642 D0 D0            [24] 1740 	pop	psw
      000644 92 AF            [24] 1741 	mov	ea,c
      000646 22               [24] 1742 	ret
                                   1743 ;------------------------------------------------------------
                                   1744 ;Allocation info for local variables in function 'sch_semaphore_get'
                                   1745 ;------------------------------------------------------------
                                   1746 ;sem                       Allocated with name '_sch_semaphore_get_sem_65536_66'
                                   1747 ;------------------------------------------------------------
                                   1748 ;	sch8051.c:291: void sch_semaphore_get(struct sch_semaphore_sync *sem){
                                   1749 ;	-----------------------------------------
                                   1750 ;	 function sch_semaphore_get
                                   1751 ;	-----------------------------------------
      000647                       1752 _sch_semaphore_get:
      000647 85 82*04         [24] 1753 	mov	_sch_semaphore_get_sem_65536_66,dpl
      00064A 85 83*05         [24] 1754 	mov	(_sch_semaphore_get_sem_65536_66 + 1),dph
      00064D 85 F0*06         [24] 1755 	mov	(_sch_semaphore_get_sem_65536_66 + 2),b
                                   1756 ;	sch8051.c:292: EA = 0; 
                                   1757 ;	assignBit
      000650 C2 AF            [12] 1758 	clr	_EA
                                   1759 ;	sch8051.c:293: while(1){
      000652 74 01            [12] 1760 	mov	a,#0x01
      000654 25*04            [12] 1761 	add	a,_sch_semaphore_get_sem_65536_66
      000656 FA               [12] 1762 	mov	r2,a
      000657 E4               [12] 1763 	clr	a
      000658 35*05            [12] 1764 	addc	a,(_sch_semaphore_get_sem_65536_66 + 1)
      00065A FB               [12] 1765 	mov	r3,a
      00065B AC*06            [24] 1766 	mov	r4,(_sch_semaphore_get_sem_65536_66 + 2)
      00065D                       1767 00105$:
                                   1768 ;	sch8051.c:294: if(sem->lock > 0){
      00065D 85*04 82         [24] 1769 	mov	dpl,_sch_semaphore_get_sem_65536_66
      000660 85*05 83         [24] 1770 	mov	dph,(_sch_semaphore_get_sem_65536_66 + 1)
      000663 85*06 F0         [24] 1771 	mov	b,(_sch_semaphore_get_sem_65536_66 + 2)
      000666 12r00r00         [24] 1772 	lcall	__gptrget
      000669 F9               [12] 1773 	mov	r1,a
      00066A 60 11            [24] 1774 	jz	00102$
                                   1775 ;	sch8051.c:295: sem->lock--; 
      00066C 19               [12] 1776 	dec	r1
      00066D 85*04 82         [24] 1777 	mov	dpl,_sch_semaphore_get_sem_65536_66
      000670 85*05 83         [24] 1778 	mov	dph,(_sch_semaphore_get_sem_65536_66 + 1)
      000673 85*06 F0         [24] 1779 	mov	b,(_sch_semaphore_get_sem_65536_66 + 2)
      000676 E9               [12] 1780 	mov	a,r1
      000677 12r00r00         [24] 1781 	lcall	__gptrput
                                   1782 ;	sch8051.c:296: EA = 1; 
                                   1783 ;	assignBit
      00067A D2 AF            [12] 1784 	setb	_EA
                                   1785 ;	sch8051.c:297: break; 
      00067C 22               [24] 1786 	ret
      00067D                       1787 00102$:
                                   1788 ;	sch8051.c:299: sch_tasks[sch_index].state = BLOCKED; 
      00067D 90 02 10         [24] 1789 	mov	dptr,#_sch_index
      000680 E0               [24] 1790 	movx	a,@dptr
      000681 75 F0 34         [24] 1791 	mov	b,#0x34
      000684 A4               [48] 1792 	mul	ab
      000685 24 00            [12] 1793 	add	a,#_sch_tasks
      000687 F8               [12] 1794 	mov	r0,a
      000688 74 00            [12] 1795 	mov	a,#(_sch_tasks >> 8)
      00068A 35 F0            [12] 1796 	addc	a,b
      00068C F9               [12] 1797 	mov	r1,a
      00068D 74 33            [12] 1798 	mov	a,#0x33
      00068F 28               [12] 1799 	add	a,r0
      000690 F5 82            [12] 1800 	mov	dpl,a
      000692 E4               [12] 1801 	clr	a
      000693 39               [12] 1802 	addc	a,r1
      000694 F5 83            [12] 1803 	mov	dph,a
      000696 74 02            [12] 1804 	mov	a,#0x02
      000698 F0               [24] 1805 	movx	@dptr,a
                                   1806 ;	sch8051.c:300: sem->waiting_list[sch_index] = 1; 
      000699 90 02 10         [24] 1807 	mov	dptr,#_sch_index
      00069C E0               [24] 1808 	movx	a,@dptr
      00069D 2A               [12] 1809 	add	a,r2
      00069E F8               [12] 1810 	mov	r0,a
      00069F E4               [12] 1811 	clr	a
      0006A0 3B               [12] 1812 	addc	a,r3
      0006A1 F9               [12] 1813 	mov	r1,a
      0006A2 8C 07            [24] 1814 	mov	ar7,r4
      0006A4 88 82            [24] 1815 	mov	dpl,r0
      0006A6 89 83            [24] 1816 	mov	dph,r1
      0006A8 8F F0            [24] 1817 	mov	b,r7
      0006AA 74 01            [12] 1818 	mov	a,#0x01
      0006AC 12r00r00         [24] 1819 	lcall	__gptrput
                                   1820 ;	sch8051.c:301: sch_next();  
      0006AF C0 04            [24] 1821 	push	ar4
      0006B1 C0 03            [24] 1822 	push	ar3
      0006B3 C0 02            [24] 1823 	push	ar2
      0006B5 12r03r85         [24] 1824 	lcall	_sch_next
      0006B8 D0 02            [24] 1825 	pop	ar2
      0006BA D0 03            [24] 1826 	pop	ar3
      0006BC D0 04            [24] 1827 	pop	ar4
                                   1828 ;	sch8051.c:302: EA = 0; 
                                   1829 ;	assignBit
      0006BE C2 AF            [12] 1830 	clr	_EA
                                   1831 ;	sch8051.c:305: }
      0006C0 80 9B            [24] 1832 	sjmp	00105$
                                   1833 ;------------------------------------------------------------
                                   1834 ;Allocation info for local variables in function 'sch_semaphore_put'
                                   1835 ;------------------------------------------------------------
                                   1836 ;sem                       Allocated to registers r5 r6 r7 
                                   1837 ;i                         Allocated to registers r1 
                                   1838 ;------------------------------------------------------------
                                   1839 ;	sch8051.c:307: Byte sch_semaphore_put(struct sch_semaphore_sync *sem) __critical __reentrant{
                                   1840 ;	-----------------------------------------
                                   1841 ;	 function sch_semaphore_put
                                   1842 ;	-----------------------------------------
      0006C2                       1843 _sch_semaphore_put:
      0006C2 D3               [12] 1844 	setb	c
      0006C3 10 AF 01         [24] 1845 	jbc	ea,00129$
      0006C6 C3               [12] 1846 	clr	c
      0006C7                       1847 00129$:
      0006C7 C0 D0            [24] 1848 	push	psw
                                   1849 ;	sch8051.c:309: if(sem->lock < sem->share){
      0006C9 AD 82            [24] 1850 	mov	r5,dpl
      0006CB AE 83            [24] 1851 	mov	r6,dph
      0006CD AF F0            [24] 1852 	mov	r7,b
      0006CF 12r00r00         [24] 1853 	lcall	__gptrget
      0006D2 FC               [12] 1854 	mov	r4,a
      0006D3 74 0B            [12] 1855 	mov	a,#0x0b
      0006D5 2D               [12] 1856 	add	a,r5
      0006D6 F9               [12] 1857 	mov	r1,a
      0006D7 E4               [12] 1858 	clr	a
      0006D8 3E               [12] 1859 	addc	a,r6
      0006D9 FA               [12] 1860 	mov	r2,a
      0006DA 8F 03            [24] 1861 	mov	ar3,r7
      0006DC 89 82            [24] 1862 	mov	dpl,r1
      0006DE 8A 83            [24] 1863 	mov	dph,r2
      0006E0 8B F0            [24] 1864 	mov	b,r3
      0006E2 12r00r00         [24] 1865 	lcall	__gptrget
      0006E5 F9               [12] 1866 	mov	r1,a
      0006E6 C3               [12] 1867 	clr	c
      0006E7 EC               [12] 1868 	mov	a,r4
      0006E8 99               [12] 1869 	subb	a,r1
      0006E9 40 03            [24] 1870 	jc	00130$
      0006EB 02r07r7A         [24] 1871 	ljmp	00105$
      0006EE                       1872 00130$:
                                   1873 ;	sch8051.c:310: sem->lock++;
      0006EE 0C               [12] 1874 	inc	r4
      0006EF 8D 82            [24] 1875 	mov	dpl,r5
      0006F1 8E 83            [24] 1876 	mov	dph,r6
      0006F3 8F F0            [24] 1877 	mov	b,r7
      0006F5 EC               [12] 1878 	mov	a,r4
      0006F6 12r00r00         [24] 1879 	lcall	__gptrput
                                   1880 ;	sch8051.c:311: for(i = 0; i < sch_num_tasks; i++){
      0006F9 0D               [12] 1881 	inc	r5
      0006FA BD 00 01         [24] 1882 	cjne	r5,#0x00,00131$
      0006FD 0E               [12] 1883 	inc	r6
      0006FE                       1884 00131$:
      0006FE 8D 02            [24] 1885 	mov	ar2,r5
      000700 8E 03            [24] 1886 	mov	ar3,r6
      000702 8F 04            [24] 1887 	mov	ar4,r7
      000704 79 00            [12] 1888 	mov	r1,#0x00
      000706                       1889 00108$:
      000706 90 02 11         [24] 1890 	mov	dptr,#_sch_num_tasks
      000709 E0               [24] 1891 	movx	a,@dptr
      00070A F8               [12] 1892 	mov	r0,a
      00070B C3               [12] 1893 	clr	c
      00070C E9               [12] 1894 	mov	a,r1
      00070D 98               [12] 1895 	subb	a,r0
      00070E 50 65            [24] 1896 	jnc	00103$
                                   1897 ;	sch8051.c:312: if(sem->waiting_list[i] == 1){
      000710 C0 05            [24] 1898 	push	ar5
      000712 C0 06            [24] 1899 	push	ar6
      000714 C0 07            [24] 1900 	push	ar7
      000716 E9               [12] 1901 	mov	a,r1
      000717 2A               [12] 1902 	add	a,r2
      000718 F8               [12] 1903 	mov	r0,a
      000719 E4               [12] 1904 	clr	a
      00071A 3B               [12] 1905 	addc	a,r3
      00071B FE               [12] 1906 	mov	r6,a
      00071C 8C 07            [24] 1907 	mov	ar7,r4
      00071E 88 82            [24] 1908 	mov	dpl,r0
      000720 8E 83            [24] 1909 	mov	dph,r6
      000722 8F F0            [24] 1910 	mov	b,r7
      000724 12r00r00         [24] 1911 	lcall	__gptrget
      000727 F8               [12] 1912 	mov	r0,a
      000728 B8 01 02         [24] 1913 	cjne	r0,#0x01,00133$
      00072B 80 08            [24] 1914 	sjmp	00134$
      00072D                       1915 00133$:
      00072D D0 07            [24] 1916 	pop	ar7
      00072F D0 06            [24] 1917 	pop	ar6
      000731 D0 05            [24] 1918 	pop	ar5
      000733 80 3D            [24] 1919 	sjmp	00109$
      000735                       1920 00134$:
      000735 D0 07            [24] 1921 	pop	ar7
      000737 D0 06            [24] 1922 	pop	ar6
      000739 D0 05            [24] 1923 	pop	ar5
                                   1924 ;	sch8051.c:313: sem->waiting_list[i] = 0; 
      00073B C0 02            [24] 1925 	push	ar2
      00073D C0 03            [24] 1926 	push	ar3
      00073F C0 04            [24] 1927 	push	ar4
      000741 E9               [12] 1928 	mov	a,r1
      000742 2D               [12] 1929 	add	a,r5
      000743 F8               [12] 1930 	mov	r0,a
      000744 E4               [12] 1931 	clr	a
      000745 3E               [12] 1932 	addc	a,r6
      000746 FB               [12] 1933 	mov	r3,a
      000747 8F 04            [24] 1934 	mov	ar4,r7
      000749 88 82            [24] 1935 	mov	dpl,r0
      00074B 8B 83            [24] 1936 	mov	dph,r3
      00074D 8C F0            [24] 1937 	mov	b,r4
      00074F E4               [12] 1938 	clr	a
      000750 12r00r00         [24] 1939 	lcall	__gptrput
                                   1940 ;	sch8051.c:314: sch_tasks[i].state = WAIT; 	
      000753 E9               [12] 1941 	mov	a,r1
      000754 75 F0 34         [24] 1942 	mov	b,#0x34
      000757 A4               [48] 1943 	mul	ab
      000758 24 00            [12] 1944 	add	a,#_sch_tasks
      00075A FB               [12] 1945 	mov	r3,a
      00075B 74 00            [12] 1946 	mov	a,#(_sch_tasks >> 8)
      00075D 35 F0            [12] 1947 	addc	a,b
      00075F FC               [12] 1948 	mov	r4,a
      000760 74 33            [12] 1949 	mov	a,#0x33
      000762 2B               [12] 1950 	add	a,r3
      000763 F5 82            [12] 1951 	mov	dpl,a
      000765 E4               [12] 1952 	clr	a
      000766 3C               [12] 1953 	addc	a,r4
      000767 F5 83            [12] 1954 	mov	dph,a
      000769 74 01            [12] 1955 	mov	a,#0x01
      00076B F0               [24] 1956 	movx	@dptr,a
                                   1957 ;	sch8051.c:319: return 0; 
      00076C D0 04            [24] 1958 	pop	ar4
      00076E D0 03            [24] 1959 	pop	ar3
      000770 D0 02            [24] 1960 	pop	ar2
                                   1961 ;	sch8051.c:314: sch_tasks[i].state = WAIT; 	
      000772                       1962 00109$:
                                   1963 ;	sch8051.c:311: for(i = 0; i < sch_num_tasks; i++){
      000772 09               [12] 1964 	inc	r1
      000773 80 91            [24] 1965 	sjmp	00108$
      000775                       1966 00103$:
                                   1967 ;	sch8051.c:317: return 1; 
      000775 75 82 01         [24] 1968 	mov	dpl,#0x01
      000778 80 03            [24] 1969 	sjmp	00110$
      00077A                       1970 00105$:
                                   1971 ;	sch8051.c:319: return 0; 
      00077A 75 82 00         [24] 1972 	mov	dpl,#0x00
      00077D                       1973 00110$:
                                   1974 ;	sch8051.c:321: }
      00077D D0 D0            [24] 1975 	pop	psw
      00077F 92 AF            [24] 1976 	mov	ea,c
      000781 22               [24] 1977 	ret
                                   1978 	.area CSEG    (CODE)
                                   1979 	.area CONST   (CODE)
                                   1980 	.area XINIT   (CODE)
                                   1981 	.area CABS    (ABS,CODE)
