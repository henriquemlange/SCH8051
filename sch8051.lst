                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module sch8051
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _SPR0
                                     12 	.globl _SPR1
                                     13 	.globl _CPHA
                                     14 	.globl _CPOL
                                     15 	.globl _SPIM
                                     16 	.globl _SPE
                                     17 	.globl _WCOL
                                     18 	.globl _ISPI
                                     19 	.globl _D0EN
                                     20 	.globl _D0
                                     21 	.globl _D1EN
                                     22 	.globl _D1
                                     23 	.globl _I2CI
                                     24 	.globl _I2CTX
                                     25 	.globl _I2CRS
                                     26 	.globl _I2CM
                                     27 	.globl _MDI
                                     28 	.globl _MCO
                                     29 	.globl _MDE
                                     30 	.globl _MDO
                                     31 	.globl _ERR1
                                     32 	.globl _ERR0
                                     33 	.globl _NOXREF
                                     34 	.globl _CAL
                                     35 	.globl _RDY1
                                     36 	.globl _RDY0
                                     37 	.globl _WDWR
                                     38 	.globl _WDE
                                     39 	.globl _WDS
                                     40 	.globl _WDIR
                                     41 	.globl _PRE0
                                     42 	.globl _PRE1
                                     43 	.globl _PRE2
                                     44 	.globl _PRE3
                                     45 	.globl _CAP2
                                     46 	.globl _CNT2
                                     47 	.globl _TR2
                                     48 	.globl _EXEN2
                                     49 	.globl _TCLK
                                     50 	.globl _RCLK
                                     51 	.globl _EXF2
                                     52 	.globl _TF2
                                     53 	.globl _T2
                                     54 	.globl _T2EX
                                     55 	.globl _RI
                                     56 	.globl _TI
                                     57 	.globl _RB8
                                     58 	.globl _TB8
                                     59 	.globl _REN
                                     60 	.globl _SM2
                                     61 	.globl _SM1
                                     62 	.globl _SM0
                                     63 	.globl _RXD
                                     64 	.globl _TXD
                                     65 	.globl _INT0
                                     66 	.globl _INT1
                                     67 	.globl _T0
                                     68 	.globl _T1
                                     69 	.globl _WR
                                     70 	.globl _RD
                                     71 	.globl _PX0
                                     72 	.globl _PT0
                                     73 	.globl _PX1
                                     74 	.globl _PT1
                                     75 	.globl _PS
                                     76 	.globl _PT2
                                     77 	.globl _PADC
                                     78 	.globl _EX0
                                     79 	.globl _ET0
                                     80 	.globl _EX1
                                     81 	.globl _ET1
                                     82 	.globl _ES
                                     83 	.globl _ET2
                                     84 	.globl _EADC
                                     85 	.globl _EA
                                     86 	.globl _IT0
                                     87 	.globl _IE0
                                     88 	.globl _IT1
                                     89 	.globl _IE1
                                     90 	.globl _TR0
                                     91 	.globl _TF0
                                     92 	.globl _TR1
                                     93 	.globl _TF1
                                     94 	.globl _P
                                     95 	.globl _F1
                                     96 	.globl _OV
                                     97 	.globl _RS0
                                     98 	.globl _RS1
                                     99 	.globl _F0
                                    100 	.globl _AC
                                    101 	.globl _CY
                                    102 	.globl _CFG847
                                    103 	.globl _EWAIT
                                    104 	.globl _SPICON
                                    105 	.globl _SPIDAT
                                    106 	.globl _I2CADD1
                                    107 	.globl _B
                                    108 	.globl _GN0H
                                    109 	.globl _GN0M
                                    110 	.globl _GN0L
                                    111 	.globl _DCON
                                    112 	.globl _I2CCON
                                    113 	.globl _ADC0CON2
                                    114 	.globl _OF0H
                                    115 	.globl _OF0M
                                    116 	.globl _OF0L
                                    117 	.globl _ACC
                                    118 	.globl _PSMCON
                                    119 	.globl _ADC0H
                                    120 	.globl _ADC0M
                                    121 	.globl _ADC0L
                                    122 	.globl _ADCSTAT
                                    123 	.globl _PLLCON
                                    124 	.globl _ICON
                                    125 	.globl _SF
                                    126 	.globl _ADC0CON1
                                    127 	.globl _ADCMODE
                                    128 	.globl _PSW
                                    129 	.globl _TH2
                                    130 	.globl _TL2
                                    131 	.globl _RCAP2H
                                    132 	.globl _RCAP2L
                                    133 	.globl _T2CON
                                    134 	.globl _EADRH
                                    135 	.globl _EADRL
                                    136 	.globl _CHIPID
                                    137 	.globl _WDCON
                                    138 	.globl _EDATA4
                                    139 	.globl _EDATA3
                                    140 	.globl _EDATA2
                                    141 	.globl _EDATA1
                                    142 	.globl _ECON
                                    143 	.globl _IP
                                    144 	.globl _SPH
                                    145 	.globl _PWM1H
                                    146 	.globl _PWM1L
                                    147 	.globl _PWMOH
                                    148 	.globl _PWM0L
                                    149 	.globl _P3
                                    150 	.globl _CFG848
                                    151 	.globl _PWMCON
                                    152 	.globl _IEIP2
                                    153 	.globl _IE
                                    154 	.globl _DPCON
                                    155 	.globl _INTVAL
                                    156 	.globl _HOUR
                                    157 	.globl _MIN
                                    158 	.globl _SEC
                                    159 	.globl _HTSEC
                                    160 	.globl _TIMECON
                                    161 	.globl _P2
                                    162 	.globl _T3CON
                                    163 	.globl _T3FD
                                    164 	.globl _I2CADD
                                    165 	.globl _I2CDAT
                                    166 	.globl _SBUF
                                    167 	.globl _SCON
                                    168 	.globl _P1
                                    169 	.globl _TH1
                                    170 	.globl _TH0
                                    171 	.globl _TL1
                                    172 	.globl _TL0
                                    173 	.globl _TMOD
                                    174 	.globl _TCON
                                    175 	.globl _PCON
                                    176 	.globl _DPP
                                    177 	.globl _DPH
                                    178 	.globl _DPL
                                    179 	.globl _SP
                                    180 	.globl _P0
                                    181 	.globl _sch_num_tasks
                                    182 	.globl _sch_index
                                    183 	.globl _sch_time
                                    184 	.globl _sch_tasks
                                    185 	.globl _sch_semaphore_start_PARM_2
                                    186 	.globl _sch_mutex_start_PARM_2
                                    187 	.globl _sch_schedule
                                    188 	.globl _sch_dispatch
                                    189 	.globl _sch_init
                                    190 	.globl _sch_add_task
                                    191 	.globl _sch_remove_task
                                    192 	.globl _sch_start
                                    193 	.globl _sch_next
                                    194 	.globl _sch_mutex_start
                                    195 	.globl _sch_mutex_lock
                                    196 	.globl _sch_mutex_trylock
                                    197 	.globl _sch_mutex_release
                                    198 	.globl _sch_semaphore_start
                                    199 	.globl _sch_semaphore_tryget
                                    200 	.globl _sch_semaphore_get
                                    201 	.globl _sch_semaphore_put
                                    202 ;--------------------------------------------------------
                                    203 ; special function registers
                                    204 ;--------------------------------------------------------
                                    205 	.area RSEG    (ABS,DATA)
      000000                        206 	.org 0x0000
                           000080   207 _P0	=	0x0080
                           000081   208 _SP	=	0x0081
                           000082   209 _DPL	=	0x0082
                           000083   210 _DPH	=	0x0083
                           000084   211 _DPP	=	0x0084
                           000087   212 _PCON	=	0x0087
                           000088   213 _TCON	=	0x0088
                           000089   214 _TMOD	=	0x0089
                           00008A   215 _TL0	=	0x008a
                           00008B   216 _TL1	=	0x008b
                           00008C   217 _TH0	=	0x008c
                           00008D   218 _TH1	=	0x008d
                           000090   219 _P1	=	0x0090
                           000098   220 _SCON	=	0x0098
                           000099   221 _SBUF	=	0x0099
                           00009A   222 _I2CDAT	=	0x009a
                           00009B   223 _I2CADD	=	0x009b
                           00009D   224 _T3FD	=	0x009d
                           00009E   225 _T3CON	=	0x009e
                           0000A0   226 _P2	=	0x00a0
                           0000A1   227 _TIMECON	=	0x00a1
                           0000A2   228 _HTSEC	=	0x00a2
                           0000A3   229 _SEC	=	0x00a3
                           0000A4   230 _MIN	=	0x00a4
                           0000A5   231 _HOUR	=	0x00a5
                           0000A6   232 _INTVAL	=	0x00a6
                           0000A7   233 _DPCON	=	0x00a7
                           0000A8   234 _IE	=	0x00a8
                           0000A9   235 _IEIP2	=	0x00a9
                           0000AE   236 _PWMCON	=	0x00ae
                           0000AF   237 _CFG848	=	0x00af
                           0000B0   238 _P3	=	0x00b0
                           0000B1   239 _PWM0L	=	0x00b1
                           0000B2   240 _PWMOH	=	0x00b2
                           0000B3   241 _PWM1L	=	0x00b3
                           0000B4   242 _PWM1H	=	0x00b4
                           0000B7   243 _SPH	=	0x00b7
                           0000B8   244 _IP	=	0x00b8
                           0000B9   245 _ECON	=	0x00b9
                           0000BC   246 _EDATA1	=	0x00bc
                           0000BD   247 _EDATA2	=	0x00bd
                           0000BE   248 _EDATA3	=	0x00be
                           0000BF   249 _EDATA4	=	0x00bf
                           0000C0   250 _WDCON	=	0x00c0
                           0000C2   251 _CHIPID	=	0x00c2
                           0000C6   252 _EADRL	=	0x00c6
                           0000C7   253 _EADRH	=	0x00c7
                           0000C8   254 _T2CON	=	0x00c8
                           0000CA   255 _RCAP2L	=	0x00ca
                           0000CB   256 _RCAP2H	=	0x00cb
                           0000CC   257 _TL2	=	0x00cc
                           0000CD   258 _TH2	=	0x00cd
                           0000D0   259 _PSW	=	0x00d0
                           0000D1   260 _ADCMODE	=	0x00d1
                           0000D2   261 _ADC0CON1	=	0x00d2
                           0000D4   262 _SF	=	0x00d4
                           0000D5   263 _ICON	=	0x00d5
                           0000D7   264 _PLLCON	=	0x00d7
                           0000D8   265 _ADCSTAT	=	0x00d8
                           0000D9   266 _ADC0L	=	0x00d9
                           0000DA   267 _ADC0M	=	0x00da
                           0000DB   268 _ADC0H	=	0x00db
                           0000DF   269 _PSMCON	=	0x00df
                           0000E0   270 _ACC	=	0x00e0
                           0000E1   271 _OF0L	=	0x00e1
                           0000E2   272 _OF0M	=	0x00e2
                           0000E3   273 _OF0H	=	0x00e3
                           0000E6   274 _ADC0CON2	=	0x00e6
                           0000E8   275 _I2CCON	=	0x00e8
                           0000E8   276 _DCON	=	0x00e8
                           0000E9   277 _GN0L	=	0x00e9
                           0000EA   278 _GN0M	=	0x00ea
                           0000EB   279 _GN0H	=	0x00eb
                           0000F0   280 _B	=	0x00f0
                           0000F2   281 _I2CADD1	=	0x00f2
                           0000F7   282 _SPIDAT	=	0x00f7
                           0000F8   283 _SPICON	=	0x00f8
                           00009F   284 _EWAIT	=	0x009f
                           0000AF   285 _CFG847	=	0x00af
                                    286 ;--------------------------------------------------------
                                    287 ; special function bits
                                    288 ;--------------------------------------------------------
                                    289 	.area RSEG    (ABS,DATA)
      000000                        290 	.org 0x0000
                           0000D7   291 _CY	=	0x00d7
                           0000D6   292 _AC	=	0x00d6
                           0000D5   293 _F0	=	0x00d5
                           0000D4   294 _RS1	=	0x00d4
                           0000D3   295 _RS0	=	0x00d3
                           0000D2   296 _OV	=	0x00d2
                           0000D1   297 _F1	=	0x00d1
                           0000D0   298 _P	=	0x00d0
                           00008F   299 _TF1	=	0x008f
                           00008E   300 _TR1	=	0x008e
                           00008D   301 _TF0	=	0x008d
                           00008C   302 _TR0	=	0x008c
                           00008B   303 _IE1	=	0x008b
                           00008A   304 _IT1	=	0x008a
                           000089   305 _IE0	=	0x0089
                           000088   306 _IT0	=	0x0088
                           0000AF   307 _EA	=	0x00af
                           0000AE   308 _EADC	=	0x00ae
                           0000AD   309 _ET2	=	0x00ad
                           0000AC   310 _ES	=	0x00ac
                           0000AB   311 _ET1	=	0x00ab
                           0000AA   312 _EX1	=	0x00aa
                           0000A9   313 _ET0	=	0x00a9
                           0000A8   314 _EX0	=	0x00a8
                           0000BE   315 _PADC	=	0x00be
                           0000BD   316 _PT2	=	0x00bd
                           0000BC   317 _PS	=	0x00bc
                           0000BB   318 _PT1	=	0x00bb
                           0000BA   319 _PX1	=	0x00ba
                           0000B9   320 _PT0	=	0x00b9
                           0000B8   321 _PX0	=	0x00b8
                           0000B7   322 _RD	=	0x00b7
                           0000B6   323 _WR	=	0x00b6
                           0000B5   324 _T1	=	0x00b5
                           0000B4   325 _T0	=	0x00b4
                           0000B3   326 _INT1	=	0x00b3
                           0000B2   327 _INT0	=	0x00b2
                           0000B1   328 _TXD	=	0x00b1
                           0000B0   329 _RXD	=	0x00b0
                           00009F   330 _SM0	=	0x009f
                           00009E   331 _SM1	=	0x009e
                           00009D   332 _SM2	=	0x009d
                           00009C   333 _REN	=	0x009c
                           00009B   334 _TB8	=	0x009b
                           00009A   335 _RB8	=	0x009a
                           000099   336 _TI	=	0x0099
                           000098   337 _RI	=	0x0098
                           000091   338 _T2EX	=	0x0091
                           000090   339 _T2	=	0x0090
                           0000CF   340 _TF2	=	0x00cf
                           0000CE   341 _EXF2	=	0x00ce
                           0000CD   342 _RCLK	=	0x00cd
                           0000CC   343 _TCLK	=	0x00cc
                           0000CB   344 _EXEN2	=	0x00cb
                           0000CA   345 _TR2	=	0x00ca
                           0000C9   346 _CNT2	=	0x00c9
                           0000C8   347 _CAP2	=	0x00c8
                           0000C7   348 _PRE3	=	0x00c7
                           0000C6   349 _PRE2	=	0x00c6
                           0000C5   350 _PRE1	=	0x00c5
                           0000C4   351 _PRE0	=	0x00c4
                           0000C3   352 _WDIR	=	0x00c3
                           0000C2   353 _WDS	=	0x00c2
                           0000C1   354 _WDE	=	0x00c1
                           0000C0   355 _WDWR	=	0x00c0
                           0000DF   356 _RDY0	=	0x00df
                           0000DE   357 _RDY1	=	0x00de
                           0000DD   358 _CAL	=	0x00dd
                           0000DC   359 _NOXREF	=	0x00dc
                           0000DB   360 _ERR0	=	0x00db
                           0000DA   361 _ERR1	=	0x00da
                           0000EF   362 _MDO	=	0x00ef
                           0000EE   363 _MDE	=	0x00ee
                           0000ED   364 _MCO	=	0x00ed
                           0000EC   365 _MDI	=	0x00ec
                           0000EB   366 _I2CM	=	0x00eb
                           0000EA   367 _I2CRS	=	0x00ea
                           0000E9   368 _I2CTX	=	0x00e9
                           0000E8   369 _I2CI	=	0x00e8
                           0000EF   370 _D1	=	0x00ef
                           0000EE   371 _D1EN	=	0x00ee
                           0000ED   372 _D0	=	0x00ed
                           0000EB   373 _D0EN	=	0x00eb
                           0000FF   374 _ISPI	=	0x00ff
                           0000FE   375 _WCOL	=	0x00fe
                           0000FD   376 _SPE	=	0x00fd
                           0000FC   377 _SPIM	=	0x00fc
                           0000FB   378 _CPOL	=	0x00fb
                           0000FA   379 _CPHA	=	0x00fa
                           0000F9   380 _SPR1	=	0x00f9
                           0000F8   381 _SPR0	=	0x00f8
                                    382 ;--------------------------------------------------------
                                    383 ; overlayable register banks
                                    384 ;--------------------------------------------------------
                                    385 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        386 	.ds 8
                                    387 ;--------------------------------------------------------
                                    388 ; overlayable bit register bank
                                    389 ;--------------------------------------------------------
                                    390 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        391 bits:
      000000                        392 	.ds 1
                           008000   393 	b0 = bits[0]
                           008100   394 	b1 = bits[1]
                           008200   395 	b2 = bits[2]
                           008300   396 	b3 = bits[3]
                           008400   397 	b4 = bits[4]
                           008500   398 	b5 = bits[5]
                           008600   399 	b6 = bits[6]
                           008700   400 	b7 = bits[7]
                                    401 ;--------------------------------------------------------
                                    402 ; internal ram data
                                    403 ;--------------------------------------------------------
                                    404 	.area DSEG    (DATA)
      000000                        405 _sch_mutex_start_PARM_2:
      000000                        406 	.ds 1
      000001                        407 _sch_mutex_lock_mut_65536_44:
      000001                        408 	.ds 3
      000004                        409 _sch_mutex_release_i_65537_55:
      000004                        410 	.ds 1
      000005                        411 _sch_mutex_release_sloc0_1_0:
      000005                        412 	.ds 3
      000008                        413 _sch_semaphore_start_PARM_2:
      000008                        414 	.ds 1
      000009                        415 _sch_semaphore_get_sem_65536_70:
      000009                        416 	.ds 3
      00000C                        417 _sch_semaphore_put_i_65536_76:
      00000C                        418 	.ds 1
                                    419 ;--------------------------------------------------------
                                    420 ; overlayable items in internal ram 
                                    421 ;--------------------------------------------------------
                                    422 ;--------------------------------------------------------
                                    423 ; indirectly addressable internal ram data
                                    424 ;--------------------------------------------------------
                                    425 	.area ISEG    (DATA)
                                    426 ;--------------------------------------------------------
                                    427 ; absolute internal ram data
                                    428 ;--------------------------------------------------------
                                    429 	.area IABS    (ABS,DATA)
                                    430 	.area IABS    (ABS,DATA)
                                    431 ;--------------------------------------------------------
                                    432 ; bit data
                                    433 ;--------------------------------------------------------
                                    434 	.area BSEG    (BIT)
                                    435 ;--------------------------------------------------------
                                    436 ; paged external ram data
                                    437 ;--------------------------------------------------------
                                    438 	.area PSEG    (PAG,XDATA)
                                    439 ;--------------------------------------------------------
                                    440 ; external ram data
                                    441 ;--------------------------------------------------------
                                    442 	.area XSEG    (XDATA)
                           000000   443 _sch_tasks	=	0x0000
                           000208   444 _sch_time	=	0x0208
                           000210   445 _sch_index	=	0x0210
                           000211   446 _sch_num_tasks	=	0x0211
                                    447 ;--------------------------------------------------------
                                    448 ; absolute external ram data
                                    449 ;--------------------------------------------------------
                                    450 	.area XABS    (ABS,XDATA)
                                    451 ;--------------------------------------------------------
                                    452 ; external initialized ram data
                                    453 ;--------------------------------------------------------
                                    454 	.area XISEG   (XDATA)
                                    455 	.area HOME    (CODE)
                                    456 	.area GSINIT0 (CODE)
                                    457 	.area GSINIT1 (CODE)
                                    458 	.area GSINIT2 (CODE)
                                    459 	.area GSINIT3 (CODE)
                                    460 	.area GSINIT4 (CODE)
                                    461 	.area GSINIT5 (CODE)
                                    462 	.area GSINIT  (CODE)
                                    463 	.area GSFINAL (CODE)
                                    464 	.area CSEG    (CODE)
                                    465 ;--------------------------------------------------------
                                    466 ; global & static initialisations
                                    467 ;--------------------------------------------------------
                                    468 	.area HOME    (CODE)
                                    469 	.area GSINIT  (CODE)
                                    470 	.area GSFINAL (CODE)
                                    471 	.area GSINIT  (CODE)
                                    472 ;--------------------------------------------------------
                                    473 ; Home
                                    474 ;--------------------------------------------------------
                                    475 	.area HOME    (CODE)
                                    476 	.area HOME    (CODE)
                                    477 ;--------------------------------------------------------
                                    478 ; code
                                    479 ;--------------------------------------------------------
                                    480 	.area CSEG    (CODE)
                                    481 ;------------------------------------------------------------
                                    482 ;Allocation info for local variables in function 'sch_schedule'
                                    483 ;------------------------------------------------------------
                                    484 ;i                         Allocated to registers r6 
                                    485 ;------------------------------------------------------------
                                    486 ;	sch8051.c:29: void sch_schedule(){
                                    487 ;	-----------------------------------------
                                    488 ;	 function sch_schedule
                                    489 ;	-----------------------------------------
      000000                        490 _sch_schedule:
                           000007   491 	ar7 = 0x07
                           000006   492 	ar6 = 0x06
                           000005   493 	ar5 = 0x05
                           000004   494 	ar4 = 0x04
                           000003   495 	ar3 = 0x03
                           000002   496 	ar2 = 0x02
                           000001   497 	ar1 = 0x01
                           000000   498 	ar0 = 0x00
                                    499 ;	sch8051.c:32: if(sch_num_tasks == 0){
      000000 90 02 11         [24]  500 	mov	dptr,#_sch_num_tasks
      000003 E0               [24]  501 	movx	a,@dptr
      000004 70 07            [24]  502 	jnz	00107$
                                    503 ;	sch8051.c:33: PCON = 0x02; 
      000006 75 87 02         [24]  504 	mov	_PCON,#0x02
                                    505 ;	sch8051.c:34: PCON = 0x32; 
      000009 75 87 32         [24]  506 	mov	_PCON,#0x32
      00000C 22               [24]  507 	ret
      00000D                        508 00107$:
                                    509 ;	sch8051.c:36: i = (sch_index + 1)%SCH_MAX_TASKS; 
      00000D 90 02 10         [24]  510 	mov	dptr,#_sch_index
      000010 E0               [24]  511 	movx	a,@dptr
      000011 FF               [12]  512 	mov	r7,a
      000012 7E 00            [12]  513 	mov	r6,#0x00
      000014 8F 82            [24]  514 	mov	dpl,r7
      000016 8E 83            [24]  515 	mov	dph,r6
      000018 A3               [24]  516 	inc	dptr
      000019 75*00 0A         [24]  517 	mov	__modsint_PARM_2,#0x0a
                                    518 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      00001C 8E*01            [24]  519 	mov	(__modsint_PARM_2 + 1),r6
      00001E 12r00r00         [24]  520 	lcall	__modsint
      000021 AE 82            [24]  521 	mov	r6,dpl
      000023 AF 83            [24]  522 	mov	r7,dph
                                    523 ;	sch8051.c:38: while(i != sch_index){
      000025                        524 00103$:
      000025 90 02 10         [24]  525 	mov	dptr,#_sch_index
      000028 E0               [24]  526 	movx	a,@dptr
      000029 FF               [12]  527 	mov	r7,a
      00002A EE               [12]  528 	mov	a,r6
      00002B B5 07 02         [24]  529 	cjne	a,ar7,00128$
      00002E 80 36            [24]  530 	sjmp	00105$
      000030                        531 00128$:
                                    532 ;	sch8051.c:39: if(sch_tasks[i].state == WAIT){
      000030 EE               [12]  533 	mov	a,r6
      000031 75 F0 34         [24]  534 	mov	b,#0x34
      000034 A4               [48]  535 	mul	ab
      000035 24 00            [12]  536 	add	a,#_sch_tasks
      000037 FD               [12]  537 	mov	r5,a
      000038 74 00            [12]  538 	mov	a,#(_sch_tasks >> 8)
      00003A 35 F0            [12]  539 	addc	a,b
      00003C FF               [12]  540 	mov	r7,a
      00003D 74 33            [12]  541 	mov	a,#0x33
      00003F 2D               [12]  542 	add	a,r5
      000040 F5 82            [12]  543 	mov	dpl,a
      000042 E4               [12]  544 	clr	a
      000043 3F               [12]  545 	addc	a,r7
      000044 F5 83            [12]  546 	mov	dph,a
      000046 E0               [24]  547 	movx	a,@dptr
      000047 FF               [12]  548 	mov	r7,a
      000048 BF 01 02         [24]  549 	cjne	r7,#0x01,00129$
      00004B 80 19            [24]  550 	sjmp	00105$
      00004D                        551 00129$:
                                    552 ;	sch8051.c:42: i = (i + 1)%SCH_MAX_TASKS; 
      00004D 8E 05            [24]  553 	mov	ar5,r6
      00004F 7F 00            [12]  554 	mov	r7,#0x00
      000051 8D 82            [24]  555 	mov	dpl,r5
      000053 8F 83            [24]  556 	mov	dph,r7
      000055 A3               [24]  557 	inc	dptr
      000056 75*00 0A         [24]  558 	mov	__modsint_PARM_2,#0x0a
                                    559 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000059 8F*01            [24]  560 	mov	(__modsint_PARM_2 + 1),r7
      00005B 12r00r00         [24]  561 	lcall	__modsint
      00005E AD 82            [24]  562 	mov	r5,dpl
      000060 AF 83            [24]  563 	mov	r7,dph
      000062 8D 06            [24]  564 	mov	ar6,r5
      000064 80 BF            [24]  565 	sjmp	00103$
      000066                        566 00105$:
                                    567 ;	sch8051.c:45: sch_tasks[sch_index].state = WAIT; 
      000066 90 02 10         [24]  568 	mov	dptr,#_sch_index
      000069 E0               [24]  569 	movx	a,@dptr
      00006A 75 F0 34         [24]  570 	mov	b,#0x34
      00006D A4               [48]  571 	mul	ab
      00006E 24 00            [12]  572 	add	a,#_sch_tasks
      000070 FD               [12]  573 	mov	r5,a
      000071 74 00            [12]  574 	mov	a,#(_sch_tasks >> 8)
      000073 35 F0            [12]  575 	addc	a,b
      000075 FF               [12]  576 	mov	r7,a
      000076 74 33            [12]  577 	mov	a,#0x33
      000078 2D               [12]  578 	add	a,r5
      000079 F5 82            [12]  579 	mov	dpl,a
      00007B E4               [12]  580 	clr	a
      00007C 3F               [12]  581 	addc	a,r7
      00007D F5 83            [12]  582 	mov	dph,a
      00007F 74 01            [12]  583 	mov	a,#0x01
      000081 F0               [24]  584 	movx	@dptr,a
                                    585 ;	sch8051.c:46: sch_tasks[i].state = READY; 
      000082 EE               [12]  586 	mov	a,r6
      000083 75 F0 34         [24]  587 	mov	b,#0x34
      000086 A4               [48]  588 	mul	ab
      000087 24 00            [12]  589 	add	a,#_sch_tasks
      000089 FD               [12]  590 	mov	r5,a
      00008A 74 00            [12]  591 	mov	a,#(_sch_tasks >> 8)
      00008C 35 F0            [12]  592 	addc	a,b
      00008E FF               [12]  593 	mov	r7,a
      00008F 74 33            [12]  594 	mov	a,#0x33
      000091 2D               [12]  595 	add	a,r5
      000092 F5 82            [12]  596 	mov	dpl,a
      000094 E4               [12]  597 	clr	a
      000095 3F               [12]  598 	addc	a,r7
      000096 F5 83            [12]  599 	mov	dph,a
      000098 E4               [12]  600 	clr	a
      000099 F0               [24]  601 	movx	@dptr,a
                                    602 ;	sch8051.c:47: sch_index = i; 
      00009A 90 02 10         [24]  603 	mov	dptr,#_sch_index
      00009D EE               [12]  604 	mov	a,r6
      00009E F0               [24]  605 	movx	@dptr,a
                                    606 ;	sch8051.c:49: }
      00009F 22               [24]  607 	ret
                                    608 ;------------------------------------------------------------
                                    609 ;Allocation info for local variables in function 'sch_dispatch'
                                    610 ;------------------------------------------------------------
                                    611 ;ram                       Allocated to registers r1 
                                    612 ;xram                      Allocated to registers 
                                    613 ;ram                       Allocated to registers r1 
                                    614 ;xram                      Allocated to registers r6 r7 
                                    615 ;------------------------------------------------------------
                                    616 ;	sch8051.c:63: void sch_dispatch() __interrupt(5){
                                    617 ;	-----------------------------------------
                                    618 ;	 function sch_dispatch
                                    619 ;	-----------------------------------------
      0000A0                        620 _sch_dispatch:
      0000A0 C0*00            [24]  621 	push	bits
      0000A2 C0 E0            [24]  622 	push	acc
      0000A4 C0 F0            [24]  623 	push	b
      0000A6 C0 82            [24]  624 	push	dpl
      0000A8 C0 83            [24]  625 	push	dph
      0000AA C0 07            [24]  626 	push	(0+7)
      0000AC C0 06            [24]  627 	push	(0+6)
      0000AE C0 05            [24]  628 	push	(0+5)
      0000B0 C0 04            [24]  629 	push	(0+4)
      0000B2 C0 03            [24]  630 	push	(0+3)
      0000B4 C0 02            [24]  631 	push	(0+2)
      0000B6 C0 01            [24]  632 	push	(0+1)
      0000B8 C0 00            [24]  633 	push	(0+0)
      0000BA C0 D0            [24]  634 	push	psw
      0000BC 75 D0 00         [24]  635 	mov	psw,#0x00
                                    636 ;	sch8051.c:64: EA = 0; 
                                    637 ;	assignBit
      0000BF C2 AF            [12]  638 	clr	_EA
                                    639 ;	sch8051.c:65: TF2 = 0; 
                                    640 ;	assignBit
      0000C1 C2 CF            [12]  641 	clr	_TF2
                                    642 ;	sch8051.c:66: sch_time--;
      0000C3 90 02 08         [24]  643 	mov	dptr,#_sch_time
      0000C6 E0               [24]  644 	movx	a,@dptr
      0000C7 FE               [12]  645 	mov	r6,a
      0000C8 A3               [24]  646 	inc	dptr
      0000C9 E0               [24]  647 	movx	a,@dptr
      0000CA FF               [12]  648 	mov	r7,a
      0000CB 1E               [12]  649 	dec	r6
      0000CC BE FF 01         [24]  650 	cjne	r6,#0xff,00133$
      0000CF 1F               [12]  651 	dec	r7
      0000D0                        652 00133$:
      0000D0 90 02 08         [24]  653 	mov	dptr,#_sch_time
      0000D3 EE               [12]  654 	mov	a,r6
      0000D4 F0               [24]  655 	movx	@dptr,a
      0000D5 EF               [12]  656 	mov	a,r7
      0000D6 A3               [24]  657 	inc	dptr
      0000D7 F0               [24]  658 	movx	@dptr,a
                                    659 ;	sch8051.c:67: if(sch_time == 0){
      0000D8 90 02 08         [24]  660 	mov	dptr,#_sch_time
      0000DB E0               [24]  661 	movx	a,@dptr
      0000DC FE               [12]  662 	mov	r6,a
      0000DD A3               [24]  663 	inc	dptr
      0000DE E0               [24]  664 	movx	a,@dptr
      0000DF FF               [12]  665 	mov	r7,a
      0000E0 4E               [12]  666 	orl	a,r6
      0000E1 60 03            [24]  667 	jz	00134$
      0000E3 02r01r7E         [24]  668 	ljmp	00108$
      0000E6                        669 00134$:
                                    670 ;	sch8051.c:68: sch_time = SCH_TIMEOUT; 
      0000E6 90 02 08         [24]  671 	mov	dptr,#_sch_time
      0000E9 74 0F            [12]  672 	mov	a,#0x0f
      0000EB F0               [24]  673 	movx	@dptr,a
      0000EC E4               [12]  674 	clr	a
      0000ED A3               [24]  675 	inc	dptr
      0000EE F0               [24]  676 	movx	@dptr,a
                                    677 ;	sch8051.c:69: TO_XRAM 
      0000EF 90 02 10         [24]  678 	mov	dptr,#_sch_index
      0000F2 E0               [24]  679 	movx	a,@dptr
      0000F3 75 F0 34         [24]  680 	mov	b,#0x34
      0000F6 A4               [48]  681 	mul	ab
      0000F7 24 00            [12]  682 	add	a,#_sch_tasks
      0000F9 FE               [12]  683 	mov	r6,a
      0000FA 74 00            [12]  684 	mov	a,#(_sch_tasks >> 8)
      0000FC 35 F0            [12]  685 	addc	a,b
      0000FE FF               [12]  686 	mov	r7,a
      0000FF E0               [24]  687 	movx	a,@dptr
      000100 75 F0 34         [24]  688 	mov	b,#0x34
      000103 A4               [48]  689 	mul	ab
      000104 24 00            [12]  690 	add	a,#_sch_tasks
      000106 FC               [12]  691 	mov	r4,a
      000107 74 00            [12]  692 	mov	a,#(_sch_tasks >> 8)
      000109 35 F0            [12]  693 	addc	a,b
      00010B FD               [12]  694 	mov	r5,a
      00010C 74 32            [12]  695 	mov	a,#0x32
      00010E 2C               [12]  696 	add	a,r4
      00010F F5 82            [12]  697 	mov	dpl,a
      000111 E4               [12]  698 	clr	a
      000112 3D               [12]  699 	addc	a,r5
      000113 F5 83            [12]  700 	mov	dph,a
      000115 E5 81            [12]  701 	mov	a,_SP
      000117 24 DF            [12]  702 	add	a,#0xdf
      000119 FD               [12]  703 	mov	r5,a
      00011A F0               [24]  704 	movx	@dptr,a
      00011B 79 21            [12]  705 	mov	r1,#0x21
      00011D                        706 00101$:
      00011D 89 05            [24]  707 	mov	ar5,r1
      00011F C3               [12]  708 	clr	c
      000120 E5 81            [12]  709 	mov	a,_SP
      000122 9D               [12]  710 	subb	a,r5
      000123 40 10            [24]  711 	jc	00103$
      000125 87 05            [24]  712 	mov	ar5,@r1
      000127 09               [12]  713 	inc	r1
      000128 8E 82            [24]  714 	mov	dpl,r6
      00012A 8F 83            [24]  715 	mov	dph,r7
      00012C ED               [12]  716 	mov	a,r5
      00012D F0               [24]  717 	movx	@dptr,a
      00012E A3               [24]  718 	inc	dptr
      00012F AE 82            [24]  719 	mov	r6,dpl
      000131 AF 83            [24]  720 	mov	r7,dph
      000133 80 E8            [24]  721 	sjmp	00101$
      000135                        722 00103$:
                                    723 ;	sch8051.c:70: sch_schedule(); 
      000135 12r00r00         [24]  724 	lcall	_sch_schedule
                                    725 ;	sch8051.c:71: TO_STACK
      000138 90 02 10         [24]  726 	mov	dptr,#_sch_index
      00013B E0               [24]  727 	movx	a,@dptr
      00013C 75 F0 34         [24]  728 	mov	b,#0x34
      00013F A4               [48]  729 	mul	ab
      000140 24 00            [12]  730 	add	a,#_sch_tasks
      000142 FE               [12]  731 	mov	r6,a
      000143 74 00            [12]  732 	mov	a,#(_sch_tasks >> 8)
      000145 35 F0            [12]  733 	addc	a,b
      000147 FF               [12]  734 	mov	r7,a
      000148 E0               [24]  735 	movx	a,@dptr
      000149 75 F0 34         [24]  736 	mov	b,#0x34
      00014C A4               [48]  737 	mul	ab
      00014D 24 00            [12]  738 	add	a,#_sch_tasks
      00014F FC               [12]  739 	mov	r4,a
      000150 74 00            [12]  740 	mov	a,#(_sch_tasks >> 8)
      000152 35 F0            [12]  741 	addc	a,b
      000154 FD               [12]  742 	mov	r5,a
      000155 74 32            [12]  743 	mov	a,#0x32
      000157 2C               [12]  744 	add	a,r4
      000158 F5 82            [12]  745 	mov	dpl,a
      00015A E4               [12]  746 	clr	a
      00015B 3D               [12]  747 	addc	a,r5
      00015C F5 83            [12]  748 	mov	dph,a
      00015E E0               [24]  749 	movx	a,@dptr
      00015F FD               [12]  750 	mov	r5,a
      000160 24 21            [12]  751 	add	a,#0x21
      000162 F5 81            [12]  752 	mov	_SP,a
      000164 79 21            [12]  753 	mov	r1,#0x21
      000166                        754 00104$:
      000166 89 05            [24]  755 	mov	ar5,r1
      000168 C3               [12]  756 	clr	c
      000169 E5 81            [12]  757 	mov	a,_SP
      00016B 9D               [12]  758 	subb	a,r5
      00016C 40 10            [24]  759 	jc	00108$
      00016E 8E 82            [24]  760 	mov	dpl,r6
      000170 8F 83            [24]  761 	mov	dph,r7
      000172 E0               [24]  762 	movx	a,@dptr
      000173 FD               [12]  763 	mov	r5,a
      000174 A3               [24]  764 	inc	dptr
      000175 AE 82            [24]  765 	mov	r6,dpl
      000177 AF 83            [24]  766 	mov	r7,dph
      000179 A7 05            [24]  767 	mov	@r1,ar5
      00017B 09               [12]  768 	inc	r1
      00017C 80 E8            [24]  769 	sjmp	00104$
      00017E                        770 00108$:
                                    771 ;	sch8051.c:73: EA = 1;
                                    772 ;	assignBit
      00017E D2 AF            [12]  773 	setb	_EA
                                    774 ;	sch8051.c:74: }
      000180 D0 D0            [24]  775 	pop	psw
      000182 D0 00            [24]  776 	pop	(0+0)
      000184 D0 01            [24]  777 	pop	(0+1)
      000186 D0 02            [24]  778 	pop	(0+2)
      000188 D0 03            [24]  779 	pop	(0+3)
      00018A D0 04            [24]  780 	pop	(0+4)
      00018C D0 05            [24]  781 	pop	(0+5)
      00018E D0 06            [24]  782 	pop	(0+6)
      000190 D0 07            [24]  783 	pop	(0+7)
      000192 D0 83            [24]  784 	pop	dph
      000194 D0 82            [24]  785 	pop	dpl
      000196 D0 F0            [24]  786 	pop	b
      000198 D0 E0            [24]  787 	pop	acc
      00019A D0*00            [24]  788 	pop	bits
      00019C 32               [24]  789 	reti
                                    790 ;------------------------------------------------------------
                                    791 ;Allocation info for local variables in function 'sch_init'
                                    792 ;------------------------------------------------------------
                                    793 ;i                         Allocated to registers r7 
                                    794 ;------------------------------------------------------------
                                    795 ;	sch8051.c:84: void sch_init(){
                                    796 ;	-----------------------------------------
                                    797 ;	 function sch_init
                                    798 ;	-----------------------------------------
      00019D                        799 _sch_init:
                                    800 ;	sch8051.c:86: sch_index = 0;
      00019D 90 02 10         [24]  801 	mov	dptr,#_sch_index
      0001A0 E4               [12]  802 	clr	a
      0001A1 F0               [24]  803 	movx	@dptr,a
                                    804 ;	sch8051.c:87: sch_num_tasks = 0; 
      0001A2 90 02 11         [24]  805 	mov	dptr,#_sch_num_tasks
      0001A5 F0               [24]  806 	movx	@dptr,a
                                    807 ;	sch8051.c:88: sch_time = SCH_TIMEOUT;  
      0001A6 90 02 08         [24]  808 	mov	dptr,#_sch_time
      0001A9 74 0F            [12]  809 	mov	a,#0x0f
      0001AB F0               [24]  810 	movx	@dptr,a
      0001AC E4               [12]  811 	clr	a
      0001AD A3               [24]  812 	inc	dptr
      0001AE F0               [24]  813 	movx	@dptr,a
                                    814 ;	sch8051.c:89: for(i = 0; i < SCH_MAX_TASKS; i++){
      0001AF 7F 00            [12]  815 	mov	r7,#0x00
      0001B1                        816 00102$:
                                    817 ;	sch8051.c:90: sch_tasks[i].sp = 0; 
      0001B1 EF               [12]  818 	mov	a,r7
      0001B2 75 F0 34         [24]  819 	mov	b,#0x34
      0001B5 A4               [48]  820 	mul	ab
      0001B6 FD               [12]  821 	mov	r5,a
      0001B7 AE F0            [24]  822 	mov	r6,b
      0001B9 8D 03            [24]  823 	mov	ar3,r5
      0001BB 74 00            [12]  824 	mov	a,#(_sch_tasks >> 8)
      0001BD 2E               [12]  825 	add	a,r6
      0001BE FC               [12]  826 	mov	r4,a
      0001BF 74 32            [12]  827 	mov	a,#0x32
      0001C1 2B               [12]  828 	add	a,r3
      0001C2 F5 82            [12]  829 	mov	dpl,a
      0001C4 E4               [12]  830 	clr	a
      0001C5 3C               [12]  831 	addc	a,r4
      0001C6 F5 83            [12]  832 	mov	dph,a
      0001C8 E4               [12]  833 	clr	a
      0001C9 F0               [24]  834 	movx	@dptr,a
                                    835 ;	sch8051.c:91: sch_tasks[i].state = FREE; 
      0001CA 74 00            [12]  836 	mov	a,#(_sch_tasks >> 8)
      0001CC 2E               [12]  837 	add	a,r6
      0001CD FE               [12]  838 	mov	r6,a
      0001CE 74 33            [12]  839 	mov	a,#0x33
      0001D0 2D               [12]  840 	add	a,r5
      0001D1 F5 82            [12]  841 	mov	dpl,a
      0001D3 E4               [12]  842 	clr	a
      0001D4 3E               [12]  843 	addc	a,r6
      0001D5 F5 83            [12]  844 	mov	dph,a
      0001D7 74 03            [12]  845 	mov	a,#0x03
      0001D9 F0               [24]  846 	movx	@dptr,a
                                    847 ;	sch8051.c:89: for(i = 0; i < SCH_MAX_TASKS; i++){
      0001DA 0F               [12]  848 	inc	r7
      0001DB BF 0A 00         [24]  849 	cjne	r7,#0x0a,00111$
      0001DE                        850 00111$:
      0001DE 40 D1            [24]  851 	jc	00102$
                                    852 ;	sch8051.c:93: }
      0001E0 22               [24]  853 	ret
                                    854 ;------------------------------------------------------------
                                    855 ;Allocation info for local variables in function 'sch_add_task'
                                    856 ;------------------------------------------------------------
                                    857 ;f                         Allocated to registers r6 r7 
                                    858 ;i                         Allocated to registers r5 
                                    859 ;j                         Allocated to registers r7 
                                    860 ;------------------------------------------------------------
                                    861 ;	sch8051.c:96: void sch_add_task(fptr *f){
                                    862 ;	-----------------------------------------
                                    863 ;	 function sch_add_task
                                    864 ;	-----------------------------------------
      0001E1                        865 _sch_add_task:
      0001E1 AE 82            [24]  866 	mov	r6,dpl
      0001E3 AF 83            [24]  867 	mov	r7,dph
                                    868 ;	sch8051.c:98: for(i = 0; i < SCH_MAX_TASKS; i++){
      0001E5 7D 00            [12]  869 	mov	r5,#0x00
      0001E7                        870 00107$:
                                    871 ;	sch8051.c:99: if(sch_tasks[i].state == FREE){
      0001E7 ED               [12]  872 	mov	a,r5
      0001E8 75 F0 34         [24]  873 	mov	b,#0x34
      0001EB A4               [48]  874 	mul	ab
      0001EC 24 00            [12]  875 	add	a,#_sch_tasks
      0001EE FB               [12]  876 	mov	r3,a
      0001EF 74 00            [12]  877 	mov	a,#(_sch_tasks >> 8)
      0001F1 35 F0            [12]  878 	addc	a,b
      0001F3 FC               [12]  879 	mov	r4,a
      0001F4 74 33            [12]  880 	mov	a,#0x33
      0001F6 2B               [12]  881 	add	a,r3
      0001F7 F5 82            [12]  882 	mov	dpl,a
      0001F9 E4               [12]  883 	clr	a
      0001FA 3C               [12]  884 	addc	a,r4
      0001FB F5 83            [12]  885 	mov	dph,a
      0001FD E0               [24]  886 	movx	a,@dptr
      0001FE FC               [12]  887 	mov	r4,a
      0001FF BC 03 02         [24]  888 	cjne	r4,#0x03,00135$
      000202 80 06            [24]  889 	sjmp	00103$
      000204                        890 00135$:
                                    891 ;	sch8051.c:98: for(i = 0; i < SCH_MAX_TASKS; i++){
      000204 0D               [12]  892 	inc	r5
      000205 BD 0A 00         [24]  893 	cjne	r5,#0x0a,00136$
      000208                        894 00136$:
      000208 40 DD            [24]  895 	jc	00107$
      00020A                        896 00103$:
                                    897 ;	sch8051.c:104: if(sch_tasks[i].state != FREE){
      00020A ED               [12]  898 	mov	a,r5
      00020B 75 F0 34         [24]  899 	mov	b,#0x34
      00020E A4               [48]  900 	mul	ab
      00020F FC               [12]  901 	mov	r4,a
      000210 AD F0            [24]  902 	mov	r5,b
      000212 8C 02            [24]  903 	mov	ar2,r4
      000214 74 00            [12]  904 	mov	a,#(_sch_tasks >> 8)
      000216 2D               [12]  905 	add	a,r5
      000217 FB               [12]  906 	mov	r3,a
      000218 74 33            [12]  907 	mov	a,#0x33
      00021A 2A               [12]  908 	add	a,r2
      00021B F5 82            [12]  909 	mov	dpl,a
      00021D E4               [12]  910 	clr	a
      00021E 3B               [12]  911 	addc	a,r3
      00021F F5 83            [12]  912 	mov	dph,a
      000221 E0               [24]  913 	movx	a,@dptr
      000222 FB               [12]  914 	mov	r3,a
      000223 BB 03 02         [24]  915 	cjne	r3,#0x03,00138$
      000226 80 01            [24]  916 	sjmp	00105$
      000228                        917 00138$:
                                    918 ;	sch8051.c:105: return; 
      000228 22               [24]  919 	ret
      000229                        920 00105$:
                                    921 ;	sch8051.c:108: sch_tasks[i].stack_save[0] = ((unsigned short)f) & 0xff; 
      000229 8C 82            [24]  922 	mov	dpl,r4
      00022B 74 00            [12]  923 	mov	a,#(_sch_tasks >> 8)
      00022D 2D               [12]  924 	add	a,r5
      00022E F5 83            [12]  925 	mov	dph,a
      000230 8E 03            [24]  926 	mov	ar3,r6
      000232 EB               [12]  927 	mov	a,r3
      000233 F0               [24]  928 	movx	@dptr,a
                                    929 ;	sch8051.c:109: sch_tasks[i].stack_save[1] = ((unsigned short)f >> 8) & 0xff;
      000234 8C 02            [24]  930 	mov	ar2,r4
      000236 74 00            [12]  931 	mov	a,#(_sch_tasks >> 8)
      000238 2D               [12]  932 	add	a,r5
      000239 FB               [12]  933 	mov	r3,a
      00023A 8A 82            [24]  934 	mov	dpl,r2
      00023C 8B 83            [24]  935 	mov	dph,r3
      00023E A3               [24]  936 	inc	dptr
      00023F 8F 06            [24]  937 	mov	ar6,r7
      000241 EE               [12]  938 	mov	a,r6
      000242 F0               [24]  939 	movx	@dptr,a
                                    940 ;	sch8051.c:110: sch_tasks[i].stack_save[2] = 0; 	//BITS
      000243 8C 06            [24]  941 	mov	ar6,r4
      000245 74 00            [12]  942 	mov	a,#(_sch_tasks >> 8)
      000247 2D               [12]  943 	add	a,r5
      000248 FF               [12]  944 	mov	r7,a
      000249 8E 82            [24]  945 	mov	dpl,r6
      00024B 8F 83            [24]  946 	mov	dph,r7
      00024D A3               [24]  947 	inc	dptr
      00024E A3               [24]  948 	inc	dptr
      00024F E4               [12]  949 	clr	a
      000250 F0               [24]  950 	movx	@dptr,a
                                    951 ;	sch8051.c:111: sch_tasks[i].stack_save[3] = ACC; 
      000251 8C 06            [24]  952 	mov	ar6,r4
      000253 74 00            [12]  953 	mov	a,#(_sch_tasks >> 8)
      000255 2D               [12]  954 	add	a,r5
      000256 FF               [12]  955 	mov	r7,a
      000257 8E 82            [24]  956 	mov	dpl,r6
      000259 8F 83            [24]  957 	mov	dph,r7
      00025B A3               [24]  958 	inc	dptr
      00025C A3               [24]  959 	inc	dptr
      00025D A3               [24]  960 	inc	dptr
      00025E E5 E0            [12]  961 	mov	a,_ACC
      000260 F0               [24]  962 	movx	@dptr,a
                                    963 ;	sch8051.c:112: sch_tasks[i].stack_save[4] = B; 
      000261 8C 06            [24]  964 	mov	ar6,r4
      000263 74 00            [12]  965 	mov	a,#(_sch_tasks >> 8)
      000265 2D               [12]  966 	add	a,r5
      000266 FF               [12]  967 	mov	r7,a
      000267 8E 82            [24]  968 	mov	dpl,r6
      000269 8F 83            [24]  969 	mov	dph,r7
      00026B A3               [24]  970 	inc	dptr
      00026C A3               [24]  971 	inc	dptr
      00026D A3               [24]  972 	inc	dptr
      00026E A3               [24]  973 	inc	dptr
      00026F E5 F0            [12]  974 	mov	a,_B
      000271 F0               [24]  975 	movx	@dptr,a
                                    976 ;	sch8051.c:113: sch_tasks[i].stack_save[5] = DPL; 
      000272 8C 06            [24]  977 	mov	ar6,r4
      000274 74 00            [12]  978 	mov	a,#(_sch_tasks >> 8)
      000276 2D               [12]  979 	add	a,r5
      000277 FF               [12]  980 	mov	r7,a
      000278 8E 82            [24]  981 	mov	dpl,r6
      00027A 8F 83            [24]  982 	mov	dph,r7
      00027C A3               [24]  983 	inc	dptr
      00027D A3               [24]  984 	inc	dptr
      00027E A3               [24]  985 	inc	dptr
      00027F A3               [24]  986 	inc	dptr
      000280 A3               [24]  987 	inc	dptr
      000281 E5 82            [12]  988 	mov	a,_DPL
      000283 F0               [24]  989 	movx	@dptr,a
                                    990 ;	sch8051.c:114: sch_tasks[i].stack_save[6] = DPH; 
      000284 8C 06            [24]  991 	mov	ar6,r4
      000286 74 00            [12]  992 	mov	a,#(_sch_tasks >> 8)
      000288 2D               [12]  993 	add	a,r5
      000289 FF               [12]  994 	mov	r7,a
      00028A 74 06            [12]  995 	mov	a,#0x06
      00028C 2E               [12]  996 	add	a,r6
      00028D F5 82            [12]  997 	mov	dpl,a
      00028F E4               [12]  998 	clr	a
      000290 3F               [12]  999 	addc	a,r7
      000291 F5 83            [12] 1000 	mov	dph,a
      000293 E5 83            [12] 1001 	mov	a,_DPH
      000295 F0               [24] 1002 	movx	@dptr,a
                                   1003 ;	sch8051.c:119: for(j = 7; j < 15; j++){
      000296 7F 07            [12] 1004 	mov	r7,#0x07
      000298                       1005 00109$:
                                   1006 ;	sch8051.c:120: sch_tasks[i].stack_save[j] = 0; 
      000298 8C 03            [24] 1007 	mov	ar3,r4
      00029A 74 00            [12] 1008 	mov	a,#(_sch_tasks >> 8)
      00029C 2D               [12] 1009 	add	a,r5
      00029D FE               [12] 1010 	mov	r6,a
      00029E EF               [12] 1011 	mov	a,r7
      00029F 2B               [12] 1012 	add	a,r3
      0002A0 F5 82            [12] 1013 	mov	dpl,a
      0002A2 E4               [12] 1014 	clr	a
      0002A3 3E               [12] 1015 	addc	a,r6
      0002A4 F5 83            [12] 1016 	mov	dph,a
      0002A6 E4               [12] 1017 	clr	a
      0002A7 F0               [24] 1018 	movx	@dptr,a
                                   1019 ;	sch8051.c:119: for(j = 7; j < 15; j++){
      0002A8 0F               [12] 1020 	inc	r7
      0002A9 BF 0F 00         [24] 1021 	cjne	r7,#0x0f,00139$
      0002AC                       1022 00139$:
      0002AC 40 EA            [24] 1023 	jc	00109$
                                   1024 ;	sch8051.c:123: sch_tasks[i].stack_save[15] = PSW; 
      0002AE 8C 06            [24] 1025 	mov	ar6,r4
      0002B0 74 00            [12] 1026 	mov	a,#(_sch_tasks >> 8)
      0002B2 2D               [12] 1027 	add	a,r5
      0002B3 FF               [12] 1028 	mov	r7,a
      0002B4 74 0F            [12] 1029 	mov	a,#0x0f
      0002B6 2E               [12] 1030 	add	a,r6
      0002B7 F5 82            [12] 1031 	mov	dpl,a
      0002B9 E4               [12] 1032 	clr	a
      0002BA 3F               [12] 1033 	addc	a,r7
      0002BB F5 83            [12] 1034 	mov	dph,a
      0002BD E5 D0            [12] 1035 	mov	a,_PSW
      0002BF F0               [24] 1036 	movx	@dptr,a
                                   1037 ;	sch8051.c:125: sch_tasks[i].state = WAIT;  
      0002C0 8C 06            [24] 1038 	mov	ar6,r4
      0002C2 74 00            [12] 1039 	mov	a,#(_sch_tasks >> 8)
      0002C4 2D               [12] 1040 	add	a,r5
      0002C5 FF               [12] 1041 	mov	r7,a
      0002C6 74 33            [12] 1042 	mov	a,#0x33
      0002C8 2E               [12] 1043 	add	a,r6
      0002C9 F5 82            [12] 1044 	mov	dpl,a
      0002CB E4               [12] 1045 	clr	a
      0002CC 3F               [12] 1046 	addc	a,r7
      0002CD F5 83            [12] 1047 	mov	dph,a
      0002CF 74 01            [12] 1048 	mov	a,#0x01
      0002D1 F0               [24] 1049 	movx	@dptr,a
                                   1050 ;	sch8051.c:126: sch_tasks[i].sp = 15; 
      0002D2 74 00            [12] 1051 	mov	a,#(_sch_tasks >> 8)
      0002D4 2D               [12] 1052 	add	a,r5
      0002D5 FD               [12] 1053 	mov	r5,a
      0002D6 74 32            [12] 1054 	mov	a,#0x32
      0002D8 2C               [12] 1055 	add	a,r4
      0002D9 F5 82            [12] 1056 	mov	dpl,a
      0002DB E4               [12] 1057 	clr	a
      0002DC 3D               [12] 1058 	addc	a,r5
      0002DD F5 83            [12] 1059 	mov	dph,a
      0002DF 74 0F            [12] 1060 	mov	a,#0x0f
      0002E1 F0               [24] 1061 	movx	@dptr,a
                                   1062 ;	sch8051.c:127: sch_num_tasks++; 
      0002E2 90 02 11         [24] 1063 	mov	dptr,#_sch_num_tasks
      0002E5 E0               [24] 1064 	movx	a,@dptr
      0002E6 04               [12] 1065 	inc	a
      0002E7 F0               [24] 1066 	movx	@dptr,a
                                   1067 ;	sch8051.c:128: }
      0002E8 22               [24] 1068 	ret
                                   1069 ;------------------------------------------------------------
                                   1070 ;Allocation info for local variables in function 'sch_remove_task'
                                   1071 ;------------------------------------------------------------
                                   1072 ;ram                       Allocated to registers r1 
                                   1073 ;xram                      Allocated to registers r6 r7 
                                   1074 ;------------------------------------------------------------
                                   1075 ;	sch8051.c:132: void sch_remove_task(){
                                   1076 ;	-----------------------------------------
                                   1077 ;	 function sch_remove_task
                                   1078 ;	-----------------------------------------
      0002E9                       1079 _sch_remove_task:
                                   1080 ;	sch8051.c:133: EA = 0; 
                                   1081 ;	assignBit
      0002E9 C2 AF            [12] 1082 	clr	_EA
                                   1083 ;	sch8051.c:134: sch_num_tasks--; 
      0002EB 90 02 11         [24] 1084 	mov	dptr,#_sch_num_tasks
      0002EE E0               [24] 1085 	movx	a,@dptr
      0002EF 14               [12] 1086 	dec	a
      0002F0 F0               [24] 1087 	movx	@dptr,a
                                   1088 ;	sch8051.c:135: sch_tasks[sch_index].state = FREE; 
      0002F1 90 02 10         [24] 1089 	mov	dptr,#_sch_index
      0002F4 E0               [24] 1090 	movx	a,@dptr
      0002F5 75 F0 34         [24] 1091 	mov	b,#0x34
      0002F8 A4               [48] 1092 	mul	ab
      0002F9 24 00            [12] 1093 	add	a,#_sch_tasks
      0002FB FE               [12] 1094 	mov	r6,a
      0002FC 74 00            [12] 1095 	mov	a,#(_sch_tasks >> 8)
      0002FE 35 F0            [12] 1096 	addc	a,b
      000300 FF               [12] 1097 	mov	r7,a
      000301 74 33            [12] 1098 	mov	a,#0x33
      000303 2E               [12] 1099 	add	a,r6
      000304 F5 82            [12] 1100 	mov	dpl,a
      000306 E4               [12] 1101 	clr	a
      000307 3F               [12] 1102 	addc	a,r7
      000308 F5 83            [12] 1103 	mov	dph,a
      00030A 74 03            [12] 1104 	mov	a,#0x03
      00030C F0               [24] 1105 	movx	@dptr,a
                                   1106 ;	sch8051.c:136: sch_schedule(); 
      00030D 12r00r00         [24] 1107 	lcall	_sch_schedule
                                   1108 ;	sch8051.c:137: TO_STACK
      000310 90 02 10         [24] 1109 	mov	dptr,#_sch_index
      000313 E0               [24] 1110 	movx	a,@dptr
      000314 75 F0 34         [24] 1111 	mov	b,#0x34
      000317 A4               [48] 1112 	mul	ab
      000318 24 00            [12] 1113 	add	a,#_sch_tasks
      00031A FE               [12] 1114 	mov	r6,a
      00031B 74 00            [12] 1115 	mov	a,#(_sch_tasks >> 8)
      00031D 35 F0            [12] 1116 	addc	a,b
      00031F FF               [12] 1117 	mov	r7,a
      000320 E0               [24] 1118 	movx	a,@dptr
      000321 75 F0 34         [24] 1119 	mov	b,#0x34
      000324 A4               [48] 1120 	mul	ab
      000325 24 00            [12] 1121 	add	a,#_sch_tasks
      000327 FC               [12] 1122 	mov	r4,a
      000328 74 00            [12] 1123 	mov	a,#(_sch_tasks >> 8)
      00032A 35 F0            [12] 1124 	addc	a,b
      00032C FD               [12] 1125 	mov	r5,a
      00032D 74 32            [12] 1126 	mov	a,#0x32
      00032F 2C               [12] 1127 	add	a,r4
      000330 F5 82            [12] 1128 	mov	dpl,a
      000332 E4               [12] 1129 	clr	a
      000333 3D               [12] 1130 	addc	a,r5
      000334 F5 83            [12] 1131 	mov	dph,a
      000336 E0               [24] 1132 	movx	a,@dptr
      000337 FD               [12] 1133 	mov	r5,a
      000338 24 21            [12] 1134 	add	a,#0x21
      00033A F5 81            [12] 1135 	mov	_SP,a
      00033C 79 21            [12] 1136 	mov	r1,#0x21
      00033E                       1137 00101$:
      00033E 89 05            [24] 1138 	mov	ar5,r1
      000340 C3               [12] 1139 	clr	c
      000341 E5 81            [12] 1140 	mov	a,_SP
      000343 9D               [12] 1141 	subb	a,r5
      000344 40 10            [24] 1142 	jc	00103$
      000346 8E 82            [24] 1143 	mov	dpl,r6
      000348 8F 83            [24] 1144 	mov	dph,r7
      00034A E0               [24] 1145 	movx	a,@dptr
      00034B FD               [12] 1146 	mov	r5,a
      00034C A3               [24] 1147 	inc	dptr
      00034D AE 82            [24] 1148 	mov	r6,dpl
      00034F AF 83            [24] 1149 	mov	r7,dph
      000351 A7 05            [24] 1150 	mov	@r1,ar5
      000353 09               [12] 1151 	inc	r1
      000354 80 E8            [24] 1152 	sjmp	00101$
      000356                       1153 00103$:
                                   1154 ;	sch8051.c:138: POP_BANK
      000356 D0 D0            [24] 1155 	pop psw 
      000358 D0 00            [24] 1156 	pop 0 
      00035A D0 01            [24] 1157 	pop 1 
      00035C D0 02            [24] 1158 	pop 2 
      00035E D0 03            [24] 1159 	pop 3 
      000360 D0 04            [24] 1160 	pop 4 
      000362 D0 05            [24] 1161 	pop 5 
      000364 D0 06            [24] 1162 	pop 6 
      000366 D0 07            [24] 1163 	pop 7 
      000368 D0 83            [24] 1164 	pop dph 
      00036A D0 82            [24] 1165 	pop dpl 
      00036C D0 F0            [24] 1166 	pop b 
      00036E D0 E0            [24] 1167 	pop acc 
      000370 D0*00            [24] 1168 	pop bits 
                                   1169 ;	sch8051.c:139: EA = 1; 
                                   1170 ;	assignBit
      000372 D2 AF            [12] 1171 	setb	_EA
                                   1172 ;	sch8051.c:140: }
      000374 22               [24] 1173 	ret
                                   1174 ;------------------------------------------------------------
                                   1175 ;Allocation info for local variables in function 'sch_start'
                                   1176 ;------------------------------------------------------------
                                   1177 ;ram                       Allocated to registers r1 
                                   1178 ;xram                      Allocated to registers r6 r7 
                                   1179 ;------------------------------------------------------------
                                   1180 ;	sch8051.c:143: void sch_start(){
                                   1181 ;	-----------------------------------------
                                   1182 ;	 function sch_start
                                   1183 ;	-----------------------------------------
      000375                       1184 _sch_start:
                                   1185 ;	sch8051.c:144: EA = 0; 
                                   1186 ;	assignBit
      000375 C2 AF            [12] 1187 	clr	_EA
                                   1188 ;	sch8051.c:147: T2CON = 0; 
      000377 75 C8 00         [24] 1189 	mov	_T2CON,#0x00
                                   1190 ;	sch8051.c:148: RCAP2H = 0xCE;
      00037A 75 CB CE         [24] 1191 	mov	_RCAP2H,#0xce
                                   1192 ;	sch8051.c:149: RCAP2L = 0xD9; 
      00037D 75 CA D9         [24] 1193 	mov	_RCAP2L,#0xd9
                                   1194 ;	sch8051.c:150: TH2 = 0xCE; 
      000380 75 CD CE         [24] 1195 	mov	_TH2,#0xce
                                   1196 ;	sch8051.c:151: TL2 = 0xD9;
      000383 75 CC D9         [24] 1197 	mov	_TL2,#0xd9
                                   1198 ;	sch8051.c:152: ET2 = 1; 
                                   1199 ;	assignBit
      000386 D2 AD            [12] 1200 	setb	_ET2
                                   1201 ;	sch8051.c:153: TR2 = 1;  
                                   1202 ;	assignBit
      000388 D2 CA            [12] 1203 	setb	_TR2
                                   1204 ;	sch8051.c:156: sch_index = 0; 
      00038A 90 02 10         [24] 1205 	mov	dptr,#_sch_index
      00038D E4               [12] 1206 	clr	a
      00038E F0               [24] 1207 	movx	@dptr,a
                                   1208 ;	sch8051.c:157: sch_tasks[sch_index].state = READY; 
      00038F E0               [24] 1209 	movx	a,@dptr
      000390 75 F0 34         [24] 1210 	mov	b,#0x34
      000393 A4               [48] 1211 	mul	ab
      000394 24 00            [12] 1212 	add	a,#_sch_tasks
      000396 FE               [12] 1213 	mov	r6,a
      000397 74 00            [12] 1214 	mov	a,#(_sch_tasks >> 8)
      000399 35 F0            [12] 1215 	addc	a,b
      00039B FF               [12] 1216 	mov	r7,a
      00039C 74 33            [12] 1217 	mov	a,#0x33
      00039E 2E               [12] 1218 	add	a,r6
      00039F F5 82            [12] 1219 	mov	dpl,a
      0003A1 E4               [12] 1220 	clr	a
      0003A2 3F               [12] 1221 	addc	a,r7
      0003A3 F5 83            [12] 1222 	mov	dph,a
      0003A5 E4               [12] 1223 	clr	a
      0003A6 F0               [24] 1224 	movx	@dptr,a
                                   1225 ;	sch8051.c:158: TO_STACK
      0003A7 90 02 10         [24] 1226 	mov	dptr,#_sch_index
      0003AA E0               [24] 1227 	movx	a,@dptr
      0003AB 75 F0 34         [24] 1228 	mov	b,#0x34
      0003AE A4               [48] 1229 	mul	ab
      0003AF 24 00            [12] 1230 	add	a,#_sch_tasks
      0003B1 FE               [12] 1231 	mov	r6,a
      0003B2 74 00            [12] 1232 	mov	a,#(_sch_tasks >> 8)
      0003B4 35 F0            [12] 1233 	addc	a,b
      0003B6 FF               [12] 1234 	mov	r7,a
      0003B7 E0               [24] 1235 	movx	a,@dptr
      0003B8 75 F0 34         [24] 1236 	mov	b,#0x34
      0003BB A4               [48] 1237 	mul	ab
      0003BC 24 00            [12] 1238 	add	a,#_sch_tasks
      0003BE FC               [12] 1239 	mov	r4,a
      0003BF 74 00            [12] 1240 	mov	a,#(_sch_tasks >> 8)
      0003C1 35 F0            [12] 1241 	addc	a,b
      0003C3 FD               [12] 1242 	mov	r5,a
      0003C4 74 32            [12] 1243 	mov	a,#0x32
      0003C6 2C               [12] 1244 	add	a,r4
      0003C7 F5 82            [12] 1245 	mov	dpl,a
      0003C9 E4               [12] 1246 	clr	a
      0003CA 3D               [12] 1247 	addc	a,r5
      0003CB F5 83            [12] 1248 	mov	dph,a
      0003CD E0               [24] 1249 	movx	a,@dptr
      0003CE FD               [12] 1250 	mov	r5,a
      0003CF 24 21            [12] 1251 	add	a,#0x21
      0003D1 F5 81            [12] 1252 	mov	_SP,a
      0003D3 79 21            [12] 1253 	mov	r1,#0x21
      0003D5                       1254 00101$:
      0003D5 89 05            [24] 1255 	mov	ar5,r1
      0003D7 C3               [12] 1256 	clr	c
      0003D8 E5 81            [12] 1257 	mov	a,_SP
      0003DA 9D               [12] 1258 	subb	a,r5
      0003DB 40 10            [24] 1259 	jc	00103$
      0003DD 8E 82            [24] 1260 	mov	dpl,r6
      0003DF 8F 83            [24] 1261 	mov	dph,r7
      0003E1 E0               [24] 1262 	movx	a,@dptr
      0003E2 FD               [12] 1263 	mov	r5,a
      0003E3 A3               [24] 1264 	inc	dptr
      0003E4 AE 82            [24] 1265 	mov	r6,dpl
      0003E6 AF 83            [24] 1266 	mov	r7,dph
      0003E8 A7 05            [24] 1267 	mov	@r1,ar5
      0003EA 09               [12] 1268 	inc	r1
      0003EB 80 E8            [24] 1269 	sjmp	00101$
      0003ED                       1270 00103$:
                                   1271 ;	sch8051.c:159: POP_BANK  
      0003ED D0 D0            [24] 1272 	pop psw 
      0003EF D0 00            [24] 1273 	pop 0 
      0003F1 D0 01            [24] 1274 	pop 1 
      0003F3 D0 02            [24] 1275 	pop 2 
      0003F5 D0 03            [24] 1276 	pop 3 
      0003F7 D0 04            [24] 1277 	pop 4 
      0003F9 D0 05            [24] 1278 	pop 5 
      0003FB D0 06            [24] 1279 	pop 6 
      0003FD D0 07            [24] 1280 	pop 7 
      0003FF D0 83            [24] 1281 	pop dph 
      000401 D0 82            [24] 1282 	pop dpl 
      000403 D0 F0            [24] 1283 	pop b 
      000405 D0 E0            [24] 1284 	pop acc 
      000407 D0*00            [24] 1285 	pop bits 
                                   1286 ;	sch8051.c:160: EA = 1;
                                   1287 ;	assignBit
      000409 D2 AF            [12] 1288 	setb	_EA
                                   1289 ;	sch8051.c:161: }
      00040B 22               [24] 1290 	ret
                                   1291 ;------------------------------------------------------------
                                   1292 ;Allocation info for local variables in function 'sch_next'
                                   1293 ;------------------------------------------------------------
                                   1294 ;ram                       Allocated to registers r1 
                                   1295 ;xram                      Allocated to registers 
                                   1296 ;ram                       Allocated to registers r1 
                                   1297 ;xram                      Allocated to registers r6 r7 
                                   1298 ;------------------------------------------------------------
                                   1299 ;	sch8051.c:164: void sch_next(){
                                   1300 ;	-----------------------------------------
                                   1301 ;	 function sch_next
                                   1302 ;	-----------------------------------------
      00040C                       1303 _sch_next:
                                   1304 ;	sch8051.c:165: EA = 0; 
                                   1305 ;	assignBit
      00040C C2 AF            [12] 1306 	clr	_EA
                                   1307 ;	sch8051.c:166: PUSH_BANK
      00040E C0*00            [24] 1308 	push bits 
      000410 C0 E0            [24] 1309 	push acc 
      000412 C0 F0            [24] 1310 	push b 
      000414 C0 82            [24] 1311 	push dpl 
      000416 C0 83            [24] 1312 	push dph 
      000418 C0 07            [24] 1313 	push 7 
      00041A C0 06            [24] 1314 	push 6 
      00041C C0 05            [24] 1315 	push 5 
      00041E C0 04            [24] 1316 	push 4 
      000420 C0 03            [24] 1317 	push 3 
      000422 C0 02            [24] 1318 	push 2 
      000424 C0 01            [24] 1319 	push 1 
      000426 C0 00            [24] 1320 	push 0 
      000428 C0 D0            [24] 1321 	push psw 
                                   1322 ;	sch8051.c:167: TO_XRAM
      00042A 90 02 10         [24] 1323 	mov	dptr,#_sch_index
      00042D E0               [24] 1324 	movx	a,@dptr
      00042E 75 F0 34         [24] 1325 	mov	b,#0x34
      000431 A4               [48] 1326 	mul	ab
      000432 24 00            [12] 1327 	add	a,#_sch_tasks
      000434 FE               [12] 1328 	mov	r6,a
      000435 74 00            [12] 1329 	mov	a,#(_sch_tasks >> 8)
      000437 35 F0            [12] 1330 	addc	a,b
      000439 FF               [12] 1331 	mov	r7,a
      00043A E0               [24] 1332 	movx	a,@dptr
      00043B 75 F0 34         [24] 1333 	mov	b,#0x34
      00043E A4               [48] 1334 	mul	ab
      00043F 24 00            [12] 1335 	add	a,#_sch_tasks
      000441 FC               [12] 1336 	mov	r4,a
      000442 74 00            [12] 1337 	mov	a,#(_sch_tasks >> 8)
      000444 35 F0            [12] 1338 	addc	a,b
      000446 FD               [12] 1339 	mov	r5,a
      000447 74 32            [12] 1340 	mov	a,#0x32
      000449 2C               [12] 1341 	add	a,r4
      00044A F5 82            [12] 1342 	mov	dpl,a
      00044C E4               [12] 1343 	clr	a
      00044D 3D               [12] 1344 	addc	a,r5
      00044E F5 83            [12] 1345 	mov	dph,a
      000450 E5 81            [12] 1346 	mov	a,_SP
      000452 24 DF            [12] 1347 	add	a,#0xdf
      000454 FD               [12] 1348 	mov	r5,a
      000455 F0               [24] 1349 	movx	@dptr,a
      000456 79 21            [12] 1350 	mov	r1,#0x21
      000458                       1351 00101$:
      000458 89 05            [24] 1352 	mov	ar5,r1
      00045A C3               [12] 1353 	clr	c
      00045B E5 81            [12] 1354 	mov	a,_SP
      00045D 9D               [12] 1355 	subb	a,r5
      00045E 40 10            [24] 1356 	jc	00103$
      000460 87 05            [24] 1357 	mov	ar5,@r1
      000462 09               [12] 1358 	inc	r1
      000463 8E 82            [24] 1359 	mov	dpl,r6
      000465 8F 83            [24] 1360 	mov	dph,r7
      000467 ED               [12] 1361 	mov	a,r5
      000468 F0               [24] 1362 	movx	@dptr,a
      000469 A3               [24] 1363 	inc	dptr
      00046A AE 82            [24] 1364 	mov	r6,dpl
      00046C AF 83            [24] 1365 	mov	r7,dph
      00046E 80 E8            [24] 1366 	sjmp	00101$
      000470                       1367 00103$:
                                   1368 ;	sch8051.c:168: sch_schedule();
      000470 12r00r00         [24] 1369 	lcall	_sch_schedule
                                   1370 ;	sch8051.c:169: TO_STACK
      000473 90 02 10         [24] 1371 	mov	dptr,#_sch_index
      000476 E0               [24] 1372 	movx	a,@dptr
      000477 75 F0 34         [24] 1373 	mov	b,#0x34
      00047A A4               [48] 1374 	mul	ab
      00047B 24 00            [12] 1375 	add	a,#_sch_tasks
      00047D FE               [12] 1376 	mov	r6,a
      00047E 74 00            [12] 1377 	mov	a,#(_sch_tasks >> 8)
      000480 35 F0            [12] 1378 	addc	a,b
      000482 FF               [12] 1379 	mov	r7,a
      000483 E0               [24] 1380 	movx	a,@dptr
      000484 75 F0 34         [24] 1381 	mov	b,#0x34
      000487 A4               [48] 1382 	mul	ab
      000488 24 00            [12] 1383 	add	a,#_sch_tasks
      00048A FC               [12] 1384 	mov	r4,a
      00048B 74 00            [12] 1385 	mov	a,#(_sch_tasks >> 8)
      00048D 35 F0            [12] 1386 	addc	a,b
      00048F FD               [12] 1387 	mov	r5,a
      000490 74 32            [12] 1388 	mov	a,#0x32
      000492 2C               [12] 1389 	add	a,r4
      000493 F5 82            [12] 1390 	mov	dpl,a
      000495 E4               [12] 1391 	clr	a
      000496 3D               [12] 1392 	addc	a,r5
      000497 F5 83            [12] 1393 	mov	dph,a
      000499 E0               [24] 1394 	movx	a,@dptr
      00049A FD               [12] 1395 	mov	r5,a
      00049B 24 21            [12] 1396 	add	a,#0x21
      00049D F5 81            [12] 1397 	mov	_SP,a
      00049F 79 21            [12] 1398 	mov	r1,#0x21
      0004A1                       1399 00104$:
      0004A1 89 05            [24] 1400 	mov	ar5,r1
      0004A3 C3               [12] 1401 	clr	c
      0004A4 E5 81            [12] 1402 	mov	a,_SP
      0004A6 9D               [12] 1403 	subb	a,r5
      0004A7 40 10            [24] 1404 	jc	00106$
      0004A9 8E 82            [24] 1405 	mov	dpl,r6
      0004AB 8F 83            [24] 1406 	mov	dph,r7
      0004AD E0               [24] 1407 	movx	a,@dptr
      0004AE FD               [12] 1408 	mov	r5,a
      0004AF A3               [24] 1409 	inc	dptr
      0004B0 AE 82            [24] 1410 	mov	r6,dpl
      0004B2 AF 83            [24] 1411 	mov	r7,dph
      0004B4 A7 05            [24] 1412 	mov	@r1,ar5
      0004B6 09               [12] 1413 	inc	r1
      0004B7 80 E8            [24] 1414 	sjmp	00104$
      0004B9                       1415 00106$:
                                   1416 ;	sch8051.c:170: POP_BANK
      0004B9 D0 D0            [24] 1417 	pop psw 
      0004BB D0 00            [24] 1418 	pop 0 
      0004BD D0 01            [24] 1419 	pop 1 
      0004BF D0 02            [24] 1420 	pop 2 
      0004C1 D0 03            [24] 1421 	pop 3 
      0004C3 D0 04            [24] 1422 	pop 4 
      0004C5 D0 05            [24] 1423 	pop 5 
      0004C7 D0 06            [24] 1424 	pop 6 
      0004C9 D0 07            [24] 1425 	pop 7 
      0004CB D0 83            [24] 1426 	pop dph 
      0004CD D0 82            [24] 1427 	pop dpl 
      0004CF D0 F0            [24] 1428 	pop b 
      0004D1 D0 E0            [24] 1429 	pop acc 
      0004D3 D0*00            [24] 1430 	pop bits 
                                   1431 ;	sch8051.c:171: EA = 1; 
                                   1432 ;	assignBit
      0004D5 D2 AF            [12] 1433 	setb	_EA
                                   1434 ;	sch8051.c:172: }
      0004D7 22               [24] 1435 	ret
                                   1436 ;------------------------------------------------------------
                                   1437 ;Allocation info for local variables in function 'sch_mutex_start'
                                   1438 ;------------------------------------------------------------
                                   1439 ;state                     Allocated with name '_sch_mutex_start_PARM_2'
                                   1440 ;mut                       Allocated to registers r5 r6 r7 
                                   1441 ;i                         Allocated to registers r4 
                                   1442 ;------------------------------------------------------------
                                   1443 ;	sch8051.c:179: void sch_mutex_start(struct sch_mutex_sync *mut, Byte state){
                                   1444 ;	-----------------------------------------
                                   1445 ;	 function sch_mutex_start
                                   1446 ;	-----------------------------------------
      0004D8                       1447 _sch_mutex_start:
                                   1448 ;	sch8051.c:182: mut->lock = MUTEX_LOCKED; 
      0004D8 AD 82            [24] 1449 	mov	r5,dpl
      0004DA AE 83            [24] 1450 	mov	r6,dph
      0004DC AF F0            [24] 1451 	mov	r7,b
      0004DE E4               [12] 1452 	clr	a
      0004DF 12r00r00         [24] 1453 	lcall	__gptrput
                                   1454 ;	sch8051.c:183: if(state == MUTEX_LOCKED || state == MUTEX_RELEASED){
      0004E2 E5*00            [12] 1455 	mov	a,_sch_mutex_start_PARM_2
      0004E4 60 05            [24] 1456 	jz	00101$
      0004E6 74 01            [12] 1457 	mov	a,#0x01
      0004E8 B5*00 0B         [24] 1458 	cjne	a,_sch_mutex_start_PARM_2,00110$
      0004EB                       1459 00101$:
                                   1460 ;	sch8051.c:184: mut->lock = state; 
      0004EB 8D 82            [24] 1461 	mov	dpl,r5
      0004ED 8E 83            [24] 1462 	mov	dph,r6
      0004EF 8F F0            [24] 1463 	mov	b,r7
      0004F1 E5*00            [12] 1464 	mov	a,_sch_mutex_start_PARM_2
      0004F3 12r00r00         [24] 1465 	lcall	__gptrput
                                   1466 ;	sch8051.c:186: for(i = 0; i < SCH_MAX_TASKS; i++){
      0004F6                       1467 00110$:
      0004F6 0D               [12] 1468 	inc	r5
      0004F7 BD 00 01         [24] 1469 	cjne	r5,#0x00,00121$
      0004FA 0E               [12] 1470 	inc	r6
      0004FB                       1471 00121$:
      0004FB 7C 00            [12] 1472 	mov	r4,#0x00
      0004FD                       1473 00105$:
                                   1474 ;	sch8051.c:187: mut->waiting_list[i] = 0; 
      0004FD EC               [12] 1475 	mov	a,r4
      0004FE 2D               [12] 1476 	add	a,r5
      0004FF F9               [12] 1477 	mov	r1,a
      000500 E4               [12] 1478 	clr	a
      000501 3E               [12] 1479 	addc	a,r6
      000502 FA               [12] 1480 	mov	r2,a
      000503 8F 03            [24] 1481 	mov	ar3,r7
      000505 89 82            [24] 1482 	mov	dpl,r1
      000507 8A 83            [24] 1483 	mov	dph,r2
      000509 8B F0            [24] 1484 	mov	b,r3
      00050B E4               [12] 1485 	clr	a
      00050C 12r00r00         [24] 1486 	lcall	__gptrput
                                   1487 ;	sch8051.c:186: for(i = 0; i < SCH_MAX_TASKS; i++){
      00050F 0C               [12] 1488 	inc	r4
      000510 BC 0A 00         [24] 1489 	cjne	r4,#0x0a,00122$
      000513                       1490 00122$:
      000513 40 E8            [24] 1491 	jc	00105$
                                   1492 ;	sch8051.c:189: }
      000515 22               [24] 1493 	ret
                                   1494 ;------------------------------------------------------------
                                   1495 ;Allocation info for local variables in function 'sch_mutex_lock'
                                   1496 ;------------------------------------------------------------
                                   1497 ;mut                       Allocated with name '_sch_mutex_lock_mut_65536_44'
                                   1498 ;------------------------------------------------------------
                                   1499 ;	sch8051.c:192: void sch_mutex_lock(struct sch_mutex_sync *mut){
                                   1500 ;	-----------------------------------------
                                   1501 ;	 function sch_mutex_lock
                                   1502 ;	-----------------------------------------
      000516                       1503 _sch_mutex_lock:
      000516 85 82*01         [24] 1504 	mov	_sch_mutex_lock_mut_65536_44,dpl
      000519 85 83*02         [24] 1505 	mov	(_sch_mutex_lock_mut_65536_44 + 1),dph
      00051C 85 F0*03         [24] 1506 	mov	(_sch_mutex_lock_mut_65536_44 + 2),b
                                   1507 ;	sch8051.c:193: EA = 0; 
                                   1508 ;	assignBit
      00051F C2 AF            [12] 1509 	clr	_EA
                                   1510 ;	sch8051.c:194: while(1){
      000521 74 01            [12] 1511 	mov	a,#0x01
      000523 25*01            [12] 1512 	add	a,_sch_mutex_lock_mut_65536_44
      000525 FA               [12] 1513 	mov	r2,a
      000526 E4               [12] 1514 	clr	a
      000527 35*02            [12] 1515 	addc	a,(_sch_mutex_lock_mut_65536_44 + 1)
      000529 FB               [12] 1516 	mov	r3,a
      00052A AC*03            [24] 1517 	mov	r4,(_sch_mutex_lock_mut_65536_44 + 2)
      00052C                       1518 00105$:
                                   1519 ;	sch8051.c:195: if(mut->lock == MUTEX_RELEASED){
      00052C 85*01 82         [24] 1520 	mov	dpl,_sch_mutex_lock_mut_65536_44
      00052F 85*02 83         [24] 1521 	mov	dph,(_sch_mutex_lock_mut_65536_44 + 1)
      000532 85*03 F0         [24] 1522 	mov	b,(_sch_mutex_lock_mut_65536_44 + 2)
      000535 12r00r00         [24] 1523 	lcall	__gptrget
      000538 F9               [12] 1524 	mov	r1,a
      000539 B9 01 10         [24] 1525 	cjne	r1,#0x01,00102$
                                   1526 ;	sch8051.c:196: mut->lock = MUTEX_LOCKED; 
      00053C 85*01 82         [24] 1527 	mov	dpl,_sch_mutex_lock_mut_65536_44
      00053F 85*02 83         [24] 1528 	mov	dph,(_sch_mutex_lock_mut_65536_44 + 1)
      000542 85*03 F0         [24] 1529 	mov	b,(_sch_mutex_lock_mut_65536_44 + 2)
      000545 E4               [12] 1530 	clr	a
      000546 12r00r00         [24] 1531 	lcall	__gptrput
                                   1532 ;	sch8051.c:197: EA = 1; 
                                   1533 ;	assignBit
      000549 D2 AF            [12] 1534 	setb	_EA
                                   1535 ;	sch8051.c:198: break;
      00054B 22               [24] 1536 	ret
      00054C                       1537 00102$:
                                   1538 ;	sch8051.c:200: sch_tasks[sch_index].state = BLOCKED;
      00054C 90 02 10         [24] 1539 	mov	dptr,#_sch_index
      00054F E0               [24] 1540 	movx	a,@dptr
      000550 75 F0 34         [24] 1541 	mov	b,#0x34
      000553 A4               [48] 1542 	mul	ab
      000554 24 00            [12] 1543 	add	a,#_sch_tasks
      000556 F8               [12] 1544 	mov	r0,a
      000557 74 00            [12] 1545 	mov	a,#(_sch_tasks >> 8)
      000559 35 F0            [12] 1546 	addc	a,b
      00055B F9               [12] 1547 	mov	r1,a
      00055C 74 33            [12] 1548 	mov	a,#0x33
      00055E 28               [12] 1549 	add	a,r0
      00055F F5 82            [12] 1550 	mov	dpl,a
      000561 E4               [12] 1551 	clr	a
      000562 39               [12] 1552 	addc	a,r1
      000563 F5 83            [12] 1553 	mov	dph,a
      000565 74 02            [12] 1554 	mov	a,#0x02
      000567 F0               [24] 1555 	movx	@dptr,a
                                   1556 ;	sch8051.c:201: mut->waiting_list[sch_index] = 1; 
      000568 90 02 10         [24] 1557 	mov	dptr,#_sch_index
      00056B E0               [24] 1558 	movx	a,@dptr
      00056C 2A               [12] 1559 	add	a,r2
      00056D F8               [12] 1560 	mov	r0,a
      00056E E4               [12] 1561 	clr	a
      00056F 3B               [12] 1562 	addc	a,r3
      000570 F9               [12] 1563 	mov	r1,a
      000571 8C 07            [24] 1564 	mov	ar7,r4
      000573 88 82            [24] 1565 	mov	dpl,r0
      000575 89 83            [24] 1566 	mov	dph,r1
      000577 8F F0            [24] 1567 	mov	b,r7
      000579 74 01            [12] 1568 	mov	a,#0x01
      00057B 12r00r00         [24] 1569 	lcall	__gptrput
                                   1570 ;	sch8051.c:202: sch_next();  
      00057E C0 04            [24] 1571 	push	ar4
      000580 C0 03            [24] 1572 	push	ar3
      000582 C0 02            [24] 1573 	push	ar2
      000584 12r04r0C         [24] 1574 	lcall	_sch_next
      000587 D0 02            [24] 1575 	pop	ar2
      000589 D0 03            [24] 1576 	pop	ar3
      00058B D0 04            [24] 1577 	pop	ar4
                                   1578 ;	sch8051.c:203: EA = 0; 
                                   1579 ;	assignBit
      00058D C2 AF            [12] 1580 	clr	_EA
                                   1581 ;	sch8051.c:206: }
      00058F 80 9B            [24] 1582 	sjmp	00105$
                                   1583 ;------------------------------------------------------------
                                   1584 ;Allocation info for local variables in function 'sch_mutex_trylock'
                                   1585 ;------------------------------------------------------------
                                   1586 ;mut                       Allocated to registers r5 r6 r7 
                                   1587 ;------------------------------------------------------------
                                   1588 ;	sch8051.c:209: Byte sch_mutex_trylock(struct sch_mutex_sync *mut) __critical{
                                   1589 ;	-----------------------------------------
                                   1590 ;	 function sch_mutex_trylock
                                   1591 ;	-----------------------------------------
      000591                       1592 _sch_mutex_trylock:
      000591 D3               [12] 1593 	setb	c
      000592 10 AF 01         [24] 1594 	jbc	ea,00110$
      000595 C3               [12] 1595 	clr	c
      000596                       1596 00110$:
      000596 C0 D0            [24] 1597 	push	psw
                                   1598 ;	sch8051.c:210: if(mut->lock == MUTEX_RELEASED){
      000598 AD 82            [24] 1599 	mov	r5,dpl
      00059A AE 83            [24] 1600 	mov	r6,dph
      00059C AF F0            [24] 1601 	mov	r7,b
      00059E 12r00r00         [24] 1602 	lcall	__gptrget
      0005A1 FC               [12] 1603 	mov	r4,a
      0005A2 BC 01 0F         [24] 1604 	cjne	r4,#0x01,00102$
                                   1605 ;	sch8051.c:211: mut->lock = MUTEX_LOCKED; 
      0005A5 8D 82            [24] 1606 	mov	dpl,r5
      0005A7 8E 83            [24] 1607 	mov	dph,r6
      0005A9 8F F0            [24] 1608 	mov	b,r7
      0005AB E4               [12] 1609 	clr	a
      0005AC 12r00r00         [24] 1610 	lcall	__gptrput
                                   1611 ;	sch8051.c:212: return 1; 
      0005AF 75 82 01         [24] 1612 	mov	dpl,#0x01
      0005B2 80 03            [24] 1613 	sjmp	00104$
      0005B4                       1614 00102$:
                                   1615 ;	sch8051.c:214: return 0; 
      0005B4 75 82 00         [24] 1616 	mov	dpl,#0x00
      0005B7                       1617 00104$:
                                   1618 ;	sch8051.c:216: }
      0005B7 D0 D0            [24] 1619 	pop	psw
      0005B9 92 AF            [24] 1620 	mov	ea,c
      0005BB 22               [24] 1621 	ret
                                   1622 ;------------------------------------------------------------
                                   1623 ;Allocation info for local variables in function 'sch_mutex_release'
                                   1624 ;------------------------------------------------------------
                                   1625 ;mut                       Allocated to registers r5 r6 r7 
                                   1626 ;i                         Allocated with name '_sch_mutex_release_i_65537_55'
                                   1627 ;sloc0                     Allocated with name '_sch_mutex_release_sloc0_1_0'
                                   1628 ;------------------------------------------------------------
                                   1629 ;	sch8051.c:219: Byte sch_mutex_release(struct sch_mutex_sync *mut){
                                   1630 ;	-----------------------------------------
                                   1631 ;	 function sch_mutex_release
                                   1632 ;	-----------------------------------------
      0005BC                       1633 _sch_mutex_release:
      0005BC AD 82            [24] 1634 	mov	r5,dpl
      0005BE AE 83            [24] 1635 	mov	r6,dph
      0005C0 AF F0            [24] 1636 	mov	r7,b
                                   1637 ;	sch8051.c:220: EA = 0; 
                                   1638 ;	assignBit
      0005C2 C2 AF            [12] 1639 	clr	_EA
                                   1640 ;	sch8051.c:222: if(mut->lock == MUTEX_RELEASED){
      0005C4 8D 82            [24] 1641 	mov	dpl,r5
      0005C6 8E 83            [24] 1642 	mov	dph,r6
      0005C8 8F F0            [24] 1643 	mov	b,r7
      0005CA 12r00r00         [24] 1644 	lcall	__gptrget
      0005CD FC               [12] 1645 	mov	r4,a
      0005CE BC 01 06         [24] 1646 	cjne	r4,#0x01,00105$
                                   1647 ;	sch8051.c:223: EA = 1; 
                                   1648 ;	assignBit
      0005D1 D2 AF            [12] 1649 	setb	_EA
                                   1650 ;	sch8051.c:224: return 0; 
      0005D3 75 82 00         [24] 1651 	mov	dpl,#0x00
      0005D6 22               [24] 1652 	ret
      0005D7                       1653 00105$:
                                   1654 ;	sch8051.c:226: mut->lock = MUTEX_RELEASED; 
      0005D7 8D 82            [24] 1655 	mov	dpl,r5
      0005D9 8E 83            [24] 1656 	mov	dph,r6
      0005DB 8F F0            [24] 1657 	mov	b,r7
      0005DD 74 01            [12] 1658 	mov	a,#0x01
      0005DF 12r00r00         [24] 1659 	lcall	__gptrput
                                   1660 ;	sch8051.c:227: for(i = 0; i < sch_num_tasks; i++){
      0005E2 0D               [12] 1661 	inc	r5
      0005E3 BD 00 01         [24] 1662 	cjne	r5,#0x00,00131$
      0005E6 0E               [12] 1663 	inc	r6
      0005E7                       1664 00131$:
      0005E7 8D*05            [24] 1665 	mov	_sch_mutex_release_sloc0_1_0,r5
      0005E9 8E*06            [24] 1666 	mov	(_sch_mutex_release_sloc0_1_0 + 1),r6
      0005EB 8F*07            [24] 1667 	mov	(_sch_mutex_release_sloc0_1_0 + 2),r7
      0005ED 75*04 00         [24] 1668 	mov	_sch_mutex_release_i_65537_55,#0x00
      0005F0                       1669 00108$:
      0005F0 90 02 11         [24] 1670 	mov	dptr,#_sch_num_tasks
      0005F3 E0               [24] 1671 	movx	a,@dptr
      0005F4 F8               [12] 1672 	mov	r0,a
      0005F5 C3               [12] 1673 	clr	c
      0005F6 E5*04            [12] 1674 	mov	a,_sch_mutex_release_i_65537_55
      0005F8 98               [12] 1675 	subb	a,r0
      0005F9 50 5F            [24] 1676 	jnc	00103$
                                   1677 ;	sch8051.c:228: if(mut->waiting_list[i] == 1){
      0005FB C0 05            [24] 1678 	push	ar5
      0005FD C0 06            [24] 1679 	push	ar6
      0005FF C0 07            [24] 1680 	push	ar7
      000601 E5*04            [12] 1681 	mov	a,_sch_mutex_release_i_65537_55
      000603 25*05            [12] 1682 	add	a,_sch_mutex_release_sloc0_1_0
      000605 F8               [12] 1683 	mov	r0,a
      000606 E4               [12] 1684 	clr	a
      000607 35*06            [12] 1685 	addc	a,(_sch_mutex_release_sloc0_1_0 + 1)
      000609 F9               [12] 1686 	mov	r1,a
      00060A AF*07            [24] 1687 	mov	r7,(_sch_mutex_release_sloc0_1_0 + 2)
      00060C 88 82            [24] 1688 	mov	dpl,r0
      00060E 89 83            [24] 1689 	mov	dph,r1
      000610 8F F0            [24] 1690 	mov	b,r7
      000612 12r00r00         [24] 1691 	lcall	__gptrget
      000615 F8               [12] 1692 	mov	r0,a
      000616 B8 01 02         [24] 1693 	cjne	r0,#0x01,00133$
      000619 80 08            [24] 1694 	sjmp	00134$
      00061B                       1695 00133$:
      00061B D0 07            [24] 1696 	pop	ar7
      00061D D0 06            [24] 1697 	pop	ar6
      00061F D0 05            [24] 1698 	pop	ar5
      000621 80 33            [24] 1699 	sjmp	00109$
      000623                       1700 00134$:
      000623 D0 07            [24] 1701 	pop	ar7
      000625 D0 06            [24] 1702 	pop	ar6
      000627 D0 05            [24] 1703 	pop	ar5
                                   1704 ;	sch8051.c:229: sch_tasks[i].state = WAIT;
      000629 E5*04            [12] 1705 	mov	a,_sch_mutex_release_i_65537_55
      00062B 75 F0 34         [24] 1706 	mov	b,#0x34
      00062E A4               [48] 1707 	mul	ab
      00062F 24 00            [12] 1708 	add	a,#_sch_tasks
      000631 F8               [12] 1709 	mov	r0,a
      000632 74 00            [12] 1710 	mov	a,#(_sch_tasks >> 8)
      000634 35 F0            [12] 1711 	addc	a,b
      000636 F9               [12] 1712 	mov	r1,a
      000637 74 33            [12] 1713 	mov	a,#0x33
      000639 28               [12] 1714 	add	a,r0
      00063A F5 82            [12] 1715 	mov	dpl,a
      00063C E4               [12] 1716 	clr	a
      00063D 39               [12] 1717 	addc	a,r1
      00063E F5 83            [12] 1718 	mov	dph,a
      000640 74 01            [12] 1719 	mov	a,#0x01
      000642 F0               [24] 1720 	movx	@dptr,a
                                   1721 ;	sch8051.c:230: mut->waiting_list[i] = 0;  
      000643 E5*04            [12] 1722 	mov	a,_sch_mutex_release_i_65537_55
      000645 2D               [12] 1723 	add	a,r5
      000646 F8               [12] 1724 	mov	r0,a
      000647 E4               [12] 1725 	clr	a
      000648 3E               [12] 1726 	addc	a,r6
      000649 F9               [12] 1727 	mov	r1,a
      00064A 8F 04            [24] 1728 	mov	ar4,r7
      00064C 88 82            [24] 1729 	mov	dpl,r0
      00064E 89 83            [24] 1730 	mov	dph,r1
      000650 8C F0            [24] 1731 	mov	b,r4
      000652 E4               [12] 1732 	clr	a
      000653 12r00r00         [24] 1733 	lcall	__gptrput
      000656                       1734 00109$:
                                   1735 ;	sch8051.c:227: for(i = 0; i < sch_num_tasks; i++){
      000656 05*04            [12] 1736 	inc	_sch_mutex_release_i_65537_55
      000658 80 96            [24] 1737 	sjmp	00108$
      00065A                       1738 00103$:
                                   1739 ;	sch8051.c:233: EA = 1; 
                                   1740 ;	assignBit
      00065A D2 AF            [12] 1741 	setb	_EA
                                   1742 ;	sch8051.c:234: return 1; 
      00065C 75 82 01         [24] 1743 	mov	dpl,#0x01
                                   1744 ;	sch8051.c:236: }
      00065F 22               [24] 1745 	ret
                                   1746 ;------------------------------------------------------------
                                   1747 ;Allocation info for local variables in function 'sch_semaphore_start'
                                   1748 ;------------------------------------------------------------
                                   1749 ;size                      Allocated with name '_sch_semaphore_start_PARM_2'
                                   1750 ;sem                       Allocated to registers r5 r6 r7 
                                   1751 ;i                         Allocated to registers r4 
                                   1752 ;------------------------------------------------------------
                                   1753 ;	sch8051.c:238: void sch_semaphore_start(struct sch_semaphore_sync *sem, Byte size){
                                   1754 ;	-----------------------------------------
                                   1755 ;	 function sch_semaphore_start
                                   1756 ;	-----------------------------------------
      000660                       1757 _sch_semaphore_start:
                                   1758 ;	sch8051.c:239: sem->lock = size; 
      000660 AD 82            [24] 1759 	mov	r5,dpl
      000662 AE 83            [24] 1760 	mov	r6,dph
      000664 AF F0            [24] 1761 	mov	r7,b
      000666 E5*08            [12] 1762 	mov	a,_sch_semaphore_start_PARM_2
      000668 12r00r00         [24] 1763 	lcall	__gptrput
                                   1764 ;	sch8051.c:240: sem->share = size; 
      00066B 74 0B            [12] 1765 	mov	a,#0x0b
      00066D 2D               [12] 1766 	add	a,r5
      00066E FA               [12] 1767 	mov	r2,a
      00066F E4               [12] 1768 	clr	a
      000670 3E               [12] 1769 	addc	a,r6
      000671 FB               [12] 1770 	mov	r3,a
      000672 8F 04            [24] 1771 	mov	ar4,r7
      000674 8A 82            [24] 1772 	mov	dpl,r2
      000676 8B 83            [24] 1773 	mov	dph,r3
      000678 8C F0            [24] 1774 	mov	b,r4
      00067A E5*08            [12] 1775 	mov	a,_sch_semaphore_start_PARM_2
      00067C 12r00r00         [24] 1776 	lcall	__gptrput
                                   1777 ;	sch8051.c:242: for(i = 0; i < SCH_MAX_TASKS; i++){
      00067F 0D               [12] 1778 	inc	r5
      000680 BD 00 01         [24] 1779 	cjne	r5,#0x00,00111$
      000683 0E               [12] 1780 	inc	r6
      000684                       1781 00111$:
      000684 7C 00            [12] 1782 	mov	r4,#0x00
      000686                       1783 00102$:
                                   1784 ;	sch8051.c:243: sem->waiting_list[i] = 0; 
      000686 EC               [12] 1785 	mov	a,r4
      000687 2D               [12] 1786 	add	a,r5
      000688 F9               [12] 1787 	mov	r1,a
      000689 E4               [12] 1788 	clr	a
      00068A 3E               [12] 1789 	addc	a,r6
      00068B FA               [12] 1790 	mov	r2,a
      00068C 8F 03            [24] 1791 	mov	ar3,r7
      00068E 89 82            [24] 1792 	mov	dpl,r1
      000690 8A 83            [24] 1793 	mov	dph,r2
      000692 8B F0            [24] 1794 	mov	b,r3
      000694 E4               [12] 1795 	clr	a
      000695 12r00r00         [24] 1796 	lcall	__gptrput
                                   1797 ;	sch8051.c:242: for(i = 0; i < SCH_MAX_TASKS; i++){
      000698 0C               [12] 1798 	inc	r4
      000699 BC 0A 00         [24] 1799 	cjne	r4,#0x0a,00112$
      00069C                       1800 00112$:
      00069C 40 E8            [24] 1801 	jc	00102$
                                   1802 ;	sch8051.c:245: }
      00069E 22               [24] 1803 	ret
                                   1804 ;------------------------------------------------------------
                                   1805 ;Allocation info for local variables in function 'sch_semaphore_tryget'
                                   1806 ;------------------------------------------------------------
                                   1807 ;sem                       Allocated to registers r5 r6 r7 
                                   1808 ;------------------------------------------------------------
                                   1809 ;	sch8051.c:248: Byte sch_semaphore_tryget(struct sch_semaphore_sync *sem) __critical{
                                   1810 ;	-----------------------------------------
                                   1811 ;	 function sch_semaphore_tryget
                                   1812 ;	-----------------------------------------
      00069F                       1813 _sch_semaphore_tryget:
      00069F D3               [12] 1814 	setb	c
      0006A0 10 AF 01         [24] 1815 	jbc	ea,00110$
      0006A3 C3               [12] 1816 	clr	c
      0006A4                       1817 00110$:
      0006A4 C0 D0            [24] 1818 	push	psw
                                   1819 ;	sch8051.c:249: if(sem->lock > 0){
      0006A6 AD 82            [24] 1820 	mov	r5,dpl
      0006A8 AE 83            [24] 1821 	mov	r6,dph
      0006AA AF F0            [24] 1822 	mov	r7,b
      0006AC 12r00r00         [24] 1823 	lcall	__gptrget
      0006AF FC               [12] 1824 	mov	r4,a
      0006B0 60 10            [24] 1825 	jz	00102$
                                   1826 ;	sch8051.c:250: sem->lock--; 
      0006B2 1C               [12] 1827 	dec	r4
      0006B3 8D 82            [24] 1828 	mov	dpl,r5
      0006B5 8E 83            [24] 1829 	mov	dph,r6
      0006B7 8F F0            [24] 1830 	mov	b,r7
      0006B9 EC               [12] 1831 	mov	a,r4
      0006BA 12r00r00         [24] 1832 	lcall	__gptrput
                                   1833 ;	sch8051.c:251: return 1; 
      0006BD 75 82 01         [24] 1834 	mov	dpl,#0x01
      0006C0 80 03            [24] 1835 	sjmp	00104$
      0006C2                       1836 00102$:
                                   1837 ;	sch8051.c:253: return 0; 
      0006C2 75 82 00         [24] 1838 	mov	dpl,#0x00
      0006C5                       1839 00104$:
                                   1840 ;	sch8051.c:255: }
      0006C5 D0 D0            [24] 1841 	pop	psw
      0006C7 92 AF            [24] 1842 	mov	ea,c
      0006C9 22               [24] 1843 	ret
                                   1844 ;------------------------------------------------------------
                                   1845 ;Allocation info for local variables in function 'sch_semaphore_get'
                                   1846 ;------------------------------------------------------------
                                   1847 ;sem                       Allocated with name '_sch_semaphore_get_sem_65536_70'
                                   1848 ;------------------------------------------------------------
                                   1849 ;	sch8051.c:258: void sch_semaphore_get(struct sch_semaphore_sync *sem){
                                   1850 ;	-----------------------------------------
                                   1851 ;	 function sch_semaphore_get
                                   1852 ;	-----------------------------------------
      0006CA                       1853 _sch_semaphore_get:
      0006CA 85 82*09         [24] 1854 	mov	_sch_semaphore_get_sem_65536_70,dpl
      0006CD 85 83*0A         [24] 1855 	mov	(_sch_semaphore_get_sem_65536_70 + 1),dph
      0006D0 85 F0*0B         [24] 1856 	mov	(_sch_semaphore_get_sem_65536_70 + 2),b
                                   1857 ;	sch8051.c:259: EA = 0; 
                                   1858 ;	assignBit
      0006D3 C2 AF            [12] 1859 	clr	_EA
                                   1860 ;	sch8051.c:260: while(1){
      0006D5 74 01            [12] 1861 	mov	a,#0x01
      0006D7 25*09            [12] 1862 	add	a,_sch_semaphore_get_sem_65536_70
      0006D9 FA               [12] 1863 	mov	r2,a
      0006DA E4               [12] 1864 	clr	a
      0006DB 35*0A            [12] 1865 	addc	a,(_sch_semaphore_get_sem_65536_70 + 1)
      0006DD FB               [12] 1866 	mov	r3,a
      0006DE AC*0B            [24] 1867 	mov	r4,(_sch_semaphore_get_sem_65536_70 + 2)
      0006E0                       1868 00105$:
                                   1869 ;	sch8051.c:261: if(sem->lock > 0){
      0006E0 85*09 82         [24] 1870 	mov	dpl,_sch_semaphore_get_sem_65536_70
      0006E3 85*0A 83         [24] 1871 	mov	dph,(_sch_semaphore_get_sem_65536_70 + 1)
      0006E6 85*0B F0         [24] 1872 	mov	b,(_sch_semaphore_get_sem_65536_70 + 2)
      0006E9 12r00r00         [24] 1873 	lcall	__gptrget
      0006EC F9               [12] 1874 	mov	r1,a
      0006ED 60 11            [24] 1875 	jz	00102$
                                   1876 ;	sch8051.c:262: sem->lock--; 
      0006EF 19               [12] 1877 	dec	r1
      0006F0 85*09 82         [24] 1878 	mov	dpl,_sch_semaphore_get_sem_65536_70
      0006F3 85*0A 83         [24] 1879 	mov	dph,(_sch_semaphore_get_sem_65536_70 + 1)
      0006F6 85*0B F0         [24] 1880 	mov	b,(_sch_semaphore_get_sem_65536_70 + 2)
      0006F9 E9               [12] 1881 	mov	a,r1
      0006FA 12r00r00         [24] 1882 	lcall	__gptrput
                                   1883 ;	sch8051.c:263: EA = 1; 
                                   1884 ;	assignBit
      0006FD D2 AF            [12] 1885 	setb	_EA
                                   1886 ;	sch8051.c:264: break; 
      0006FF 22               [24] 1887 	ret
      000700                       1888 00102$:
                                   1889 ;	sch8051.c:266: sch_tasks[sch_index].state = BLOCKED; 
      000700 90 02 10         [24] 1890 	mov	dptr,#_sch_index
      000703 E0               [24] 1891 	movx	a,@dptr
      000704 75 F0 34         [24] 1892 	mov	b,#0x34
      000707 A4               [48] 1893 	mul	ab
      000708 24 00            [12] 1894 	add	a,#_sch_tasks
      00070A F8               [12] 1895 	mov	r0,a
      00070B 74 00            [12] 1896 	mov	a,#(_sch_tasks >> 8)
      00070D 35 F0            [12] 1897 	addc	a,b
      00070F F9               [12] 1898 	mov	r1,a
      000710 74 33            [12] 1899 	mov	a,#0x33
      000712 28               [12] 1900 	add	a,r0
      000713 F5 82            [12] 1901 	mov	dpl,a
      000715 E4               [12] 1902 	clr	a
      000716 39               [12] 1903 	addc	a,r1
      000717 F5 83            [12] 1904 	mov	dph,a
      000719 74 02            [12] 1905 	mov	a,#0x02
      00071B F0               [24] 1906 	movx	@dptr,a
                                   1907 ;	sch8051.c:267: sem->waiting_list[sch_index] = 1; 
      00071C 90 02 10         [24] 1908 	mov	dptr,#_sch_index
      00071F E0               [24] 1909 	movx	a,@dptr
      000720 2A               [12] 1910 	add	a,r2
      000721 F8               [12] 1911 	mov	r0,a
      000722 E4               [12] 1912 	clr	a
      000723 3B               [12] 1913 	addc	a,r3
      000724 F9               [12] 1914 	mov	r1,a
      000725 8C 07            [24] 1915 	mov	ar7,r4
      000727 88 82            [24] 1916 	mov	dpl,r0
      000729 89 83            [24] 1917 	mov	dph,r1
      00072B 8F F0            [24] 1918 	mov	b,r7
      00072D 74 01            [12] 1919 	mov	a,#0x01
      00072F 12r00r00         [24] 1920 	lcall	__gptrput
                                   1921 ;	sch8051.c:268: sch_next();  
      000732 C0 04            [24] 1922 	push	ar4
      000734 C0 03            [24] 1923 	push	ar3
      000736 C0 02            [24] 1924 	push	ar2
      000738 12r04r0C         [24] 1925 	lcall	_sch_next
      00073B D0 02            [24] 1926 	pop	ar2
      00073D D0 03            [24] 1927 	pop	ar3
      00073F D0 04            [24] 1928 	pop	ar4
                                   1929 ;	sch8051.c:269: EA = 0;
                                   1930 ;	assignBit
      000741 C2 AF            [12] 1931 	clr	_EA
                                   1932 ;	sch8051.c:272: }
      000743 80 9B            [24] 1933 	sjmp	00105$
                                   1934 ;------------------------------------------------------------
                                   1935 ;Allocation info for local variables in function 'sch_semaphore_put'
                                   1936 ;------------------------------------------------------------
                                   1937 ;sem                       Allocated to registers r5 r6 r7 
                                   1938 ;i                         Allocated with name '_sch_semaphore_put_i_65536_76'
                                   1939 ;------------------------------------------------------------
                                   1940 ;	sch8051.c:275: Byte sch_semaphore_put(struct sch_semaphore_sync *sem) __critical{
                                   1941 ;	-----------------------------------------
                                   1942 ;	 function sch_semaphore_put
                                   1943 ;	-----------------------------------------
      000745                       1944 _sch_semaphore_put:
      000745 D3               [12] 1945 	setb	c
      000746 10 AF 01         [24] 1946 	jbc	ea,00129$
      000749 C3               [12] 1947 	clr	c
      00074A                       1948 00129$:
      00074A C0 D0            [24] 1949 	push	psw
                                   1950 ;	sch8051.c:277: if(sem->lock < sem->share){
      00074C AD 82            [24] 1951 	mov	r5,dpl
      00074E AE 83            [24] 1952 	mov	r6,dph
      000750 AF F0            [24] 1953 	mov	r7,b
      000752 12r00r00         [24] 1954 	lcall	__gptrget
      000755 FC               [12] 1955 	mov	r4,a
      000756 74 0B            [12] 1956 	mov	a,#0x0b
      000758 2D               [12] 1957 	add	a,r5
      000759 F9               [12] 1958 	mov	r1,a
      00075A E4               [12] 1959 	clr	a
      00075B 3E               [12] 1960 	addc	a,r6
      00075C FA               [12] 1961 	mov	r2,a
      00075D 8F 03            [24] 1962 	mov	ar3,r7
      00075F 89 82            [24] 1963 	mov	dpl,r1
      000761 8A 83            [24] 1964 	mov	dph,r2
      000763 8B F0            [24] 1965 	mov	b,r3
      000765 12r00r00         [24] 1966 	lcall	__gptrget
      000768 F9               [12] 1967 	mov	r1,a
      000769 C3               [12] 1968 	clr	c
      00076A EC               [12] 1969 	mov	a,r4
      00076B 99               [12] 1970 	subb	a,r1
      00076C 40 03            [24] 1971 	jc	00130$
      00076E 02r08r03         [24] 1972 	ljmp	00105$
      000771                       1973 00130$:
                                   1974 ;	sch8051.c:278: sem->lock++;
      000771 0C               [12] 1975 	inc	r4
      000772 8D 82            [24] 1976 	mov	dpl,r5
      000774 8E 83            [24] 1977 	mov	dph,r6
      000776 8F F0            [24] 1978 	mov	b,r7
      000778 EC               [12] 1979 	mov	a,r4
      000779 12r00r00         [24] 1980 	lcall	__gptrput
                                   1981 ;	sch8051.c:279: for(i = 0; i < sch_num_tasks; i++){
      00077C 0D               [12] 1982 	inc	r5
      00077D BD 00 01         [24] 1983 	cjne	r5,#0x00,00131$
      000780 0E               [12] 1984 	inc	r6
      000781                       1985 00131$:
      000781 8D 02            [24] 1986 	mov	ar2,r5
      000783 8E 03            [24] 1987 	mov	ar3,r6
      000785 8F 04            [24] 1988 	mov	ar4,r7
      000787 75*0C 00         [24] 1989 	mov	_sch_semaphore_put_i_65536_76,#0x00
      00078A                       1990 00108$:
      00078A 90 02 11         [24] 1991 	mov	dptr,#_sch_num_tasks
      00078D E0               [24] 1992 	movx	a,@dptr
      00078E F8               [12] 1993 	mov	r0,a
      00078F C3               [12] 1994 	clr	c
      000790 E5*0C            [12] 1995 	mov	a,_sch_semaphore_put_i_65536_76
      000792 98               [12] 1996 	subb	a,r0
      000793 50 69            [24] 1997 	jnc	00103$
                                   1998 ;	sch8051.c:280: if(sem->waiting_list[i] == 1){
      000795 C0 05            [24] 1999 	push	ar5
      000797 C0 06            [24] 2000 	push	ar6
      000799 C0 07            [24] 2001 	push	ar7
      00079B E5*0C            [12] 2002 	mov	a,_sch_semaphore_put_i_65536_76
      00079D 2A               [12] 2003 	add	a,r2
      00079E F8               [12] 2004 	mov	r0,a
      00079F E4               [12] 2005 	clr	a
      0007A0 3B               [12] 2006 	addc	a,r3
      0007A1 F9               [12] 2007 	mov	r1,a
      0007A2 8C 07            [24] 2008 	mov	ar7,r4
      0007A4 88 82            [24] 2009 	mov	dpl,r0
      0007A6 89 83            [24] 2010 	mov	dph,r1
      0007A8 8F F0            [24] 2011 	mov	b,r7
      0007AA 12r00r00         [24] 2012 	lcall	__gptrget
      0007AD F8               [12] 2013 	mov	r0,a
      0007AE B8 01 02         [24] 2014 	cjne	r0,#0x01,00133$
      0007B1 80 08            [24] 2015 	sjmp	00134$
      0007B3                       2016 00133$:
      0007B3 D0 07            [24] 2017 	pop	ar7
      0007B5 D0 06            [24] 2018 	pop	ar6
      0007B7 D0 05            [24] 2019 	pop	ar5
      0007B9 80 3F            [24] 2020 	sjmp	00109$
      0007BB                       2021 00134$:
      0007BB D0 07            [24] 2022 	pop	ar7
      0007BD D0 06            [24] 2023 	pop	ar6
      0007BF D0 05            [24] 2024 	pop	ar5
                                   2025 ;	sch8051.c:281: sem->waiting_list[i] = 0; 
      0007C1 C0 02            [24] 2026 	push	ar2
      0007C3 C0 03            [24] 2027 	push	ar3
      0007C5 C0 04            [24] 2028 	push	ar4
      0007C7 E5*0C            [12] 2029 	mov	a,_sch_semaphore_put_i_65536_76
      0007C9 2D               [12] 2030 	add	a,r5
      0007CA F8               [12] 2031 	mov	r0,a
      0007CB E4               [12] 2032 	clr	a
      0007CC 3E               [12] 2033 	addc	a,r6
      0007CD F9               [12] 2034 	mov	r1,a
      0007CE 8F 04            [24] 2035 	mov	ar4,r7
      0007D0 88 82            [24] 2036 	mov	dpl,r0
      0007D2 89 83            [24] 2037 	mov	dph,r1
      0007D4 8C F0            [24] 2038 	mov	b,r4
      0007D6 E4               [12] 2039 	clr	a
      0007D7 12r00r00         [24] 2040 	lcall	__gptrput
                                   2041 ;	sch8051.c:282: sch_tasks[i].state = WAIT; 	
      0007DA E5*0C            [12] 2042 	mov	a,_sch_semaphore_put_i_65536_76
      0007DC 75 F0 34         [24] 2043 	mov	b,#0x34
      0007DF A4               [48] 2044 	mul	ab
      0007E0 24 00            [12] 2045 	add	a,#_sch_tasks
      0007E2 FB               [12] 2046 	mov	r3,a
      0007E3 74 00            [12] 2047 	mov	a,#(_sch_tasks >> 8)
      0007E5 35 F0            [12] 2048 	addc	a,b
      0007E7 FC               [12] 2049 	mov	r4,a
      0007E8 74 33            [12] 2050 	mov	a,#0x33
      0007EA 2B               [12] 2051 	add	a,r3
      0007EB F5 82            [12] 2052 	mov	dpl,a
      0007ED E4               [12] 2053 	clr	a
      0007EE 3C               [12] 2054 	addc	a,r4
      0007EF F5 83            [12] 2055 	mov	dph,a
      0007F1 74 01            [12] 2056 	mov	a,#0x01
      0007F3 F0               [24] 2057 	movx	@dptr,a
                                   2058 ;	sch8051.c:287: return 0; 
      0007F4 D0 04            [24] 2059 	pop	ar4
      0007F6 D0 03            [24] 2060 	pop	ar3
      0007F8 D0 02            [24] 2061 	pop	ar2
                                   2062 ;	sch8051.c:282: sch_tasks[i].state = WAIT; 	
      0007FA                       2063 00109$:
                                   2064 ;	sch8051.c:279: for(i = 0; i < sch_num_tasks; i++){
      0007FA 05*0C            [12] 2065 	inc	_sch_semaphore_put_i_65536_76
      0007FC 80 8C            [24] 2066 	sjmp	00108$
      0007FE                       2067 00103$:
                                   2068 ;	sch8051.c:285: return 1; 
      0007FE 75 82 01         [24] 2069 	mov	dpl,#0x01
      000801 80 03            [24] 2070 	sjmp	00110$
      000803                       2071 00105$:
                                   2072 ;	sch8051.c:287: return 0; 
      000803 75 82 00         [24] 2073 	mov	dpl,#0x00
      000806                       2074 00110$:
                                   2075 ;	sch8051.c:289: }
      000806 D0 D0            [24] 2076 	pop	psw
      000808 92 AF            [24] 2077 	mov	ea,c
      00080A 22               [24] 2078 	ret
                                   2079 	.area CSEG    (CODE)
                                   2080 	.area CONST   (CODE)
                                   2081 	.area XINIT   (CODE)
                                   2082 	.area CABS    (ABS,CODE)
