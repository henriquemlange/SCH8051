                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module sch8051
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _sch_semaphore_start_PARM_2
                                     12 	.globl _sch_mutex_start_PARM_2
                                     13 	.globl _SPR0
                                     14 	.globl _SPR1
                                     15 	.globl _CPHA
                                     16 	.globl _CPOL
                                     17 	.globl _SPIM
                                     18 	.globl _SPE
                                     19 	.globl _WCOL
                                     20 	.globl _ISPI
                                     21 	.globl _D0EN
                                     22 	.globl _D0
                                     23 	.globl _D1EN
                                     24 	.globl _D1
                                     25 	.globl _I2CI
                                     26 	.globl _I2CTX
                                     27 	.globl _I2CRS
                                     28 	.globl _I2CM
                                     29 	.globl _MDI
                                     30 	.globl _MCO
                                     31 	.globl _MDE
                                     32 	.globl _MDO
                                     33 	.globl _ERR1
                                     34 	.globl _ERR0
                                     35 	.globl _NOXREF
                                     36 	.globl _CAL
                                     37 	.globl _RDY1
                                     38 	.globl _RDY0
                                     39 	.globl _WDWR
                                     40 	.globl _WDE
                                     41 	.globl _WDS
                                     42 	.globl _WDIR
                                     43 	.globl _PRE0
                                     44 	.globl _PRE1
                                     45 	.globl _PRE2
                                     46 	.globl _PRE3
                                     47 	.globl _CAP2
                                     48 	.globl _CNT2
                                     49 	.globl _TR2
                                     50 	.globl _EXEN2
                                     51 	.globl _TCLK
                                     52 	.globl _RCLK
                                     53 	.globl _EXF2
                                     54 	.globl _TF2
                                     55 	.globl _T2
                                     56 	.globl _T2EX
                                     57 	.globl _RI
                                     58 	.globl _TI
                                     59 	.globl _RB8
                                     60 	.globl _TB8
                                     61 	.globl _REN
                                     62 	.globl _SM2
                                     63 	.globl _SM1
                                     64 	.globl _SM0
                                     65 	.globl _RXD
                                     66 	.globl _TXD
                                     67 	.globl _INT0
                                     68 	.globl _INT1
                                     69 	.globl _T0
                                     70 	.globl _T1
                                     71 	.globl _WR
                                     72 	.globl _RD
                                     73 	.globl _PX0
                                     74 	.globl _PT0
                                     75 	.globl _PX1
                                     76 	.globl _PT1
                                     77 	.globl _PS
                                     78 	.globl _PT2
                                     79 	.globl _PADC
                                     80 	.globl _EX0
                                     81 	.globl _ET0
                                     82 	.globl _EX1
                                     83 	.globl _ET1
                                     84 	.globl _ES
                                     85 	.globl _ET2
                                     86 	.globl _EADC
                                     87 	.globl _EA
                                     88 	.globl _IT0
                                     89 	.globl _IE0
                                     90 	.globl _IT1
                                     91 	.globl _IE1
                                     92 	.globl _TR0
                                     93 	.globl _TF0
                                     94 	.globl _TR1
                                     95 	.globl _TF1
                                     96 	.globl _P
                                     97 	.globl _F1
                                     98 	.globl _OV
                                     99 	.globl _RS0
                                    100 	.globl _RS1
                                    101 	.globl _F0
                                    102 	.globl _AC
                                    103 	.globl _CY
                                    104 	.globl _CFG847
                                    105 	.globl _EWAIT
                                    106 	.globl _SPICON
                                    107 	.globl _SPIDAT
                                    108 	.globl _I2CADD1
                                    109 	.globl _B
                                    110 	.globl _GN0H
                                    111 	.globl _GN0M
                                    112 	.globl _GN0L
                                    113 	.globl _DCON
                                    114 	.globl _I2CCON
                                    115 	.globl _ADC0CON2
                                    116 	.globl _OF0H
                                    117 	.globl _OF0M
                                    118 	.globl _OF0L
                                    119 	.globl _ACC
                                    120 	.globl _PSMCON
                                    121 	.globl _ADC0H
                                    122 	.globl _ADC0M
                                    123 	.globl _ADC0L
                                    124 	.globl _ADCSTAT
                                    125 	.globl _PLLCON
                                    126 	.globl _ICON
                                    127 	.globl _SF
                                    128 	.globl _ADC0CON1
                                    129 	.globl _ADCMODE
                                    130 	.globl _PSW
                                    131 	.globl _TH2
                                    132 	.globl _TL2
                                    133 	.globl _RCAP2H
                                    134 	.globl _RCAP2L
                                    135 	.globl _T2CON
                                    136 	.globl _EADRH
                                    137 	.globl _EADRL
                                    138 	.globl _CHIPID
                                    139 	.globl _WDCON
                                    140 	.globl _EDATA4
                                    141 	.globl _EDATA3
                                    142 	.globl _EDATA2
                                    143 	.globl _EDATA1
                                    144 	.globl _ECON
                                    145 	.globl _IP
                                    146 	.globl _SPH
                                    147 	.globl _PWM1H
                                    148 	.globl _PWM1L
                                    149 	.globl _PWMOH
                                    150 	.globl _PWM0L
                                    151 	.globl _P3
                                    152 	.globl _CFG848
                                    153 	.globl _PWMCON
                                    154 	.globl _IEIP2
                                    155 	.globl _IE
                                    156 	.globl _DPCON
                                    157 	.globl _INTVAL
                                    158 	.globl _HOUR
                                    159 	.globl _MIN
                                    160 	.globl _SEC
                                    161 	.globl _HTSEC
                                    162 	.globl _TIMECON
                                    163 	.globl _P2
                                    164 	.globl _T3CON
                                    165 	.globl _T3FD
                                    166 	.globl _I2CADD
                                    167 	.globl _I2CDAT
                                    168 	.globl _SBUF
                                    169 	.globl _SCON
                                    170 	.globl _P1
                                    171 	.globl _TH1
                                    172 	.globl _TH0
                                    173 	.globl _TL1
                                    174 	.globl _TL0
                                    175 	.globl _TMOD
                                    176 	.globl _TCON
                                    177 	.globl _PCON
                                    178 	.globl _DPP
                                    179 	.globl _DPH
                                    180 	.globl _DPL
                                    181 	.globl _SP
                                    182 	.globl _P0
                                    183 	.globl _sch_num_tasks
                                    184 	.globl _sch_index
                                    185 	.globl _sch_time
                                    186 	.globl _sch_tasks
                                    187 	.globl _sch_schedule
                                    188 	.globl _sch_dispatch
                                    189 	.globl _sch_init
                                    190 	.globl _sch_add_task
                                    191 	.globl _sch_start
                                    192 	.globl _sch_next
                                    193 	.globl _sch_mutex_start
                                    194 	.globl _sch_mutex_lock
                                    195 	.globl _sch_mutex_trylock
                                    196 	.globl _sch_mutex_release
                                    197 	.globl _sch_semaphore_start
                                    198 	.globl _sch_semaphore_tryget
                                    199 	.globl _sch_semaphore_get
                                    200 	.globl _sch_semaphore_put
                                    201 ;--------------------------------------------------------
                                    202 ; special function registers
                                    203 ;--------------------------------------------------------
                                    204 	.area RSEG    (ABS,DATA)
      000000                        205 	.org 0x0000
                           000080   206 _P0	=	0x0080
                           000081   207 _SP	=	0x0081
                           000082   208 _DPL	=	0x0082
                           000083   209 _DPH	=	0x0083
                           000084   210 _DPP	=	0x0084
                           000087   211 _PCON	=	0x0087
                           000088   212 _TCON	=	0x0088
                           000089   213 _TMOD	=	0x0089
                           00008A   214 _TL0	=	0x008a
                           00008B   215 _TL1	=	0x008b
                           00008C   216 _TH0	=	0x008c
                           00008D   217 _TH1	=	0x008d
                           000090   218 _P1	=	0x0090
                           000098   219 _SCON	=	0x0098
                           000099   220 _SBUF	=	0x0099
                           00009A   221 _I2CDAT	=	0x009a
                           00009B   222 _I2CADD	=	0x009b
                           00009D   223 _T3FD	=	0x009d
                           00009E   224 _T3CON	=	0x009e
                           0000A0   225 _P2	=	0x00a0
                           0000A1   226 _TIMECON	=	0x00a1
                           0000A2   227 _HTSEC	=	0x00a2
                           0000A3   228 _SEC	=	0x00a3
                           0000A4   229 _MIN	=	0x00a4
                           0000A5   230 _HOUR	=	0x00a5
                           0000A6   231 _INTVAL	=	0x00a6
                           0000A7   232 _DPCON	=	0x00a7
                           0000A8   233 _IE	=	0x00a8
                           0000A9   234 _IEIP2	=	0x00a9
                           0000AE   235 _PWMCON	=	0x00ae
                           0000AF   236 _CFG848	=	0x00af
                           0000B0   237 _P3	=	0x00b0
                           0000B1   238 _PWM0L	=	0x00b1
                           0000B2   239 _PWMOH	=	0x00b2
                           0000B3   240 _PWM1L	=	0x00b3
                           0000B4   241 _PWM1H	=	0x00b4
                           0000B7   242 _SPH	=	0x00b7
                           0000B8   243 _IP	=	0x00b8
                           0000B9   244 _ECON	=	0x00b9
                           0000BC   245 _EDATA1	=	0x00bc
                           0000BD   246 _EDATA2	=	0x00bd
                           0000BE   247 _EDATA3	=	0x00be
                           0000BF   248 _EDATA4	=	0x00bf
                           0000C0   249 _WDCON	=	0x00c0
                           0000C2   250 _CHIPID	=	0x00c2
                           0000C6   251 _EADRL	=	0x00c6
                           0000C7   252 _EADRH	=	0x00c7
                           0000C8   253 _T2CON	=	0x00c8
                           0000CA   254 _RCAP2L	=	0x00ca
                           0000CB   255 _RCAP2H	=	0x00cb
                           0000CC   256 _TL2	=	0x00cc
                           0000CD   257 _TH2	=	0x00cd
                           0000D0   258 _PSW	=	0x00d0
                           0000D1   259 _ADCMODE	=	0x00d1
                           0000D2   260 _ADC0CON1	=	0x00d2
                           0000D4   261 _SF	=	0x00d4
                           0000D5   262 _ICON	=	0x00d5
                           0000D7   263 _PLLCON	=	0x00d7
                           0000D8   264 _ADCSTAT	=	0x00d8
                           0000D9   265 _ADC0L	=	0x00d9
                           0000DA   266 _ADC0M	=	0x00da
                           0000DB   267 _ADC0H	=	0x00db
                           0000DF   268 _PSMCON	=	0x00df
                           0000E0   269 _ACC	=	0x00e0
                           0000E1   270 _OF0L	=	0x00e1
                           0000E2   271 _OF0M	=	0x00e2
                           0000E3   272 _OF0H	=	0x00e3
                           0000E6   273 _ADC0CON2	=	0x00e6
                           0000E8   274 _I2CCON	=	0x00e8
                           0000E8   275 _DCON	=	0x00e8
                           0000E9   276 _GN0L	=	0x00e9
                           0000EA   277 _GN0M	=	0x00ea
                           0000EB   278 _GN0H	=	0x00eb
                           0000F0   279 _B	=	0x00f0
                           0000F2   280 _I2CADD1	=	0x00f2
                           0000F7   281 _SPIDAT	=	0x00f7
                           0000F8   282 _SPICON	=	0x00f8
                           00009F   283 _EWAIT	=	0x009f
                           0000AF   284 _CFG847	=	0x00af
                                    285 ;--------------------------------------------------------
                                    286 ; special function bits
                                    287 ;--------------------------------------------------------
                                    288 	.area RSEG    (ABS,DATA)
      000000                        289 	.org 0x0000
                           0000D7   290 _CY	=	0x00d7
                           0000D6   291 _AC	=	0x00d6
                           0000D5   292 _F0	=	0x00d5
                           0000D4   293 _RS1	=	0x00d4
                           0000D3   294 _RS0	=	0x00d3
                           0000D2   295 _OV	=	0x00d2
                           0000D1   296 _F1	=	0x00d1
                           0000D0   297 _P	=	0x00d0
                           00008F   298 _TF1	=	0x008f
                           00008E   299 _TR1	=	0x008e
                           00008D   300 _TF0	=	0x008d
                           00008C   301 _TR0	=	0x008c
                           00008B   302 _IE1	=	0x008b
                           00008A   303 _IT1	=	0x008a
                           000089   304 _IE0	=	0x0089
                           000088   305 _IT0	=	0x0088
                           0000AF   306 _EA	=	0x00af
                           0000AE   307 _EADC	=	0x00ae
                           0000AD   308 _ET2	=	0x00ad
                           0000AC   309 _ES	=	0x00ac
                           0000AB   310 _ET1	=	0x00ab
                           0000AA   311 _EX1	=	0x00aa
                           0000A9   312 _ET0	=	0x00a9
                           0000A8   313 _EX0	=	0x00a8
                           0000BE   314 _PADC	=	0x00be
                           0000BD   315 _PT2	=	0x00bd
                           0000BC   316 _PS	=	0x00bc
                           0000BB   317 _PT1	=	0x00bb
                           0000BA   318 _PX1	=	0x00ba
                           0000B9   319 _PT0	=	0x00b9
                           0000B8   320 _PX0	=	0x00b8
                           0000B7   321 _RD	=	0x00b7
                           0000B6   322 _WR	=	0x00b6
                           0000B5   323 _T1	=	0x00b5
                           0000B4   324 _T0	=	0x00b4
                           0000B3   325 _INT1	=	0x00b3
                           0000B2   326 _INT0	=	0x00b2
                           0000B1   327 _TXD	=	0x00b1
                           0000B0   328 _RXD	=	0x00b0
                           00009F   329 _SM0	=	0x009f
                           00009E   330 _SM1	=	0x009e
                           00009D   331 _SM2	=	0x009d
                           00009C   332 _REN	=	0x009c
                           00009B   333 _TB8	=	0x009b
                           00009A   334 _RB8	=	0x009a
                           000099   335 _TI	=	0x0099
                           000098   336 _RI	=	0x0098
                           000091   337 _T2EX	=	0x0091
                           000090   338 _T2	=	0x0090
                           0000CF   339 _TF2	=	0x00cf
                           0000CE   340 _EXF2	=	0x00ce
                           0000CD   341 _RCLK	=	0x00cd
                           0000CC   342 _TCLK	=	0x00cc
                           0000CB   343 _EXEN2	=	0x00cb
                           0000CA   344 _TR2	=	0x00ca
                           0000C9   345 _CNT2	=	0x00c9
                           0000C8   346 _CAP2	=	0x00c8
                           0000C7   347 _PRE3	=	0x00c7
                           0000C6   348 _PRE2	=	0x00c6
                           0000C5   349 _PRE1	=	0x00c5
                           0000C4   350 _PRE0	=	0x00c4
                           0000C3   351 _WDIR	=	0x00c3
                           0000C2   352 _WDS	=	0x00c2
                           0000C1   353 _WDE	=	0x00c1
                           0000C0   354 _WDWR	=	0x00c0
                           0000DF   355 _RDY0	=	0x00df
                           0000DE   356 _RDY1	=	0x00de
                           0000DD   357 _CAL	=	0x00dd
                           0000DC   358 _NOXREF	=	0x00dc
                           0000DB   359 _ERR0	=	0x00db
                           0000DA   360 _ERR1	=	0x00da
                           0000EF   361 _MDO	=	0x00ef
                           0000EE   362 _MDE	=	0x00ee
                           0000ED   363 _MCO	=	0x00ed
                           0000EC   364 _MDI	=	0x00ec
                           0000EB   365 _I2CM	=	0x00eb
                           0000EA   366 _I2CRS	=	0x00ea
                           0000E9   367 _I2CTX	=	0x00e9
                           0000E8   368 _I2CI	=	0x00e8
                           0000EF   369 _D1	=	0x00ef
                           0000EE   370 _D1EN	=	0x00ee
                           0000ED   371 _D0	=	0x00ed
                           0000EB   372 _D0EN	=	0x00eb
                           0000FF   373 _ISPI	=	0x00ff
                           0000FE   374 _WCOL	=	0x00fe
                           0000FD   375 _SPE	=	0x00fd
                           0000FC   376 _SPIM	=	0x00fc
                           0000FB   377 _CPOL	=	0x00fb
                           0000FA   378 _CPHA	=	0x00fa
                           0000F9   379 _SPR1	=	0x00f9
                           0000F8   380 _SPR0	=	0x00f8
                                    381 ;--------------------------------------------------------
                                    382 ; overlayable register banks
                                    383 ;--------------------------------------------------------
                                    384 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        385 	.ds 8
                                    386 ;--------------------------------------------------------
                                    387 ; overlayable bit register bank
                                    388 ;--------------------------------------------------------
                                    389 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        390 bits:
      000000                        391 	.ds 1
                           008000   392 	b0 = bits[0]
                           008100   393 	b1 = bits[1]
                           008200   394 	b2 = bits[2]
                           008300   395 	b3 = bits[3]
                           008400   396 	b4 = bits[4]
                           008500   397 	b5 = bits[5]
                           008600   398 	b6 = bits[6]
                           008700   399 	b7 = bits[7]
                                    400 ;--------------------------------------------------------
                                    401 ; internal ram data
                                    402 ;--------------------------------------------------------
                                    403 	.area DSEG    (DATA)
                                    404 ;--------------------------------------------------------
                                    405 ; overlayable items in internal ram 
                                    406 ;--------------------------------------------------------
                                    407 	.area	OSEG    (OVR,DATA)
                                    408 	.area	OSEG    (OVR,DATA)
                                    409 	.area	OSEG    (OVR,DATA)
      000000                        410 _sch_mutex_start_PARM_2:
      000000                        411 	.ds 1
                                    412 	.area	OSEG    (OVR,DATA)
                                    413 	.area	OSEG    (OVR,DATA)
      000000                        414 _sch_mutex_release_i_65536_49:
      000000                        415 	.ds 1
      000001                        416 _sch_mutex_release_sloc0_1_0:
      000001                        417 	.ds 3
                                    418 	.area	OSEG    (OVR,DATA)
      000000                        419 _sch_semaphore_start_PARM_2:
      000000                        420 	.ds 1
                                    421 	.area	OSEG    (OVR,DATA)
                                    422 	.area	OSEG    (OVR,DATA)
      000000                        423 _sch_semaphore_put_i_65536_69:
      000000                        424 	.ds 1
                                    425 ;--------------------------------------------------------
                                    426 ; indirectly addressable internal ram data
                                    427 ;--------------------------------------------------------
                                    428 	.area ISEG    (DATA)
                                    429 ;--------------------------------------------------------
                                    430 ; absolute internal ram data
                                    431 ;--------------------------------------------------------
                                    432 	.area IABS    (ABS,DATA)
                                    433 	.area IABS    (ABS,DATA)
                                    434 ;--------------------------------------------------------
                                    435 ; bit data
                                    436 ;--------------------------------------------------------
                                    437 	.area BSEG    (BIT)
                                    438 ;--------------------------------------------------------
                                    439 ; paged external ram data
                                    440 ;--------------------------------------------------------
                                    441 	.area PSEG    (PAG,XDATA)
                                    442 ;--------------------------------------------------------
                                    443 ; external ram data
                                    444 ;--------------------------------------------------------
                                    445 	.area XSEG    (XDATA)
                           000000   446 _sch_tasks	=	0x0000
                           000208   447 _sch_time	=	0x0208
                           000210   448 _sch_index	=	0x0210
                           000211   449 _sch_num_tasks	=	0x0211
                                    450 ;--------------------------------------------------------
                                    451 ; absolute external ram data
                                    452 ;--------------------------------------------------------
                                    453 	.area XABS    (ABS,XDATA)
                                    454 ;--------------------------------------------------------
                                    455 ; external initialized ram data
                                    456 ;--------------------------------------------------------
                                    457 	.area XISEG   (XDATA)
                                    458 	.area HOME    (CODE)
                                    459 	.area GSINIT0 (CODE)
                                    460 	.area GSINIT1 (CODE)
                                    461 	.area GSINIT2 (CODE)
                                    462 	.area GSINIT3 (CODE)
                                    463 	.area GSINIT4 (CODE)
                                    464 	.area GSINIT5 (CODE)
                                    465 	.area GSINIT  (CODE)
                                    466 	.area GSFINAL (CODE)
                                    467 	.area CSEG    (CODE)
                                    468 ;--------------------------------------------------------
                                    469 ; global & static initialisations
                                    470 ;--------------------------------------------------------
                                    471 	.area HOME    (CODE)
                                    472 	.area GSINIT  (CODE)
                                    473 	.area GSFINAL (CODE)
                                    474 	.area GSINIT  (CODE)
                                    475 ;--------------------------------------------------------
                                    476 ; Home
                                    477 ;--------------------------------------------------------
                                    478 	.area HOME    (CODE)
                                    479 	.area HOME    (CODE)
                                    480 ;--------------------------------------------------------
                                    481 ; code
                                    482 ;--------------------------------------------------------
                                    483 	.area CSEG    (CODE)
                                    484 ;------------------------------------------------------------
                                    485 ;Allocation info for local variables in function 'sch_schedule'
                                    486 ;------------------------------------------------------------
                                    487 ;i                         Allocated to registers r6 
                                    488 ;------------------------------------------------------------
                                    489 ;	sch8051.c:81: void sch_schedule(){
                                    490 ;	-----------------------------------------
                                    491 ;	 function sch_schedule
                                    492 ;	-----------------------------------------
      000000                        493 _sch_schedule:
                           000007   494 	ar7 = 0x07
                           000006   495 	ar6 = 0x06
                           000005   496 	ar5 = 0x05
                           000004   497 	ar4 = 0x04
                           000003   498 	ar3 = 0x03
                           000002   499 	ar2 = 0x02
                           000001   500 	ar1 = 0x01
                           000000   501 	ar0 = 0x00
                                    502 ;	sch8051.c:84: i = (sch_index + 1)%sch_num_tasks; 
      000000 90 02 10         [24]  503 	mov	dptr,#_sch_index
      000003 E0               [24]  504 	movx	a,@dptr
      000004 FF               [12]  505 	mov	r7,a
      000005 7E 00            [12]  506 	mov	r6,#0x00
      000007 0F               [12]  507 	inc	r7
      000008 BF 00 01         [24]  508 	cjne	r7,#0x00,00120$
      00000B 0E               [12]  509 	inc	r6
      00000C                        510 00120$:
      00000C 90 02 11         [24]  511 	mov	dptr,#_sch_num_tasks
      00000F E0               [24]  512 	movx	a,@dptr
      000010 FD               [12]  513 	mov	r5,a
      000011 8D*00            [24]  514 	mov	__modsint_PARM_2,r5
      000013 75*01 00         [24]  515 	mov	(__modsint_PARM_2 + 1),#0x00
      000016 8F 82            [24]  516 	mov	dpl,r7
      000018 8E 83            [24]  517 	mov	dph,r6
      00001A 12r00r00         [24]  518 	lcall	__modsint
      00001D AE 82            [24]  519 	mov	r6,dpl
      00001F AF 83            [24]  520 	mov	r7,dph
                                    521 ;	sch8051.c:86: while(i != sch_index){
      000021                        522 00103$:
      000021 90 02 10         [24]  523 	mov	dptr,#_sch_index
      000024 E0               [24]  524 	movx	a,@dptr
      000025 FF               [12]  525 	mov	r7,a
      000026 EE               [12]  526 	mov	a,r6
      000027 B5 07 02         [24]  527 	cjne	a,ar7,00121$
      00002A 80 3F            [24]  528 	sjmp	00105$
      00002C                        529 00121$:
                                    530 ;	sch8051.c:87: if(sch_tasks[i].state == WAIT){
      00002C EE               [12]  531 	mov	a,r6
      00002D 75 F0 34         [24]  532 	mov	b,#0x34
      000030 A4               [48]  533 	mul	ab
      000031 24 00            [12]  534 	add	a,#_sch_tasks
      000033 FD               [12]  535 	mov	r5,a
      000034 74 00            [12]  536 	mov	a,#(_sch_tasks >> 8)
      000036 35 F0            [12]  537 	addc	a,b
      000038 FF               [12]  538 	mov	r7,a
      000039 74 33            [12]  539 	mov	a,#0x33
      00003B 2D               [12]  540 	add	a,r5
      00003C F5 82            [12]  541 	mov	dpl,a
      00003E E4               [12]  542 	clr	a
      00003F 3F               [12]  543 	addc	a,r7
      000040 F5 83            [12]  544 	mov	dph,a
      000042 E0               [24]  545 	movx	a,@dptr
      000043 FF               [12]  546 	mov	r7,a
      000044 BF 01 02         [24]  547 	cjne	r7,#0x01,00122$
      000047 80 22            [24]  548 	sjmp	00105$
      000049                        549 00122$:
                                    550 ;	sch8051.c:90: i = (i + 1)%sch_num_tasks; 
      000049 8E 05            [24]  551 	mov	ar5,r6
      00004B 7F 00            [12]  552 	mov	r7,#0x00
      00004D 0D               [12]  553 	inc	r5
      00004E BD 00 01         [24]  554 	cjne	r5,#0x00,00123$
      000051 0F               [12]  555 	inc	r7
      000052                        556 00123$:
      000052 90 02 11         [24]  557 	mov	dptr,#_sch_num_tasks
      000055 E0               [24]  558 	movx	a,@dptr
      000056 FC               [12]  559 	mov	r4,a
      000057 8C*00            [24]  560 	mov	__modsint_PARM_2,r4
      000059 75*01 00         [24]  561 	mov	(__modsint_PARM_2 + 1),#0x00
      00005C 8D 82            [24]  562 	mov	dpl,r5
      00005E 8F 83            [24]  563 	mov	dph,r7
      000060 12r00r00         [24]  564 	lcall	__modsint
      000063 AD 82            [24]  565 	mov	r5,dpl
      000065 AF 83            [24]  566 	mov	r7,dph
      000067 8D 06            [24]  567 	mov	ar6,r5
      000069 80 B6            [24]  568 	sjmp	00103$
      00006B                        569 00105$:
                                    570 ;	sch8051.c:93: sch_tasks[sch_index].state = WAIT; 
      00006B 90 02 10         [24]  571 	mov	dptr,#_sch_index
      00006E E0               [24]  572 	movx	a,@dptr
      00006F 75 F0 34         [24]  573 	mov	b,#0x34
      000072 A4               [48]  574 	mul	ab
      000073 24 00            [12]  575 	add	a,#_sch_tasks
      000075 FD               [12]  576 	mov	r5,a
      000076 74 00            [12]  577 	mov	a,#(_sch_tasks >> 8)
      000078 35 F0            [12]  578 	addc	a,b
      00007A FF               [12]  579 	mov	r7,a
      00007B 74 33            [12]  580 	mov	a,#0x33
      00007D 2D               [12]  581 	add	a,r5
      00007E F5 82            [12]  582 	mov	dpl,a
      000080 E4               [12]  583 	clr	a
      000081 3F               [12]  584 	addc	a,r7
      000082 F5 83            [12]  585 	mov	dph,a
      000084 74 01            [12]  586 	mov	a,#0x01
      000086 F0               [24]  587 	movx	@dptr,a
                                    588 ;	sch8051.c:94: sch_tasks[i].state = READY; 
      000087 EE               [12]  589 	mov	a,r6
      000088 75 F0 34         [24]  590 	mov	b,#0x34
      00008B A4               [48]  591 	mul	ab
      00008C 24 00            [12]  592 	add	a,#_sch_tasks
      00008E FD               [12]  593 	mov	r5,a
      00008F 74 00            [12]  594 	mov	a,#(_sch_tasks >> 8)
      000091 35 F0            [12]  595 	addc	a,b
      000093 FF               [12]  596 	mov	r7,a
      000094 74 33            [12]  597 	mov	a,#0x33
      000096 2D               [12]  598 	add	a,r5
      000097 F5 82            [12]  599 	mov	dpl,a
      000099 E4               [12]  600 	clr	a
      00009A 3F               [12]  601 	addc	a,r7
      00009B F5 83            [12]  602 	mov	dph,a
      00009D E4               [12]  603 	clr	a
      00009E F0               [24]  604 	movx	@dptr,a
                                    605 ;	sch8051.c:95: sch_index = i; 
      00009F 90 02 10         [24]  606 	mov	dptr,#_sch_index
      0000A2 EE               [12]  607 	mov	a,r6
      0000A3 F0               [24]  608 	movx	@dptr,a
                                    609 ;	sch8051.c:96: }
      0000A4 22               [24]  610 	ret
                                    611 ;------------------------------------------------------------
                                    612 ;Allocation info for local variables in function 'sch_dispatch'
                                    613 ;------------------------------------------------------------
                                    614 ;ram                       Allocated to registers r1 
                                    615 ;xram                      Allocated to registers 
                                    616 ;ram                       Allocated to registers r1 
                                    617 ;xram                      Allocated to registers r6 r7 
                                    618 ;------------------------------------------------------------
                                    619 ;	sch8051.c:111: void sch_dispatch() __interrupt(5){
                                    620 ;	-----------------------------------------
                                    621 ;	 function sch_dispatch
                                    622 ;	-----------------------------------------
      0000A5                        623 _sch_dispatch:
      0000A5 C0*00            [24]  624 	push	bits
      0000A7 C0 E0            [24]  625 	push	acc
      0000A9 C0 F0            [24]  626 	push	b
      0000AB C0 82            [24]  627 	push	dpl
      0000AD C0 83            [24]  628 	push	dph
      0000AF C0 07            [24]  629 	push	(0+7)
      0000B1 C0 06            [24]  630 	push	(0+6)
      0000B3 C0 05            [24]  631 	push	(0+5)
      0000B5 C0 04            [24]  632 	push	(0+4)
      0000B7 C0 03            [24]  633 	push	(0+3)
      0000B9 C0 02            [24]  634 	push	(0+2)
      0000BB C0 01            [24]  635 	push	(0+1)
      0000BD C0 00            [24]  636 	push	(0+0)
      0000BF C0 D0            [24]  637 	push	psw
      0000C1 75 D0 00         [24]  638 	mov	psw,#0x00
                                    639 ;	sch8051.c:112: EA = 0; 
                                    640 ;	assignBit
      0000C4 C2 AF            [12]  641 	clr	_EA
                                    642 ;	sch8051.c:113: TF2 = 0; 
                                    643 ;	assignBit
      0000C6 C2 CF            [12]  644 	clr	_TF2
                                    645 ;	sch8051.c:114: sch_time--;
      0000C8 90 02 08         [24]  646 	mov	dptr,#_sch_time
      0000CB E0               [24]  647 	movx	a,@dptr
      0000CC FE               [12]  648 	mov	r6,a
      0000CD A3               [24]  649 	inc	dptr
      0000CE E0               [24]  650 	movx	a,@dptr
      0000CF FF               [12]  651 	mov	r7,a
      0000D0 1E               [12]  652 	dec	r6
      0000D1 BE FF 01         [24]  653 	cjne	r6,#0xff,00133$
      0000D4 1F               [12]  654 	dec	r7
      0000D5                        655 00133$:
      0000D5 90 02 08         [24]  656 	mov	dptr,#_sch_time
      0000D8 EE               [12]  657 	mov	a,r6
      0000D9 F0               [24]  658 	movx	@dptr,a
      0000DA EF               [12]  659 	mov	a,r7
      0000DB A3               [24]  660 	inc	dptr
      0000DC F0               [24]  661 	movx	@dptr,a
                                    662 ;	sch8051.c:115: if(sch_time == 0){
      0000DD 90 02 08         [24]  663 	mov	dptr,#_sch_time
      0000E0 E0               [24]  664 	movx	a,@dptr
      0000E1 FE               [12]  665 	mov	r6,a
      0000E2 A3               [24]  666 	inc	dptr
      0000E3 E0               [24]  667 	movx	a,@dptr
      0000E4 FF               [12]  668 	mov	r7,a
      0000E5 4E               [12]  669 	orl	a,r6
      0000E6 60 03            [24]  670 	jz	00134$
      0000E8 02r01r83         [24]  671 	ljmp	00108$
      0000EB                        672 00134$:
                                    673 ;	sch8051.c:116: sch_time = SCH_TIMEOUT; 
      0000EB 90 02 08         [24]  674 	mov	dptr,#_sch_time
      0000EE 74 0F            [12]  675 	mov	a,#0x0f
      0000F0 F0               [24]  676 	movx	@dptr,a
      0000F1 E4               [12]  677 	clr	a
      0000F2 A3               [24]  678 	inc	dptr
      0000F3 F0               [24]  679 	movx	@dptr,a
                                    680 ;	sch8051.c:117: TO_XRAM 
      0000F4 90 02 10         [24]  681 	mov	dptr,#_sch_index
      0000F7 E0               [24]  682 	movx	a,@dptr
      0000F8 75 F0 34         [24]  683 	mov	b,#0x34
      0000FB A4               [48]  684 	mul	ab
      0000FC 24 00            [12]  685 	add	a,#_sch_tasks
      0000FE FE               [12]  686 	mov	r6,a
      0000FF 74 00            [12]  687 	mov	a,#(_sch_tasks >> 8)
      000101 35 F0            [12]  688 	addc	a,b
      000103 FF               [12]  689 	mov	r7,a
      000104 E0               [24]  690 	movx	a,@dptr
      000105 75 F0 34         [24]  691 	mov	b,#0x34
      000108 A4               [48]  692 	mul	ab
      000109 24 00            [12]  693 	add	a,#_sch_tasks
      00010B FC               [12]  694 	mov	r4,a
      00010C 74 00            [12]  695 	mov	a,#(_sch_tasks >> 8)
      00010E 35 F0            [12]  696 	addc	a,b
      000110 FD               [12]  697 	mov	r5,a
      000111 74 32            [12]  698 	mov	a,#0x32
      000113 2C               [12]  699 	add	a,r4
      000114 F5 82            [12]  700 	mov	dpl,a
      000116 E4               [12]  701 	clr	a
      000117 3D               [12]  702 	addc	a,r5
      000118 F5 83            [12]  703 	mov	dph,a
      00011A E5 81            [12]  704 	mov	a,_SP
      00011C 24 92            [12]  705 	add	a,#0x92
      00011E FD               [12]  706 	mov	r5,a
      00011F F0               [24]  707 	movx	@dptr,a
      000120 79 6E            [12]  708 	mov	r1,#0x6e
      000122                        709 00101$:
      000122 89 05            [24]  710 	mov	ar5,r1
      000124 C3               [12]  711 	clr	c
      000125 E5 81            [12]  712 	mov	a,_SP
      000127 9D               [12]  713 	subb	a,r5
      000128 40 10            [24]  714 	jc	00103$
      00012A 87 05            [24]  715 	mov	ar5,@r1
      00012C 09               [12]  716 	inc	r1
      00012D 8E 82            [24]  717 	mov	dpl,r6
      00012F 8F 83            [24]  718 	mov	dph,r7
      000131 ED               [12]  719 	mov	a,r5
      000132 F0               [24]  720 	movx	@dptr,a
      000133 A3               [24]  721 	inc	dptr
      000134 AE 82            [24]  722 	mov	r6,dpl
      000136 AF 83            [24]  723 	mov	r7,dph
      000138 80 E8            [24]  724 	sjmp	00101$
      00013A                        725 00103$:
                                    726 ;	sch8051.c:118: sch_schedule(); 
      00013A 12r00r00         [24]  727 	lcall	_sch_schedule
                                    728 ;	sch8051.c:119: TO_STACK
      00013D 90 02 10         [24]  729 	mov	dptr,#_sch_index
      000140 E0               [24]  730 	movx	a,@dptr
      000141 75 F0 34         [24]  731 	mov	b,#0x34
      000144 A4               [48]  732 	mul	ab
      000145 24 00            [12]  733 	add	a,#_sch_tasks
      000147 FE               [12]  734 	mov	r6,a
      000148 74 00            [12]  735 	mov	a,#(_sch_tasks >> 8)
      00014A 35 F0            [12]  736 	addc	a,b
      00014C FF               [12]  737 	mov	r7,a
      00014D E0               [24]  738 	movx	a,@dptr
      00014E 75 F0 34         [24]  739 	mov	b,#0x34
      000151 A4               [48]  740 	mul	ab
      000152 24 00            [12]  741 	add	a,#_sch_tasks
      000154 FC               [12]  742 	mov	r4,a
      000155 74 00            [12]  743 	mov	a,#(_sch_tasks >> 8)
      000157 35 F0            [12]  744 	addc	a,b
      000159 FD               [12]  745 	mov	r5,a
      00015A 74 32            [12]  746 	mov	a,#0x32
      00015C 2C               [12]  747 	add	a,r4
      00015D F5 82            [12]  748 	mov	dpl,a
      00015F E4               [12]  749 	clr	a
      000160 3D               [12]  750 	addc	a,r5
      000161 F5 83            [12]  751 	mov	dph,a
      000163 E0               [24]  752 	movx	a,@dptr
      000164 FD               [12]  753 	mov	r5,a
      000165 24 6E            [12]  754 	add	a,#0x6e
      000167 F5 81            [12]  755 	mov	_SP,a
      000169 79 6E            [12]  756 	mov	r1,#0x6e
      00016B                        757 00104$:
      00016B 89 05            [24]  758 	mov	ar5,r1
      00016D C3               [12]  759 	clr	c
      00016E E5 81            [12]  760 	mov	a,_SP
      000170 9D               [12]  761 	subb	a,r5
      000171 40 10            [24]  762 	jc	00108$
      000173 8E 82            [24]  763 	mov	dpl,r6
      000175 8F 83            [24]  764 	mov	dph,r7
      000177 E0               [24]  765 	movx	a,@dptr
      000178 FD               [12]  766 	mov	r5,a
      000179 A3               [24]  767 	inc	dptr
      00017A AE 82            [24]  768 	mov	r6,dpl
      00017C AF 83            [24]  769 	mov	r7,dph
      00017E A7 05            [24]  770 	mov	@r1,ar5
      000180 09               [12]  771 	inc	r1
      000181 80 E8            [24]  772 	sjmp	00104$
      000183                        773 00108$:
                                    774 ;	sch8051.c:121: EA = 1;
                                    775 ;	assignBit
      000183 D2 AF            [12]  776 	setb	_EA
                                    777 ;	sch8051.c:122: }
      000185 D0 D0            [24]  778 	pop	psw
      000187 D0 00            [24]  779 	pop	(0+0)
      000189 D0 01            [24]  780 	pop	(0+1)
      00018B D0 02            [24]  781 	pop	(0+2)
      00018D D0 03            [24]  782 	pop	(0+3)
      00018F D0 04            [24]  783 	pop	(0+4)
      000191 D0 05            [24]  784 	pop	(0+5)
      000193 D0 06            [24]  785 	pop	(0+6)
      000195 D0 07            [24]  786 	pop	(0+7)
      000197 D0 83            [24]  787 	pop	dph
      000199 D0 82            [24]  788 	pop	dpl
      00019B D0 F0            [24]  789 	pop	b
      00019D D0 E0            [24]  790 	pop	acc
      00019F D0*00            [24]  791 	pop	bits
      0001A1 32               [24]  792 	reti
                                    793 ;------------------------------------------------------------
                                    794 ;Allocation info for local variables in function 'sch_init'
                                    795 ;------------------------------------------------------------
                                    796 ;i                         Allocated to registers r7 
                                    797 ;------------------------------------------------------------
                                    798 ;	sch8051.c:132: void sch_init(){
                                    799 ;	-----------------------------------------
                                    800 ;	 function sch_init
                                    801 ;	-----------------------------------------
      0001A2                        802 _sch_init:
                                    803 ;	sch8051.c:134: sch_index = 0;
      0001A2 90 02 10         [24]  804 	mov	dptr,#_sch_index
      0001A5 E4               [12]  805 	clr	a
      0001A6 F0               [24]  806 	movx	@dptr,a
                                    807 ;	sch8051.c:135: sch_num_tasks = 0; 
      0001A7 90 02 11         [24]  808 	mov	dptr,#_sch_num_tasks
      0001AA F0               [24]  809 	movx	@dptr,a
                                    810 ;	sch8051.c:136: sch_time = SCH_TIMEOUT;  
      0001AB 90 02 08         [24]  811 	mov	dptr,#_sch_time
      0001AE 74 0F            [12]  812 	mov	a,#0x0f
      0001B0 F0               [24]  813 	movx	@dptr,a
      0001B1 E4               [12]  814 	clr	a
      0001B2 A3               [24]  815 	inc	dptr
      0001B3 F0               [24]  816 	movx	@dptr,a
                                    817 ;	sch8051.c:137: for(i = 0; i < SCH_MAX_TASKS; i++){
      0001B4 7F 00            [12]  818 	mov	r7,#0x00
      0001B6                        819 00102$:
                                    820 ;	sch8051.c:138: sch_tasks[i].sp = 0; 
      0001B6 EF               [12]  821 	mov	a,r7
      0001B7 75 F0 34         [24]  822 	mov	b,#0x34
      0001BA A4               [48]  823 	mul	ab
      0001BB FD               [12]  824 	mov	r5,a
      0001BC AE F0            [24]  825 	mov	r6,b
      0001BE 8D 03            [24]  826 	mov	ar3,r5
      0001C0 74 00            [12]  827 	mov	a,#(_sch_tasks >> 8)
      0001C2 2E               [12]  828 	add	a,r6
      0001C3 FC               [12]  829 	mov	r4,a
      0001C4 74 32            [12]  830 	mov	a,#0x32
      0001C6 2B               [12]  831 	add	a,r3
      0001C7 F5 82            [12]  832 	mov	dpl,a
      0001C9 E4               [12]  833 	clr	a
      0001CA 3C               [12]  834 	addc	a,r4
      0001CB F5 83            [12]  835 	mov	dph,a
      0001CD E4               [12]  836 	clr	a
      0001CE F0               [24]  837 	movx	@dptr,a
                                    838 ;	sch8051.c:139: sch_tasks[i].state = FREE; 
      0001CF 74 00            [12]  839 	mov	a,#(_sch_tasks >> 8)
      0001D1 2E               [12]  840 	add	a,r6
      0001D2 FE               [12]  841 	mov	r6,a
      0001D3 74 33            [12]  842 	mov	a,#0x33
      0001D5 2D               [12]  843 	add	a,r5
      0001D6 F5 82            [12]  844 	mov	dpl,a
      0001D8 E4               [12]  845 	clr	a
      0001D9 3E               [12]  846 	addc	a,r6
      0001DA F5 83            [12]  847 	mov	dph,a
      0001DC 74 03            [12]  848 	mov	a,#0x03
      0001DE F0               [24]  849 	movx	@dptr,a
                                    850 ;	sch8051.c:137: for(i = 0; i < SCH_MAX_TASKS; i++){
      0001DF 0F               [12]  851 	inc	r7
      0001E0 BF 0A 00         [24]  852 	cjne	r7,#0x0a,00111$
      0001E3                        853 00111$:
      0001E3 40 D1            [24]  854 	jc	00102$
                                    855 ;	sch8051.c:141: }
      0001E5 22               [24]  856 	ret
                                    857 ;------------------------------------------------------------
                                    858 ;Allocation info for local variables in function 'sch_add_task'
                                    859 ;------------------------------------------------------------
                                    860 ;f                         Allocated to registers r6 r7 
                                    861 ;i                         Allocated to registers r5 
                                    862 ;j                         Allocated to registers r7 
                                    863 ;------------------------------------------------------------
                                    864 ;	sch8051.c:144: void sch_add_task(fptr *f){
                                    865 ;	-----------------------------------------
                                    866 ;	 function sch_add_task
                                    867 ;	-----------------------------------------
      0001E6                        868 _sch_add_task:
      0001E6 AE 82            [24]  869 	mov	r6,dpl
      0001E8 AF 83            [24]  870 	mov	r7,dph
                                    871 ;	sch8051.c:146: for(i = 0; i < SCH_MAX_TASKS; i++){
      0001EA 7D 00            [12]  872 	mov	r5,#0x00
      0001EC                        873 00107$:
                                    874 ;	sch8051.c:147: if(sch_tasks[i].state == FREE){
      0001EC ED               [12]  875 	mov	a,r5
      0001ED 75 F0 34         [24]  876 	mov	b,#0x34
      0001F0 A4               [48]  877 	mul	ab
      0001F1 24 00            [12]  878 	add	a,#_sch_tasks
      0001F3 FB               [12]  879 	mov	r3,a
      0001F4 74 00            [12]  880 	mov	a,#(_sch_tasks >> 8)
      0001F6 35 F0            [12]  881 	addc	a,b
      0001F8 FC               [12]  882 	mov	r4,a
      0001F9 74 33            [12]  883 	mov	a,#0x33
      0001FB 2B               [12]  884 	add	a,r3
      0001FC F5 82            [12]  885 	mov	dpl,a
      0001FE E4               [12]  886 	clr	a
      0001FF 3C               [12]  887 	addc	a,r4
      000200 F5 83            [12]  888 	mov	dph,a
      000202 E0               [24]  889 	movx	a,@dptr
      000203 FC               [12]  890 	mov	r4,a
      000204 BC 03 02         [24]  891 	cjne	r4,#0x03,00135$
      000207 80 06            [24]  892 	sjmp	00103$
      000209                        893 00135$:
                                    894 ;	sch8051.c:146: for(i = 0; i < SCH_MAX_TASKS; i++){
      000209 0D               [12]  895 	inc	r5
      00020A BD 0A 00         [24]  896 	cjne	r5,#0x0a,00136$
      00020D                        897 00136$:
      00020D 40 DD            [24]  898 	jc	00107$
      00020F                        899 00103$:
                                    900 ;	sch8051.c:152: if(sch_tasks[i].state != FREE){
      00020F ED               [12]  901 	mov	a,r5
      000210 75 F0 34         [24]  902 	mov	b,#0x34
      000213 A4               [48]  903 	mul	ab
      000214 FC               [12]  904 	mov	r4,a
      000215 AD F0            [24]  905 	mov	r5,b
      000217 8C 02            [24]  906 	mov	ar2,r4
      000219 74 00            [12]  907 	mov	a,#(_sch_tasks >> 8)
      00021B 2D               [12]  908 	add	a,r5
      00021C FB               [12]  909 	mov	r3,a
      00021D 74 33            [12]  910 	mov	a,#0x33
      00021F 2A               [12]  911 	add	a,r2
      000220 F5 82            [12]  912 	mov	dpl,a
      000222 E4               [12]  913 	clr	a
      000223 3B               [12]  914 	addc	a,r3
      000224 F5 83            [12]  915 	mov	dph,a
      000226 E0               [24]  916 	movx	a,@dptr
      000227 FB               [12]  917 	mov	r3,a
      000228 BB 03 02         [24]  918 	cjne	r3,#0x03,00138$
      00022B 80 01            [24]  919 	sjmp	00105$
      00022D                        920 00138$:
                                    921 ;	sch8051.c:153: return; 
      00022D 22               [24]  922 	ret
      00022E                        923 00105$:
                                    924 ;	sch8051.c:156: sch_tasks[i].stack_save[0] = ((unsigned short)f) & 0xff; 
      00022E 8C 82            [24]  925 	mov	dpl,r4
      000230 74 00            [12]  926 	mov	a,#(_sch_tasks >> 8)
      000232 2D               [12]  927 	add	a,r5
      000233 F5 83            [12]  928 	mov	dph,a
      000235 8E 03            [24]  929 	mov	ar3,r6
      000237 EB               [12]  930 	mov	a,r3
      000238 F0               [24]  931 	movx	@dptr,a
                                    932 ;	sch8051.c:157: sch_tasks[i].stack_save[1] = ((unsigned short)f >> 8) & 0xff;
      000239 8C 02            [24]  933 	mov	ar2,r4
      00023B 74 00            [12]  934 	mov	a,#(_sch_tasks >> 8)
      00023D 2D               [12]  935 	add	a,r5
      00023E FB               [12]  936 	mov	r3,a
      00023F 8A 82            [24]  937 	mov	dpl,r2
      000241 8B 83            [24]  938 	mov	dph,r3
      000243 A3               [24]  939 	inc	dptr
      000244 8F 06            [24]  940 	mov	ar6,r7
      000246 EE               [12]  941 	mov	a,r6
      000247 F0               [24]  942 	movx	@dptr,a
                                    943 ;	sch8051.c:158: sch_tasks[i].stack_save[2] = 0; 	//BITS
      000248 8C 06            [24]  944 	mov	ar6,r4
      00024A 74 00            [12]  945 	mov	a,#(_sch_tasks >> 8)
      00024C 2D               [12]  946 	add	a,r5
      00024D FF               [12]  947 	mov	r7,a
      00024E 8E 82            [24]  948 	mov	dpl,r6
      000250 8F 83            [24]  949 	mov	dph,r7
      000252 A3               [24]  950 	inc	dptr
      000253 A3               [24]  951 	inc	dptr
      000254 E4               [12]  952 	clr	a
      000255 F0               [24]  953 	movx	@dptr,a
                                    954 ;	sch8051.c:159: sch_tasks[i].stack_save[3] = ACC; 
      000256 8C 06            [24]  955 	mov	ar6,r4
      000258 74 00            [12]  956 	mov	a,#(_sch_tasks >> 8)
      00025A 2D               [12]  957 	add	a,r5
      00025B FF               [12]  958 	mov	r7,a
      00025C 8E 82            [24]  959 	mov	dpl,r6
      00025E 8F 83            [24]  960 	mov	dph,r7
      000260 A3               [24]  961 	inc	dptr
      000261 A3               [24]  962 	inc	dptr
      000262 A3               [24]  963 	inc	dptr
      000263 E5 E0            [12]  964 	mov	a,_ACC
      000265 F0               [24]  965 	movx	@dptr,a
                                    966 ;	sch8051.c:160: sch_tasks[i].stack_save[4] = B; 
      000266 8C 06            [24]  967 	mov	ar6,r4
      000268 74 00            [12]  968 	mov	a,#(_sch_tasks >> 8)
      00026A 2D               [12]  969 	add	a,r5
      00026B FF               [12]  970 	mov	r7,a
      00026C 8E 82            [24]  971 	mov	dpl,r6
      00026E 8F 83            [24]  972 	mov	dph,r7
      000270 A3               [24]  973 	inc	dptr
      000271 A3               [24]  974 	inc	dptr
      000272 A3               [24]  975 	inc	dptr
      000273 A3               [24]  976 	inc	dptr
      000274 E5 F0            [12]  977 	mov	a,_B
      000276 F0               [24]  978 	movx	@dptr,a
                                    979 ;	sch8051.c:161: sch_tasks[i].stack_save[5] = DPL; 
      000277 8C 06            [24]  980 	mov	ar6,r4
      000279 74 00            [12]  981 	mov	a,#(_sch_tasks >> 8)
      00027B 2D               [12]  982 	add	a,r5
      00027C FF               [12]  983 	mov	r7,a
      00027D 8E 82            [24]  984 	mov	dpl,r6
      00027F 8F 83            [24]  985 	mov	dph,r7
      000281 A3               [24]  986 	inc	dptr
      000282 A3               [24]  987 	inc	dptr
      000283 A3               [24]  988 	inc	dptr
      000284 A3               [24]  989 	inc	dptr
      000285 A3               [24]  990 	inc	dptr
      000286 E5 82            [12]  991 	mov	a,_DPL
      000288 F0               [24]  992 	movx	@dptr,a
                                    993 ;	sch8051.c:162: sch_tasks[i].stack_save[6] = DPH; 
      000289 8C 06            [24]  994 	mov	ar6,r4
      00028B 74 00            [12]  995 	mov	a,#(_sch_tasks >> 8)
      00028D 2D               [12]  996 	add	a,r5
      00028E FF               [12]  997 	mov	r7,a
      00028F 74 06            [12]  998 	mov	a,#0x06
      000291 2E               [12]  999 	add	a,r6
      000292 F5 82            [12] 1000 	mov	dpl,a
      000294 E4               [12] 1001 	clr	a
      000295 3F               [12] 1002 	addc	a,r7
      000296 F5 83            [12] 1003 	mov	dph,a
      000298 E5 83            [12] 1004 	mov	a,_DPH
      00029A F0               [24] 1005 	movx	@dptr,a
                                   1006 ;	sch8051.c:167: for(j = 7; j < 15; j++){
      00029B 7F 07            [12] 1007 	mov	r7,#0x07
      00029D                       1008 00109$:
                                   1009 ;	sch8051.c:168: sch_tasks[i].stack_save[j] = 0; 
      00029D 8C 03            [24] 1010 	mov	ar3,r4
      00029F 74 00            [12] 1011 	mov	a,#(_sch_tasks >> 8)
      0002A1 2D               [12] 1012 	add	a,r5
      0002A2 FE               [12] 1013 	mov	r6,a
      0002A3 EF               [12] 1014 	mov	a,r7
      0002A4 2B               [12] 1015 	add	a,r3
      0002A5 F5 82            [12] 1016 	mov	dpl,a
      0002A7 E4               [12] 1017 	clr	a
      0002A8 3E               [12] 1018 	addc	a,r6
      0002A9 F5 83            [12] 1019 	mov	dph,a
      0002AB E4               [12] 1020 	clr	a
      0002AC F0               [24] 1021 	movx	@dptr,a
                                   1022 ;	sch8051.c:167: for(j = 7; j < 15; j++){
      0002AD 0F               [12] 1023 	inc	r7
      0002AE BF 0F 00         [24] 1024 	cjne	r7,#0x0f,00139$
      0002B1                       1025 00139$:
      0002B1 40 EA            [24] 1026 	jc	00109$
                                   1027 ;	sch8051.c:171: sch_tasks[i].stack_save[15] = PSW; 
      0002B3 8C 06            [24] 1028 	mov	ar6,r4
      0002B5 74 00            [12] 1029 	mov	a,#(_sch_tasks >> 8)
      0002B7 2D               [12] 1030 	add	a,r5
      0002B8 FF               [12] 1031 	mov	r7,a
      0002B9 74 0F            [12] 1032 	mov	a,#0x0f
      0002BB 2E               [12] 1033 	add	a,r6
      0002BC F5 82            [12] 1034 	mov	dpl,a
      0002BE E4               [12] 1035 	clr	a
      0002BF 3F               [12] 1036 	addc	a,r7
      0002C0 F5 83            [12] 1037 	mov	dph,a
      0002C2 E5 D0            [12] 1038 	mov	a,_PSW
      0002C4 F0               [24] 1039 	movx	@dptr,a
                                   1040 ;	sch8051.c:173: sch_tasks[i].state = WAIT;  
      0002C5 8C 06            [24] 1041 	mov	ar6,r4
      0002C7 74 00            [12] 1042 	mov	a,#(_sch_tasks >> 8)
      0002C9 2D               [12] 1043 	add	a,r5
      0002CA FF               [12] 1044 	mov	r7,a
      0002CB 74 33            [12] 1045 	mov	a,#0x33
      0002CD 2E               [12] 1046 	add	a,r6
      0002CE F5 82            [12] 1047 	mov	dpl,a
      0002D0 E4               [12] 1048 	clr	a
      0002D1 3F               [12] 1049 	addc	a,r7
      0002D2 F5 83            [12] 1050 	mov	dph,a
      0002D4 74 01            [12] 1051 	mov	a,#0x01
      0002D6 F0               [24] 1052 	movx	@dptr,a
                                   1053 ;	sch8051.c:174: sch_tasks[i].sp = 15; 
      0002D7 74 00            [12] 1054 	mov	a,#(_sch_tasks >> 8)
      0002D9 2D               [12] 1055 	add	a,r5
      0002DA FD               [12] 1056 	mov	r5,a
      0002DB 74 32            [12] 1057 	mov	a,#0x32
      0002DD 2C               [12] 1058 	add	a,r4
      0002DE F5 82            [12] 1059 	mov	dpl,a
      0002E0 E4               [12] 1060 	clr	a
      0002E1 3D               [12] 1061 	addc	a,r5
      0002E2 F5 83            [12] 1062 	mov	dph,a
      0002E4 74 0F            [12] 1063 	mov	a,#0x0f
      0002E6 F0               [24] 1064 	movx	@dptr,a
                                   1065 ;	sch8051.c:175: sch_num_tasks++; 
      0002E7 90 02 11         [24] 1066 	mov	dptr,#_sch_num_tasks
      0002EA E0               [24] 1067 	movx	a,@dptr
      0002EB 04               [12] 1068 	inc	a
      0002EC F0               [24] 1069 	movx	@dptr,a
                                   1070 ;	sch8051.c:176: }
      0002ED 22               [24] 1071 	ret
                                   1072 ;------------------------------------------------------------
                                   1073 ;Allocation info for local variables in function 'sch_start'
                                   1074 ;------------------------------------------------------------
                                   1075 ;ram                       Allocated to registers r1 
                                   1076 ;xram                      Allocated to registers r6 r7 
                                   1077 ;------------------------------------------------------------
                                   1078 ;	sch8051.c:179: void sch_start(){
                                   1079 ;	-----------------------------------------
                                   1080 ;	 function sch_start
                                   1081 ;	-----------------------------------------
      0002EE                       1082 _sch_start:
                                   1083 ;	sch8051.c:180: EA = 0; 
                                   1084 ;	assignBit
      0002EE C2 AF            [12] 1085 	clr	_EA
                                   1086 ;	sch8051.c:183: T2CON = 0; 
      0002F0 75 C8 00         [24] 1087 	mov	_T2CON,#0x00
                                   1088 ;	sch8051.c:184: RCAP2H = 0xCE;
      0002F3 75 CB CE         [24] 1089 	mov	_RCAP2H,#0xce
                                   1090 ;	sch8051.c:185: RCAP2L = 0xD9; 
      0002F6 75 CA D9         [24] 1091 	mov	_RCAP2L,#0xd9
                                   1092 ;	sch8051.c:186: TH2 = 0xCE; 
      0002F9 75 CD CE         [24] 1093 	mov	_TH2,#0xce
                                   1094 ;	sch8051.c:187: TL2 = 0xD9;
      0002FC 75 CC D9         [24] 1095 	mov	_TL2,#0xd9
                                   1096 ;	sch8051.c:188: ET2 = 1; 
                                   1097 ;	assignBit
      0002FF D2 AD            [12] 1098 	setb	_ET2
                                   1099 ;	sch8051.c:189: TR2 = 1;  
                                   1100 ;	assignBit
      000301 D2 CA            [12] 1101 	setb	_TR2
                                   1102 ;	sch8051.c:192: sch_schedule();
      000303 12r00r00         [24] 1103 	lcall	_sch_schedule
                                   1104 ;	sch8051.c:193: TO_STACK
      000306 90 02 10         [24] 1105 	mov	dptr,#_sch_index
      000309 E0               [24] 1106 	movx	a,@dptr
      00030A 75 F0 34         [24] 1107 	mov	b,#0x34
      00030D A4               [48] 1108 	mul	ab
      00030E 24 00            [12] 1109 	add	a,#_sch_tasks
      000310 FE               [12] 1110 	mov	r6,a
      000311 74 00            [12] 1111 	mov	a,#(_sch_tasks >> 8)
      000313 35 F0            [12] 1112 	addc	a,b
      000315 FF               [12] 1113 	mov	r7,a
      000316 E0               [24] 1114 	movx	a,@dptr
      000317 75 F0 34         [24] 1115 	mov	b,#0x34
      00031A A4               [48] 1116 	mul	ab
      00031B 24 00            [12] 1117 	add	a,#_sch_tasks
      00031D FC               [12] 1118 	mov	r4,a
      00031E 74 00            [12] 1119 	mov	a,#(_sch_tasks >> 8)
      000320 35 F0            [12] 1120 	addc	a,b
      000322 FD               [12] 1121 	mov	r5,a
      000323 74 32            [12] 1122 	mov	a,#0x32
      000325 2C               [12] 1123 	add	a,r4
      000326 F5 82            [12] 1124 	mov	dpl,a
      000328 E4               [12] 1125 	clr	a
      000329 3D               [12] 1126 	addc	a,r5
      00032A F5 83            [12] 1127 	mov	dph,a
      00032C E0               [24] 1128 	movx	a,@dptr
      00032D FD               [12] 1129 	mov	r5,a
      00032E 24 6E            [12] 1130 	add	a,#0x6e
      000330 F5 81            [12] 1131 	mov	_SP,a
      000332 79 6E            [12] 1132 	mov	r1,#0x6e
      000334                       1133 00101$:
      000334 89 05            [24] 1134 	mov	ar5,r1
      000336 C3               [12] 1135 	clr	c
      000337 E5 81            [12] 1136 	mov	a,_SP
      000339 9D               [12] 1137 	subb	a,r5
      00033A 40 10            [24] 1138 	jc	00103$
      00033C 8E 82            [24] 1139 	mov	dpl,r6
      00033E 8F 83            [24] 1140 	mov	dph,r7
      000340 E0               [24] 1141 	movx	a,@dptr
      000341 FD               [12] 1142 	mov	r5,a
      000342 A3               [24] 1143 	inc	dptr
      000343 AE 82            [24] 1144 	mov	r6,dpl
      000345 AF 83            [24] 1145 	mov	r7,dph
      000347 A7 05            [24] 1146 	mov	@r1,ar5
      000349 09               [12] 1147 	inc	r1
      00034A 80 E8            [24] 1148 	sjmp	00101$
      00034C                       1149 00103$:
                                   1150 ;	sch8051.c:194: POP_BANK  
      00034C D0 D0            [24] 1151 	pop psw 
      00034E D0 00            [24] 1152 	pop 0 
      000350 D0 01            [24] 1153 	pop 1 
      000352 D0 02            [24] 1154 	pop 2 
      000354 D0 03            [24] 1155 	pop 3 
      000356 D0 04            [24] 1156 	pop 4 
      000358 D0 05            [24] 1157 	pop 5 
      00035A D0 06            [24] 1158 	pop 6 
      00035C D0 07            [24] 1159 	pop 7 
      00035E D0 83            [24] 1160 	pop dph 
      000360 D0 82            [24] 1161 	pop dpl 
      000362 D0 F0            [24] 1162 	pop b 
      000364 D0 E0            [24] 1163 	pop acc 
      000366 D0*00            [24] 1164 	pop bits 
                                   1165 ;	sch8051.c:195: EA = 1;
                                   1166 ;	assignBit
      000368 D2 AF            [12] 1167 	setb	_EA
                                   1168 ;	sch8051.c:196: }
      00036A 22               [24] 1169 	ret
                                   1170 ;------------------------------------------------------------
                                   1171 ;Allocation info for local variables in function 'sch_next'
                                   1172 ;------------------------------------------------------------
                                   1173 ;ram                       Allocated to registers r1 
                                   1174 ;xram                      Allocated to registers 
                                   1175 ;ram                       Allocated to registers r1 
                                   1176 ;xram                      Allocated to registers r6 r7 
                                   1177 ;------------------------------------------------------------
                                   1178 ;	sch8051.c:199: void sch_next(){
                                   1179 ;	-----------------------------------------
                                   1180 ;	 function sch_next
                                   1181 ;	-----------------------------------------
      00036B                       1182 _sch_next:
                                   1183 ;	sch8051.c:200: EA = 0; 
                                   1184 ;	assignBit
      00036B C2 AF            [12] 1185 	clr	_EA
                                   1186 ;	sch8051.c:201: PUSH_BANK
      00036D C0*00            [24] 1187 	push bits 
      00036F C0 E0            [24] 1188 	push acc 
      000371 C0 F0            [24] 1189 	push b 
      000373 C0 82            [24] 1190 	push dpl 
      000375 C0 83            [24] 1191 	push dph 
      000377 C0 07            [24] 1192 	push 7 
      000379 C0 06            [24] 1193 	push 6 
      00037B C0 05            [24] 1194 	push 5 
      00037D C0 04            [24] 1195 	push 4 
      00037F C0 03            [24] 1196 	push 3 
      000381 C0 02            [24] 1197 	push 2 
      000383 C0 01            [24] 1198 	push 1 
      000385 C0 00            [24] 1199 	push 0 
      000387 C0 D0            [24] 1200 	push psw 
                                   1201 ;	sch8051.c:202: TO_XRAM
      000389 90 02 10         [24] 1202 	mov	dptr,#_sch_index
      00038C E0               [24] 1203 	movx	a,@dptr
      00038D 75 F0 34         [24] 1204 	mov	b,#0x34
      000390 A4               [48] 1205 	mul	ab
      000391 24 00            [12] 1206 	add	a,#_sch_tasks
      000393 FE               [12] 1207 	mov	r6,a
      000394 74 00            [12] 1208 	mov	a,#(_sch_tasks >> 8)
      000396 35 F0            [12] 1209 	addc	a,b
      000398 FF               [12] 1210 	mov	r7,a
      000399 E0               [24] 1211 	movx	a,@dptr
      00039A 75 F0 34         [24] 1212 	mov	b,#0x34
      00039D A4               [48] 1213 	mul	ab
      00039E 24 00            [12] 1214 	add	a,#_sch_tasks
      0003A0 FC               [12] 1215 	mov	r4,a
      0003A1 74 00            [12] 1216 	mov	a,#(_sch_tasks >> 8)
      0003A3 35 F0            [12] 1217 	addc	a,b
      0003A5 FD               [12] 1218 	mov	r5,a
      0003A6 74 32            [12] 1219 	mov	a,#0x32
      0003A8 2C               [12] 1220 	add	a,r4
      0003A9 F5 82            [12] 1221 	mov	dpl,a
      0003AB E4               [12] 1222 	clr	a
      0003AC 3D               [12] 1223 	addc	a,r5
      0003AD F5 83            [12] 1224 	mov	dph,a
      0003AF E5 81            [12] 1225 	mov	a,_SP
      0003B1 24 92            [12] 1226 	add	a,#0x92
      0003B3 FD               [12] 1227 	mov	r5,a
      0003B4 F0               [24] 1228 	movx	@dptr,a
      0003B5 79 6E            [12] 1229 	mov	r1,#0x6e
      0003B7                       1230 00101$:
      0003B7 89 05            [24] 1231 	mov	ar5,r1
      0003B9 C3               [12] 1232 	clr	c
      0003BA E5 81            [12] 1233 	mov	a,_SP
      0003BC 9D               [12] 1234 	subb	a,r5
      0003BD 40 10            [24] 1235 	jc	00103$
      0003BF 87 05            [24] 1236 	mov	ar5,@r1
      0003C1 09               [12] 1237 	inc	r1
      0003C2 8E 82            [24] 1238 	mov	dpl,r6
      0003C4 8F 83            [24] 1239 	mov	dph,r7
      0003C6 ED               [12] 1240 	mov	a,r5
      0003C7 F0               [24] 1241 	movx	@dptr,a
      0003C8 A3               [24] 1242 	inc	dptr
      0003C9 AE 82            [24] 1243 	mov	r6,dpl
      0003CB AF 83            [24] 1244 	mov	r7,dph
      0003CD 80 E8            [24] 1245 	sjmp	00101$
      0003CF                       1246 00103$:
                                   1247 ;	sch8051.c:203: sch_schedule();
      0003CF 12r00r00         [24] 1248 	lcall	_sch_schedule
                                   1249 ;	sch8051.c:204: TO_STACK
      0003D2 90 02 10         [24] 1250 	mov	dptr,#_sch_index
      0003D5 E0               [24] 1251 	movx	a,@dptr
      0003D6 75 F0 34         [24] 1252 	mov	b,#0x34
      0003D9 A4               [48] 1253 	mul	ab
      0003DA 24 00            [12] 1254 	add	a,#_sch_tasks
      0003DC FE               [12] 1255 	mov	r6,a
      0003DD 74 00            [12] 1256 	mov	a,#(_sch_tasks >> 8)
      0003DF 35 F0            [12] 1257 	addc	a,b
      0003E1 FF               [12] 1258 	mov	r7,a
      0003E2 E0               [24] 1259 	movx	a,@dptr
      0003E3 75 F0 34         [24] 1260 	mov	b,#0x34
      0003E6 A4               [48] 1261 	mul	ab
      0003E7 24 00            [12] 1262 	add	a,#_sch_tasks
      0003E9 FC               [12] 1263 	mov	r4,a
      0003EA 74 00            [12] 1264 	mov	a,#(_sch_tasks >> 8)
      0003EC 35 F0            [12] 1265 	addc	a,b
      0003EE FD               [12] 1266 	mov	r5,a
      0003EF 74 32            [12] 1267 	mov	a,#0x32
      0003F1 2C               [12] 1268 	add	a,r4
      0003F2 F5 82            [12] 1269 	mov	dpl,a
      0003F4 E4               [12] 1270 	clr	a
      0003F5 3D               [12] 1271 	addc	a,r5
      0003F6 F5 83            [12] 1272 	mov	dph,a
      0003F8 E0               [24] 1273 	movx	a,@dptr
      0003F9 FD               [12] 1274 	mov	r5,a
      0003FA 24 6E            [12] 1275 	add	a,#0x6e
      0003FC F5 81            [12] 1276 	mov	_SP,a
      0003FE 79 6E            [12] 1277 	mov	r1,#0x6e
      000400                       1278 00104$:
      000400 89 05            [24] 1279 	mov	ar5,r1
      000402 C3               [12] 1280 	clr	c
      000403 E5 81            [12] 1281 	mov	a,_SP
      000405 9D               [12] 1282 	subb	a,r5
      000406 40 10            [24] 1283 	jc	00106$
      000408 8E 82            [24] 1284 	mov	dpl,r6
      00040A 8F 83            [24] 1285 	mov	dph,r7
      00040C E0               [24] 1286 	movx	a,@dptr
      00040D FD               [12] 1287 	mov	r5,a
      00040E A3               [24] 1288 	inc	dptr
      00040F AE 82            [24] 1289 	mov	r6,dpl
      000411 AF 83            [24] 1290 	mov	r7,dph
      000413 A7 05            [24] 1291 	mov	@r1,ar5
      000415 09               [12] 1292 	inc	r1
      000416 80 E8            [24] 1293 	sjmp	00104$
      000418                       1294 00106$:
                                   1295 ;	sch8051.c:205: POP_BANK
      000418 D0 D0            [24] 1296 	pop psw 
      00041A D0 00            [24] 1297 	pop 0 
      00041C D0 01            [24] 1298 	pop 1 
      00041E D0 02            [24] 1299 	pop 2 
      000420 D0 03            [24] 1300 	pop 3 
      000422 D0 04            [24] 1301 	pop 4 
      000424 D0 05            [24] 1302 	pop 5 
      000426 D0 06            [24] 1303 	pop 6 
      000428 D0 07            [24] 1304 	pop 7 
      00042A D0 83            [24] 1305 	pop dph 
      00042C D0 82            [24] 1306 	pop dpl 
      00042E D0 F0            [24] 1307 	pop b 
      000430 D0 E0            [24] 1308 	pop acc 
      000432 D0*00            [24] 1309 	pop bits 
                                   1310 ;	sch8051.c:206: EA = 1; 
                                   1311 ;	assignBit
      000434 D2 AF            [12] 1312 	setb	_EA
                                   1313 ;	sch8051.c:207: }
      000436 22               [24] 1314 	ret
                                   1315 ;------------------------------------------------------------
                                   1316 ;Allocation info for local variables in function 'sch_mutex_start'
                                   1317 ;------------------------------------------------------------
                                   1318 ;state                     Allocated with name '_sch_mutex_start_PARM_2'
                                   1319 ;mut                       Allocated to registers r5 r6 r7 
                                   1320 ;i                         Allocated to registers r4 
                                   1321 ;------------------------------------------------------------
                                   1322 ;	sch8051.c:214: void sch_mutex_start(struct sch_mutex_sync *mut, Byte state){
                                   1323 ;	-----------------------------------------
                                   1324 ;	 function sch_mutex_start
                                   1325 ;	-----------------------------------------
      000437                       1326 _sch_mutex_start:
                                   1327 ;	sch8051.c:217: mut->lock = MUTEX_LOCKED; 
      000437 AD 82            [24] 1328 	mov	r5,dpl
      000439 AE 83            [24] 1329 	mov	r6,dph
      00043B AF F0            [24] 1330 	mov	r7,b
      00043D E4               [12] 1331 	clr	a
      00043E 12r00r00         [24] 1332 	lcall	__gptrput
                                   1333 ;	sch8051.c:218: if(state == MUTEX_LOCKED || state == MUTEX_RELEASED){
      000441 E5*00            [12] 1334 	mov	a,_sch_mutex_start_PARM_2
      000443 60 05            [24] 1335 	jz	00101$
      000445 74 01            [12] 1336 	mov	a,#0x01
      000447 B5*00 0B         [24] 1337 	cjne	a,_sch_mutex_start_PARM_2,00110$
      00044A                       1338 00101$:
                                   1339 ;	sch8051.c:219: mut->lock = state; 
      00044A 8D 82            [24] 1340 	mov	dpl,r5
      00044C 8E 83            [24] 1341 	mov	dph,r6
      00044E 8F F0            [24] 1342 	mov	b,r7
      000450 E5*00            [12] 1343 	mov	a,_sch_mutex_start_PARM_2
      000452 12r00r00         [24] 1344 	lcall	__gptrput
                                   1345 ;	sch8051.c:221: for(i = 0; i < SCH_MAX_TASKS; i++){
      000455                       1346 00110$:
      000455 0D               [12] 1347 	inc	r5
      000456 BD 00 01         [24] 1348 	cjne	r5,#0x00,00121$
      000459 0E               [12] 1349 	inc	r6
      00045A                       1350 00121$:
      00045A 7C 00            [12] 1351 	mov	r4,#0x00
      00045C                       1352 00105$:
                                   1353 ;	sch8051.c:222: mut->waiting_list[i] = 0; 
      00045C EC               [12] 1354 	mov	a,r4
      00045D 2D               [12] 1355 	add	a,r5
      00045E F9               [12] 1356 	mov	r1,a
      00045F E4               [12] 1357 	clr	a
      000460 3E               [12] 1358 	addc	a,r6
      000461 FA               [12] 1359 	mov	r2,a
      000462 8F 03            [24] 1360 	mov	ar3,r7
      000464 89 82            [24] 1361 	mov	dpl,r1
      000466 8A 83            [24] 1362 	mov	dph,r2
      000468 8B F0            [24] 1363 	mov	b,r3
      00046A E4               [12] 1364 	clr	a
      00046B 12r00r00         [24] 1365 	lcall	__gptrput
                                   1366 ;	sch8051.c:221: for(i = 0; i < SCH_MAX_TASKS; i++){
      00046E 0C               [12] 1367 	inc	r4
      00046F BC 0A 00         [24] 1368 	cjne	r4,#0x0a,00122$
      000472                       1369 00122$:
      000472 40 E8            [24] 1370 	jc	00105$
                                   1371 ;	sch8051.c:224: }
      000474 22               [24] 1372 	ret
                                   1373 ;------------------------------------------------------------
                                   1374 ;Allocation info for local variables in function 'sch_mutex_lock'
                                   1375 ;------------------------------------------------------------
                                   1376 ;mut                       Allocated to registers r5 r6 r7 
                                   1377 ;------------------------------------------------------------
                                   1378 ;	sch8051.c:226: Byte sch_mutex_lock(struct sch_mutex_sync *mut) __critical{
                                   1379 ;	-----------------------------------------
                                   1380 ;	 function sch_mutex_lock
                                   1381 ;	-----------------------------------------
      000475                       1382 _sch_mutex_lock:
      000475 D3               [12] 1383 	setb	c
      000476 10 AF 01         [24] 1384 	jbc	ea,00110$
      000479 C3               [12] 1385 	clr	c
      00047A                       1386 00110$:
      00047A C0 D0            [24] 1387 	push	psw
                                   1388 ;	sch8051.c:227: if(mut->lock == MUTEX_RELEASED){
      00047C AD 82            [24] 1389 	mov	r5,dpl
      00047E AE 83            [24] 1390 	mov	r6,dph
      000480 AF F0            [24] 1391 	mov	r7,b
      000482 12r00r00         [24] 1392 	lcall	__gptrget
      000485 FC               [12] 1393 	mov	r4,a
      000486 BC 01 0F         [24] 1394 	cjne	r4,#0x01,00102$
                                   1395 ;	sch8051.c:228: mut->lock = MUTEX_LOCKED; 
      000489 8D 82            [24] 1396 	mov	dpl,r5
      00048B 8E 83            [24] 1397 	mov	dph,r6
      00048D 8F F0            [24] 1398 	mov	b,r7
      00048F E4               [12] 1399 	clr	a
      000490 12r00r00         [24] 1400 	lcall	__gptrput
                                   1401 ;	sch8051.c:229: return 1; 
      000493 75 82 01         [24] 1402 	mov	dpl,#0x01
      000496 80 3B            [24] 1403 	sjmp	00104$
      000498                       1404 00102$:
                                   1405 ;	sch8051.c:231: sch_tasks[sch_index].state = BLOCKED;
      000498 90 02 10         [24] 1406 	mov	dptr,#_sch_index
      00049B E0               [24] 1407 	movx	a,@dptr
      00049C 75 F0 34         [24] 1408 	mov	b,#0x34
      00049F A4               [48] 1409 	mul	ab
      0004A0 24 00            [12] 1410 	add	a,#_sch_tasks
      0004A2 FB               [12] 1411 	mov	r3,a
      0004A3 74 00            [12] 1412 	mov	a,#(_sch_tasks >> 8)
      0004A5 35 F0            [12] 1413 	addc	a,b
      0004A7 FC               [12] 1414 	mov	r4,a
      0004A8 74 33            [12] 1415 	mov	a,#0x33
      0004AA 2B               [12] 1416 	add	a,r3
      0004AB F5 82            [12] 1417 	mov	dpl,a
      0004AD E4               [12] 1418 	clr	a
      0004AE 3C               [12] 1419 	addc	a,r4
      0004AF F5 83            [12] 1420 	mov	dph,a
      0004B1 74 02            [12] 1421 	mov	a,#0x02
      0004B3 F0               [24] 1422 	movx	@dptr,a
                                   1423 ;	sch8051.c:232: mut->waiting_list[sch_index] = 1; 
      0004B4 0D               [12] 1424 	inc	r5
      0004B5 BD 00 01         [24] 1425 	cjne	r5,#0x00,00113$
      0004B8 0E               [12] 1426 	inc	r6
      0004B9                       1427 00113$:
      0004B9 90 02 10         [24] 1428 	mov	dptr,#_sch_index
      0004BC E0               [24] 1429 	movx	a,@dptr
      0004BD 2D               [12] 1430 	add	a,r5
      0004BE FD               [12] 1431 	mov	r5,a
      0004BF E4               [12] 1432 	clr	a
      0004C0 3E               [12] 1433 	addc	a,r6
      0004C1 FE               [12] 1434 	mov	r6,a
      0004C2 8D 82            [24] 1435 	mov	dpl,r5
      0004C4 8E 83            [24] 1436 	mov	dph,r6
      0004C6 8F F0            [24] 1437 	mov	b,r7
      0004C8 74 01            [12] 1438 	mov	a,#0x01
      0004CA 12r00r00         [24] 1439 	lcall	__gptrput
                                   1440 ;	sch8051.c:233: sch_next(); 
      0004CD 12r03r6B         [24] 1441 	lcall	_sch_next
                                   1442 ;	sch8051.c:234: return 0; 
      0004D0 75 82 00         [24] 1443 	mov	dpl,#0x00
      0004D3                       1444 00104$:
                                   1445 ;	sch8051.c:236: }
      0004D3 D0 D0            [24] 1446 	pop	psw
      0004D5 92 AF            [24] 1447 	mov	ea,c
      0004D7 22               [24] 1448 	ret
                                   1449 ;------------------------------------------------------------
                                   1450 ;Allocation info for local variables in function 'sch_mutex_trylock'
                                   1451 ;------------------------------------------------------------
                                   1452 ;mut                       Allocated to registers r5 r6 r7 
                                   1453 ;------------------------------------------------------------
                                   1454 ;	sch8051.c:238: Byte sch_mutex_trylock(struct sch_mutex_sync *mut) __critical{
                                   1455 ;	-----------------------------------------
                                   1456 ;	 function sch_mutex_trylock
                                   1457 ;	-----------------------------------------
      0004D8                       1458 _sch_mutex_trylock:
      0004D8 D3               [12] 1459 	setb	c
      0004D9 10 AF 01         [24] 1460 	jbc	ea,00110$
      0004DC C3               [12] 1461 	clr	c
      0004DD                       1462 00110$:
      0004DD C0 D0            [24] 1463 	push	psw
                                   1464 ;	sch8051.c:239: if(mut->lock == MUTEX_RELEASED){
      0004DF AD 82            [24] 1465 	mov	r5,dpl
      0004E1 AE 83            [24] 1466 	mov	r6,dph
      0004E3 AF F0            [24] 1467 	mov	r7,b
      0004E5 12r00r00         [24] 1468 	lcall	__gptrget
      0004E8 FC               [12] 1469 	mov	r4,a
      0004E9 BC 01 0F         [24] 1470 	cjne	r4,#0x01,00102$
                                   1471 ;	sch8051.c:240: mut->lock = MUTEX_LOCKED; 
      0004EC 8D 82            [24] 1472 	mov	dpl,r5
      0004EE 8E 83            [24] 1473 	mov	dph,r6
      0004F0 8F F0            [24] 1474 	mov	b,r7
      0004F2 E4               [12] 1475 	clr	a
      0004F3 12r00r00         [24] 1476 	lcall	__gptrput
                                   1477 ;	sch8051.c:241: return 1; 
      0004F6 75 82 01         [24] 1478 	mov	dpl,#0x01
      0004F9 80 03            [24] 1479 	sjmp	00104$
      0004FB                       1480 00102$:
                                   1481 ;	sch8051.c:243: return 0; 
      0004FB 75 82 00         [24] 1482 	mov	dpl,#0x00
      0004FE                       1483 00104$:
                                   1484 ;	sch8051.c:245: }
      0004FE D0 D0            [24] 1485 	pop	psw
      000500 92 AF            [24] 1486 	mov	ea,c
      000502 22               [24] 1487 	ret
                                   1488 ;------------------------------------------------------------
                                   1489 ;Allocation info for local variables in function 'sch_mutex_release'
                                   1490 ;------------------------------------------------------------
                                   1491 ;mut                       Allocated to registers r5 r6 r7 
                                   1492 ;i                         Allocated with name '_sch_mutex_release_i_65536_49'
                                   1493 ;sloc0                     Allocated with name '_sch_mutex_release_sloc0_1_0'
                                   1494 ;------------------------------------------------------------
                                   1495 ;	sch8051.c:247: Byte sch_mutex_release(struct sch_mutex_sync *mut) __critical{
                                   1496 ;	-----------------------------------------
                                   1497 ;	 function sch_mutex_release
                                   1498 ;	-----------------------------------------
      000503                       1499 _sch_mutex_release:
      000503 D3               [12] 1500 	setb	c
      000504 10 AF 01         [24] 1501 	jbc	ea,00129$
      000507 C3               [12] 1502 	clr	c
      000508                       1503 00129$:
      000508 C0 D0            [24] 1504 	push	psw
                                   1505 ;	sch8051.c:249: if(mut->lock == MUTEX_RELEASED){
      00050A AD 82            [24] 1506 	mov	r5,dpl
      00050C AE 83            [24] 1507 	mov	r6,dph
      00050E AF F0            [24] 1508 	mov	r7,b
      000510 12r00r00         [24] 1509 	lcall	__gptrget
      000513 FC               [12] 1510 	mov	r4,a
      000514 BC 01 06         [24] 1511 	cjne	r4,#0x01,00105$
                                   1512 ;	sch8051.c:250: return 0; 
      000517 75 82 00         [24] 1513 	mov	dpl,#0x00
      00051A 02r05rA3         [24] 1514 	ljmp	00110$
      00051D                       1515 00105$:
                                   1516 ;	sch8051.c:252: mut->lock = MUTEX_RELEASED; 
      00051D 8D 82            [24] 1517 	mov	dpl,r5
      00051F 8E 83            [24] 1518 	mov	dph,r6
      000521 8F F0            [24] 1519 	mov	b,r7
      000523 74 01            [12] 1520 	mov	a,#0x01
      000525 12r00r00         [24] 1521 	lcall	__gptrput
                                   1522 ;	sch8051.c:253: for(i = 0; i < sch_num_tasks; i++){
      000528 0D               [12] 1523 	inc	r5
      000529 BD 00 01         [24] 1524 	cjne	r5,#0x00,00132$
      00052C 0E               [12] 1525 	inc	r6
      00052D                       1526 00132$:
      00052D 8D*01            [24] 1527 	mov	_sch_mutex_release_sloc0_1_0,r5
      00052F 8E*02            [24] 1528 	mov	(_sch_mutex_release_sloc0_1_0 + 1),r6
      000531 8F*03            [24] 1529 	mov	(_sch_mutex_release_sloc0_1_0 + 2),r7
      000533 75*00 00         [24] 1530 	mov	_sch_mutex_release_i_65536_49,#0x00
      000536                       1531 00108$:
      000536 90 02 11         [24] 1532 	mov	dptr,#_sch_num_tasks
      000539 E0               [24] 1533 	movx	a,@dptr
      00053A F8               [12] 1534 	mov	r0,a
      00053B C3               [12] 1535 	clr	c
      00053C E5*00            [12] 1536 	mov	a,_sch_mutex_release_i_65536_49
      00053E 98               [12] 1537 	subb	a,r0
      00053F 50 5F            [24] 1538 	jnc	00103$
                                   1539 ;	sch8051.c:254: if(mut->waiting_list[i] == 1){
      000541 C0 05            [24] 1540 	push	ar5
      000543 C0 06            [24] 1541 	push	ar6
      000545 C0 07            [24] 1542 	push	ar7
      000547 E5*00            [12] 1543 	mov	a,_sch_mutex_release_i_65536_49
      000549 25*01            [12] 1544 	add	a,_sch_mutex_release_sloc0_1_0
      00054B F8               [12] 1545 	mov	r0,a
      00054C E4               [12] 1546 	clr	a
      00054D 35*02            [12] 1547 	addc	a,(_sch_mutex_release_sloc0_1_0 + 1)
      00054F F9               [12] 1548 	mov	r1,a
      000550 AF*03            [24] 1549 	mov	r7,(_sch_mutex_release_sloc0_1_0 + 2)
      000552 88 82            [24] 1550 	mov	dpl,r0
      000554 89 83            [24] 1551 	mov	dph,r1
      000556 8F F0            [24] 1552 	mov	b,r7
      000558 12r00r00         [24] 1553 	lcall	__gptrget
      00055B F8               [12] 1554 	mov	r0,a
      00055C B8 01 02         [24] 1555 	cjne	r0,#0x01,00134$
      00055F 80 08            [24] 1556 	sjmp	00135$
      000561                       1557 00134$:
      000561 D0 07            [24] 1558 	pop	ar7
      000563 D0 06            [24] 1559 	pop	ar6
      000565 D0 05            [24] 1560 	pop	ar5
      000567 80 33            [24] 1561 	sjmp	00109$
      000569                       1562 00135$:
      000569 D0 07            [24] 1563 	pop	ar7
      00056B D0 06            [24] 1564 	pop	ar6
      00056D D0 05            [24] 1565 	pop	ar5
                                   1566 ;	sch8051.c:255: sch_tasks[i].state = WAIT;
      00056F E5*00            [12] 1567 	mov	a,_sch_mutex_release_i_65536_49
      000571 75 F0 34         [24] 1568 	mov	b,#0x34
      000574 A4               [48] 1569 	mul	ab
      000575 24 00            [12] 1570 	add	a,#_sch_tasks
      000577 F8               [12] 1571 	mov	r0,a
      000578 74 00            [12] 1572 	mov	a,#(_sch_tasks >> 8)
      00057A 35 F0            [12] 1573 	addc	a,b
      00057C F9               [12] 1574 	mov	r1,a
      00057D 74 33            [12] 1575 	mov	a,#0x33
      00057F 28               [12] 1576 	add	a,r0
      000580 F5 82            [12] 1577 	mov	dpl,a
      000582 E4               [12] 1578 	clr	a
      000583 39               [12] 1579 	addc	a,r1
      000584 F5 83            [12] 1580 	mov	dph,a
      000586 74 01            [12] 1581 	mov	a,#0x01
      000588 F0               [24] 1582 	movx	@dptr,a
                                   1583 ;	sch8051.c:256: mut->waiting_list[i] = 0;  
      000589 E5*00            [12] 1584 	mov	a,_sch_mutex_release_i_65536_49
      00058B 2D               [12] 1585 	add	a,r5
      00058C F8               [12] 1586 	mov	r0,a
      00058D E4               [12] 1587 	clr	a
      00058E 3E               [12] 1588 	addc	a,r6
      00058F F9               [12] 1589 	mov	r1,a
      000590 8F 04            [24] 1590 	mov	ar4,r7
      000592 88 82            [24] 1591 	mov	dpl,r0
      000594 89 83            [24] 1592 	mov	dph,r1
      000596 8C F0            [24] 1593 	mov	b,r4
      000598 E4               [12] 1594 	clr	a
      000599 12r00r00         [24] 1595 	lcall	__gptrput
      00059C                       1596 00109$:
                                   1597 ;	sch8051.c:253: for(i = 0; i < sch_num_tasks; i++){
      00059C 05*00            [12] 1598 	inc	_sch_mutex_release_i_65536_49
      00059E 80 96            [24] 1599 	sjmp	00108$
      0005A0                       1600 00103$:
                                   1601 ;	sch8051.c:259: return 1; 
      0005A0 75 82 01         [24] 1602 	mov	dpl,#0x01
      0005A3                       1603 00110$:
                                   1604 ;	sch8051.c:261: }
      0005A3 D0 D0            [24] 1605 	pop	psw
      0005A5 92 AF            [24] 1606 	mov	ea,c
      0005A7 22               [24] 1607 	ret
                                   1608 ;------------------------------------------------------------
                                   1609 ;Allocation info for local variables in function 'sch_semaphore_start'
                                   1610 ;------------------------------------------------------------
                                   1611 ;size                      Allocated with name '_sch_semaphore_start_PARM_2'
                                   1612 ;sem                       Allocated to registers r5 r6 r7 
                                   1613 ;i                         Allocated to registers r4 
                                   1614 ;------------------------------------------------------------
                                   1615 ;	sch8051.c:263: void sch_semaphore_start(struct sch_semaphore_sync *sem, Byte size){
                                   1616 ;	-----------------------------------------
                                   1617 ;	 function sch_semaphore_start
                                   1618 ;	-----------------------------------------
      0005A8                       1619 _sch_semaphore_start:
                                   1620 ;	sch8051.c:264: sem->lock = size; 
      0005A8 AD 82            [24] 1621 	mov	r5,dpl
      0005AA AE 83            [24] 1622 	mov	r6,dph
      0005AC AF F0            [24] 1623 	mov	r7,b
      0005AE E5*00            [12] 1624 	mov	a,_sch_semaphore_start_PARM_2
      0005B0 12r00r00         [24] 1625 	lcall	__gptrput
                                   1626 ;	sch8051.c:265: sem->share = size; 
      0005B3 74 0B            [12] 1627 	mov	a,#0x0b
      0005B5 2D               [12] 1628 	add	a,r5
      0005B6 FA               [12] 1629 	mov	r2,a
      0005B7 E4               [12] 1630 	clr	a
      0005B8 3E               [12] 1631 	addc	a,r6
      0005B9 FB               [12] 1632 	mov	r3,a
      0005BA 8F 04            [24] 1633 	mov	ar4,r7
      0005BC 8A 82            [24] 1634 	mov	dpl,r2
      0005BE 8B 83            [24] 1635 	mov	dph,r3
      0005C0 8C F0            [24] 1636 	mov	b,r4
      0005C2 E5*00            [12] 1637 	mov	a,_sch_semaphore_start_PARM_2
      0005C4 12r00r00         [24] 1638 	lcall	__gptrput
                                   1639 ;	sch8051.c:267: for(i = 0; i < SCH_MAX_TASKS; i++){
      0005C7 0D               [12] 1640 	inc	r5
      0005C8 BD 00 01         [24] 1641 	cjne	r5,#0x00,00111$
      0005CB 0E               [12] 1642 	inc	r6
      0005CC                       1643 00111$:
      0005CC 7C 00            [12] 1644 	mov	r4,#0x00
      0005CE                       1645 00102$:
                                   1646 ;	sch8051.c:268: sem->waiting_list[i] = 0; 
      0005CE EC               [12] 1647 	mov	a,r4
      0005CF 2D               [12] 1648 	add	a,r5
      0005D0 F9               [12] 1649 	mov	r1,a
      0005D1 E4               [12] 1650 	clr	a
      0005D2 3E               [12] 1651 	addc	a,r6
      0005D3 FA               [12] 1652 	mov	r2,a
      0005D4 8F 03            [24] 1653 	mov	ar3,r7
      0005D6 89 82            [24] 1654 	mov	dpl,r1
      0005D8 8A 83            [24] 1655 	mov	dph,r2
      0005DA 8B F0            [24] 1656 	mov	b,r3
      0005DC E4               [12] 1657 	clr	a
      0005DD 12r00r00         [24] 1658 	lcall	__gptrput
                                   1659 ;	sch8051.c:267: for(i = 0; i < SCH_MAX_TASKS; i++){
      0005E0 0C               [12] 1660 	inc	r4
      0005E1 BC 0A 00         [24] 1661 	cjne	r4,#0x0a,00112$
      0005E4                       1662 00112$:
      0005E4 40 E8            [24] 1663 	jc	00102$
                                   1664 ;	sch8051.c:270: }
      0005E6 22               [24] 1665 	ret
                                   1666 ;------------------------------------------------------------
                                   1667 ;Allocation info for local variables in function 'sch_semaphore_tryget'
                                   1668 ;------------------------------------------------------------
                                   1669 ;sem                       Allocated to registers r5 r6 r7 
                                   1670 ;------------------------------------------------------------
                                   1671 ;	sch8051.c:272: Byte sch_semaphore_tryget(struct sch_semaphore_sync *sem) __critical{
                                   1672 ;	-----------------------------------------
                                   1673 ;	 function sch_semaphore_tryget
                                   1674 ;	-----------------------------------------
      0005E7                       1675 _sch_semaphore_tryget:
      0005E7 D3               [12] 1676 	setb	c
      0005E8 10 AF 01         [24] 1677 	jbc	ea,00110$
      0005EB C3               [12] 1678 	clr	c
      0005EC                       1679 00110$:
      0005EC C0 D0            [24] 1680 	push	psw
                                   1681 ;	sch8051.c:273: if(sem->lock > 0){
      0005EE AD 82            [24] 1682 	mov	r5,dpl
      0005F0 AE 83            [24] 1683 	mov	r6,dph
      0005F2 AF F0            [24] 1684 	mov	r7,b
      0005F4 12r00r00         [24] 1685 	lcall	__gptrget
      0005F7 FC               [12] 1686 	mov	r4,a
      0005F8 60 10            [24] 1687 	jz	00102$
                                   1688 ;	sch8051.c:274: sem->lock--; 
      0005FA 1C               [12] 1689 	dec	r4
      0005FB 8D 82            [24] 1690 	mov	dpl,r5
      0005FD 8E 83            [24] 1691 	mov	dph,r6
      0005FF 8F F0            [24] 1692 	mov	b,r7
      000601 EC               [12] 1693 	mov	a,r4
      000602 12r00r00         [24] 1694 	lcall	__gptrput
                                   1695 ;	sch8051.c:275: return 1; 
      000605 75 82 01         [24] 1696 	mov	dpl,#0x01
      000608 80 03            [24] 1697 	sjmp	00104$
      00060A                       1698 00102$:
                                   1699 ;	sch8051.c:277: return 0; 
      00060A 75 82 00         [24] 1700 	mov	dpl,#0x00
      00060D                       1701 00104$:
                                   1702 ;	sch8051.c:279: }
      00060D D0 D0            [24] 1703 	pop	psw
      00060F 92 AF            [24] 1704 	mov	ea,c
      000611 22               [24] 1705 	ret
                                   1706 ;------------------------------------------------------------
                                   1707 ;Allocation info for local variables in function 'sch_semaphore_get'
                                   1708 ;------------------------------------------------------------
                                   1709 ;sem                       Allocated to registers r5 r6 r7 
                                   1710 ;------------------------------------------------------------
                                   1711 ;	sch8051.c:281: Byte sch_semaphore_get(struct sch_semaphore_sync *sem) __critical{
                                   1712 ;	-----------------------------------------
                                   1713 ;	 function sch_semaphore_get
                                   1714 ;	-----------------------------------------
      000612                       1715 _sch_semaphore_get:
      000612 D3               [12] 1716 	setb	c
      000613 10 AF 01         [24] 1717 	jbc	ea,00110$
      000616 C3               [12] 1718 	clr	c
      000617                       1719 00110$:
      000617 C0 D0            [24] 1720 	push	psw
                                   1721 ;	sch8051.c:282: if(sem->lock > 0){
      000619 AD 82            [24] 1722 	mov	r5,dpl
      00061B AE 83            [24] 1723 	mov	r6,dph
      00061D AF F0            [24] 1724 	mov	r7,b
      00061F 12r00r00         [24] 1725 	lcall	__gptrget
      000622 FC               [12] 1726 	mov	r4,a
      000623 60 10            [24] 1727 	jz	00102$
                                   1728 ;	sch8051.c:283: sem->lock--; 
      000625 1C               [12] 1729 	dec	r4
      000626 8D 82            [24] 1730 	mov	dpl,r5
      000628 8E 83            [24] 1731 	mov	dph,r6
      00062A 8F F0            [24] 1732 	mov	b,r7
      00062C EC               [12] 1733 	mov	a,r4
      00062D 12r00r00         [24] 1734 	lcall	__gptrput
                                   1735 ;	sch8051.c:284: return 1; 
      000630 75 82 01         [24] 1736 	mov	dpl,#0x01
      000633 80 3B            [24] 1737 	sjmp	00104$
      000635                       1738 00102$:
                                   1739 ;	sch8051.c:286: sch_tasks[sch_index].state = BLOCKED; 
      000635 90 02 10         [24] 1740 	mov	dptr,#_sch_index
      000638 E0               [24] 1741 	movx	a,@dptr
      000639 75 F0 34         [24] 1742 	mov	b,#0x34
      00063C A4               [48] 1743 	mul	ab
      00063D 24 00            [12] 1744 	add	a,#_sch_tasks
      00063F FB               [12] 1745 	mov	r3,a
      000640 74 00            [12] 1746 	mov	a,#(_sch_tasks >> 8)
      000642 35 F0            [12] 1747 	addc	a,b
      000644 FC               [12] 1748 	mov	r4,a
      000645 74 33            [12] 1749 	mov	a,#0x33
      000647 2B               [12] 1750 	add	a,r3
      000648 F5 82            [12] 1751 	mov	dpl,a
      00064A E4               [12] 1752 	clr	a
      00064B 3C               [12] 1753 	addc	a,r4
      00064C F5 83            [12] 1754 	mov	dph,a
      00064E 74 02            [12] 1755 	mov	a,#0x02
      000650 F0               [24] 1756 	movx	@dptr,a
                                   1757 ;	sch8051.c:287: sem->waiting_list[sch_index] = 1; 
      000651 0D               [12] 1758 	inc	r5
      000652 BD 00 01         [24] 1759 	cjne	r5,#0x00,00112$
      000655 0E               [12] 1760 	inc	r6
      000656                       1761 00112$:
      000656 90 02 10         [24] 1762 	mov	dptr,#_sch_index
      000659 E0               [24] 1763 	movx	a,@dptr
      00065A 2D               [12] 1764 	add	a,r5
      00065B FD               [12] 1765 	mov	r5,a
      00065C E4               [12] 1766 	clr	a
      00065D 3E               [12] 1767 	addc	a,r6
      00065E FE               [12] 1768 	mov	r6,a
      00065F 8D 82            [24] 1769 	mov	dpl,r5
      000661 8E 83            [24] 1770 	mov	dph,r6
      000663 8F F0            [24] 1771 	mov	b,r7
      000665 74 01            [12] 1772 	mov	a,#0x01
      000667 12r00r00         [24] 1773 	lcall	__gptrput
                                   1774 ;	sch8051.c:288: sch_next(); 
      00066A 12r03r6B         [24] 1775 	lcall	_sch_next
                                   1776 ;	sch8051.c:289: return 0; 
      00066D 75 82 00         [24] 1777 	mov	dpl,#0x00
      000670                       1778 00104$:
                                   1779 ;	sch8051.c:291: }
      000670 D0 D0            [24] 1780 	pop	psw
      000672 92 AF            [24] 1781 	mov	ea,c
      000674 22               [24] 1782 	ret
                                   1783 ;------------------------------------------------------------
                                   1784 ;Allocation info for local variables in function 'sch_semaphore_put'
                                   1785 ;------------------------------------------------------------
                                   1786 ;sem                       Allocated to registers r5 r6 r7 
                                   1787 ;i                         Allocated with name '_sch_semaphore_put_i_65536_69'
                                   1788 ;------------------------------------------------------------
                                   1789 ;	sch8051.c:293: Byte sch_semaphore_put(struct sch_semaphore_sync *sem) __critical{
                                   1790 ;	-----------------------------------------
                                   1791 ;	 function sch_semaphore_put
                                   1792 ;	-----------------------------------------
      000675                       1793 _sch_semaphore_put:
      000675 D3               [12] 1794 	setb	c
      000676 10 AF 01         [24] 1795 	jbc	ea,00129$
      000679 C3               [12] 1796 	clr	c
      00067A                       1797 00129$:
      00067A C0 D0            [24] 1798 	push	psw
                                   1799 ;	sch8051.c:295: if(sem->lock < sem->share){
      00067C AD 82            [24] 1800 	mov	r5,dpl
      00067E AE 83            [24] 1801 	mov	r6,dph
      000680 AF F0            [24] 1802 	mov	r7,b
      000682 12r00r00         [24] 1803 	lcall	__gptrget
      000685 FC               [12] 1804 	mov	r4,a
      000686 74 0B            [12] 1805 	mov	a,#0x0b
      000688 2D               [12] 1806 	add	a,r5
      000689 F9               [12] 1807 	mov	r1,a
      00068A E4               [12] 1808 	clr	a
      00068B 3E               [12] 1809 	addc	a,r6
      00068C FA               [12] 1810 	mov	r2,a
      00068D 8F 03            [24] 1811 	mov	ar3,r7
      00068F 89 82            [24] 1812 	mov	dpl,r1
      000691 8A 83            [24] 1813 	mov	dph,r2
      000693 8B F0            [24] 1814 	mov	b,r3
      000695 12r00r00         [24] 1815 	lcall	__gptrget
      000698 F9               [12] 1816 	mov	r1,a
      000699 C3               [12] 1817 	clr	c
      00069A EC               [12] 1818 	mov	a,r4
      00069B 99               [12] 1819 	subb	a,r1
      00069C 40 03            [24] 1820 	jc	00130$
      00069E 02r07r33         [24] 1821 	ljmp	00105$
      0006A1                       1822 00130$:
                                   1823 ;	sch8051.c:296: sem->lock++;
      0006A1 0C               [12] 1824 	inc	r4
      0006A2 8D 82            [24] 1825 	mov	dpl,r5
      0006A4 8E 83            [24] 1826 	mov	dph,r6
      0006A6 8F F0            [24] 1827 	mov	b,r7
      0006A8 EC               [12] 1828 	mov	a,r4
      0006A9 12r00r00         [24] 1829 	lcall	__gptrput
                                   1830 ;	sch8051.c:297: for(i = 0; i < sch_num_tasks; i++){
      0006AC 0D               [12] 1831 	inc	r5
      0006AD BD 00 01         [24] 1832 	cjne	r5,#0x00,00131$
      0006B0 0E               [12] 1833 	inc	r6
      0006B1                       1834 00131$:
      0006B1 8D 02            [24] 1835 	mov	ar2,r5
      0006B3 8E 03            [24] 1836 	mov	ar3,r6
      0006B5 8F 04            [24] 1837 	mov	ar4,r7
      0006B7 75*00 00         [24] 1838 	mov	_sch_semaphore_put_i_65536_69,#0x00
      0006BA                       1839 00108$:
      0006BA 90 02 11         [24] 1840 	mov	dptr,#_sch_num_tasks
      0006BD E0               [24] 1841 	movx	a,@dptr
      0006BE F8               [12] 1842 	mov	r0,a
      0006BF C3               [12] 1843 	clr	c
      0006C0 E5*00            [12] 1844 	mov	a,_sch_semaphore_put_i_65536_69
      0006C2 98               [12] 1845 	subb	a,r0
      0006C3 50 69            [24] 1846 	jnc	00103$
                                   1847 ;	sch8051.c:298: if(sem->waiting_list[i] == 1){
      0006C5 C0 05            [24] 1848 	push	ar5
      0006C7 C0 06            [24] 1849 	push	ar6
      0006C9 C0 07            [24] 1850 	push	ar7
      0006CB E5*00            [12] 1851 	mov	a,_sch_semaphore_put_i_65536_69
      0006CD 2A               [12] 1852 	add	a,r2
      0006CE F8               [12] 1853 	mov	r0,a
      0006CF E4               [12] 1854 	clr	a
      0006D0 3B               [12] 1855 	addc	a,r3
      0006D1 F9               [12] 1856 	mov	r1,a
      0006D2 8C 07            [24] 1857 	mov	ar7,r4
      0006D4 88 82            [24] 1858 	mov	dpl,r0
      0006D6 89 83            [24] 1859 	mov	dph,r1
      0006D8 8F F0            [24] 1860 	mov	b,r7
      0006DA 12r00r00         [24] 1861 	lcall	__gptrget
      0006DD F8               [12] 1862 	mov	r0,a
      0006DE B8 01 02         [24] 1863 	cjne	r0,#0x01,00133$
      0006E1 80 08            [24] 1864 	sjmp	00134$
      0006E3                       1865 00133$:
      0006E3 D0 07            [24] 1866 	pop	ar7
      0006E5 D0 06            [24] 1867 	pop	ar6
      0006E7 D0 05            [24] 1868 	pop	ar5
      0006E9 80 3F            [24] 1869 	sjmp	00109$
      0006EB                       1870 00134$:
      0006EB D0 07            [24] 1871 	pop	ar7
      0006ED D0 06            [24] 1872 	pop	ar6
      0006EF D0 05            [24] 1873 	pop	ar5
                                   1874 ;	sch8051.c:299: sem->waiting_list[i] = 0; 
      0006F1 C0 02            [24] 1875 	push	ar2
      0006F3 C0 03            [24] 1876 	push	ar3
      0006F5 C0 04            [24] 1877 	push	ar4
      0006F7 E5*00            [12] 1878 	mov	a,_sch_semaphore_put_i_65536_69
      0006F9 2D               [12] 1879 	add	a,r5
      0006FA F8               [12] 1880 	mov	r0,a
      0006FB E4               [12] 1881 	clr	a
      0006FC 3E               [12] 1882 	addc	a,r6
      0006FD F9               [12] 1883 	mov	r1,a
      0006FE 8F 04            [24] 1884 	mov	ar4,r7
      000700 88 82            [24] 1885 	mov	dpl,r0
      000702 89 83            [24] 1886 	mov	dph,r1
      000704 8C F0            [24] 1887 	mov	b,r4
      000706 E4               [12] 1888 	clr	a
      000707 12r00r00         [24] 1889 	lcall	__gptrput
                                   1890 ;	sch8051.c:300: sch_tasks[i].state = WAIT; 	
      00070A E5*00            [12] 1891 	mov	a,_sch_semaphore_put_i_65536_69
      00070C 75 F0 34         [24] 1892 	mov	b,#0x34
      00070F A4               [48] 1893 	mul	ab
      000710 24 00            [12] 1894 	add	a,#_sch_tasks
      000712 FB               [12] 1895 	mov	r3,a
      000713 74 00            [12] 1896 	mov	a,#(_sch_tasks >> 8)
      000715 35 F0            [12] 1897 	addc	a,b
      000717 FC               [12] 1898 	mov	r4,a
      000718 74 33            [12] 1899 	mov	a,#0x33
      00071A 2B               [12] 1900 	add	a,r3
      00071B F5 82            [12] 1901 	mov	dpl,a
      00071D E4               [12] 1902 	clr	a
      00071E 3C               [12] 1903 	addc	a,r4
      00071F F5 83            [12] 1904 	mov	dph,a
      000721 74 01            [12] 1905 	mov	a,#0x01
      000723 F0               [24] 1906 	movx	@dptr,a
                                   1907 ;	sch8051.c:305: return 0; 
      000724 D0 04            [24] 1908 	pop	ar4
      000726 D0 03            [24] 1909 	pop	ar3
      000728 D0 02            [24] 1910 	pop	ar2
                                   1911 ;	sch8051.c:300: sch_tasks[i].state = WAIT; 	
      00072A                       1912 00109$:
                                   1913 ;	sch8051.c:297: for(i = 0; i < sch_num_tasks; i++){
      00072A 05*00            [12] 1914 	inc	_sch_semaphore_put_i_65536_69
      00072C 80 8C            [24] 1915 	sjmp	00108$
      00072E                       1916 00103$:
                                   1917 ;	sch8051.c:303: return 1; 
      00072E 75 82 01         [24] 1918 	mov	dpl,#0x01
      000731 80 03            [24] 1919 	sjmp	00110$
      000733                       1920 00105$:
                                   1921 ;	sch8051.c:305: return 0; 
      000733 75 82 00         [24] 1922 	mov	dpl,#0x00
      000736                       1923 00110$:
                                   1924 ;	sch8051.c:307: }
      000736 D0 D0            [24] 1925 	pop	psw
      000738 92 AF            [24] 1926 	mov	ea,c
      00073A 22               [24] 1927 	ret
                                   1928 	.area CSEG    (CODE)
                                   1929 	.area CONST   (CODE)
                                   1930 	.area XINIT   (CODE)
                                   1931 	.area CABS    (ABS,CODE)
